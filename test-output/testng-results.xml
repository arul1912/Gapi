<?xml version="1.0" encoding="UTF-8"?>
<testng-results retried="143" ignored="147" total="836" passed="409" failed="137" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-05-19T17:55:46 IST" name="gapi" finished-at="2023-05-19T18:18:40 IST" duration-ms="1374536">
    <groups>
      <group name="All">
        <method signature="CancelCustomerSupportTicket.verifyCancelCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelCustomerSupportTicket@11bb571c]" name="verifyCancelCustomerSupportTicket" class="com.gapi.testCases.CancelCustomerSupportTicket"/>
        <method signature="GetCrossConnectDetails.verifyGetCrossConnectDetailsByValidId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" name="verifyGetCrossConnectDetailsByValidId" class="com.gapi.testCases.GetCrossConnectDetails"/>
      </group> <!-- All -->
    </groups>
    <test started-at="2023-05-19T17:55:46 IST" name="All Test Cases" finished-at="2023-05-19T18:18:40 IST" duration-ms="1374536">
      <class name="com.gapi.testCases.CreatePermanentBadgeRequest">
        <test-method retried="true" signature="verifyAttributeCreatePermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:53 IST" name="verifyAttributeCreatePermanentBadgeRequest" data-provider="testCasesData" finished-at="2023-05-19T18:12:53 IST" duration-ms="649" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-9004-Create Permanent badge request in Test for Telx Group and verify weather the category attribute value as (New Badge) from Service ticket Get Call Response, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Request for New Permanent badge, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyAttributeCreatePermanentBadgeRequest, TestCaseID=GAPI-9004, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=New Badge, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyAttributeCreatePermanentBadgeRequest(CreatePermanentBadgeRequest.java:269)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAttributeCreatePermanentBadgeRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:53 IST" name="teardown" finished-at="2023-05-19T18:12:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAttributeCreatePermanentBadgeRequest status=SKIP method=CreatePermanentBadgeRequest.verifyAttributeCreatePermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyAttributeCreatePermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:53 IST" name="verifyAttributeCreatePermanentBadgeRequest" data-provider="testCasesData" finished-at="2023-05-19T18:12:54 IST" duration-ms="438" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-9004-Create Permanent badge request in Test for Telx Group and verify weather the category attribute value as (New Badge) from Service ticket Get Call Response, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Request for New Permanent badge, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyAttributeCreatePermanentBadgeRequest, TestCaseID=GAPI-9004, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=New Badge, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyAttributeCreatePermanentBadgeRequest(CreatePermanentBadgeRequest.java:269)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAttributeCreatePermanentBadgeRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:54 IST" name="teardown" finished-at="2023-05-19T18:12:54 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAttributeCreatePermanentBadgeRequest status=FAILURE method=CreatePermanentBadgeRequest.verifyAttributeCreatePermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyCreatePermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:54 IST" name="verifyCreatePermanentBadgeRequest" data-provider="testCasesData" finished-at="2023-05-19T18:12:54 IST" duration-ms="428" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-6839-GAPI-6259-Create permanent badge access request with all mandatory parameters, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreatePermanentBadgeRequest, TestCaseID=GAPI-6839, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyCreatePermanentBadgeRequest(CreatePermanentBadgeRequest.java:55)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreatePermanentBadgeRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:54 IST" name="teardown" finished-at="2023-05-19T18:12:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreatePermanentBadgeRequest status=SKIP method=CreatePermanentBadgeRequest.verifyCreatePermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreatePermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:54 IST" name="verifyCreatePermanentBadgeRequest" data-provider="testCasesData" finished-at="2023-05-19T18:12:55 IST" duration-ms="462" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-6839-GAPI-6259-Create permanent badge access request with all mandatory parameters, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreatePermanentBadgeRequest, TestCaseID=GAPI-6839, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyCreatePermanentBadgeRequest(CreatePermanentBadgeRequest.java:55)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreatePermanentBadgeRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:55 IST" name="teardown" finished-at="2023-05-19T18:12:55 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreatePermanentBadgeRequest status=FAILURE method=CreatePermanentBadgeRequest.verifyCreatePermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyCreatePermanentBadgeRequestForExpiryDate(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:55 IST" name="verifyCreatePermanentBadgeRequestForExpiryDate" data-provider="testCasesData" finished-at="2023-05-19T18:12:55 IST" duration-ms="504" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-6259-Permanent badge - Verify that a badge with an expiration date greater than one year from today's date was created or not, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreatePermanentBadgeRequestForExpiryDate, TestCaseID=GAPI-6259, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [401]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [401]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyCreatePermanentBadgeRequestForExpiryDate(CreatePermanentBadgeRequest.java:372)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreatePermanentBadgeRequestForExpiryDate -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:55 IST" name="teardown" finished-at="2023-05-19T18:12:55 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreatePermanentBadgeRequestForExpiryDate status=SKIP method=CreatePermanentBadgeRequest.verifyCreatePermanentBadgeRequestForExpiryDate(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreatePermanentBadgeRequestForExpiryDate(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:55 IST" name="verifyCreatePermanentBadgeRequestForExpiryDate" data-provider="testCasesData" finished-at="2023-05-19T18:12:56 IST" duration-ms="426" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-6259-Permanent badge - Verify that a badge with an expiration date greater than one year from today's date was created or not, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreatePermanentBadgeRequestForExpiryDate, TestCaseID=GAPI-6259, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyCreatePermanentBadgeRequestForExpiryDate(CreatePermanentBadgeRequest.java:372)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreatePermanentBadgeRequestForExpiryDate -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:56 IST" name="teardown" finished-at="2023-05-19T18:12:56 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreatePermanentBadgeRequestForExpiryDate status=FAILURE method=CreatePermanentBadgeRequest.verifyCreatePermanentBadgeRequestForExpiryDate(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreatePermanentBadgeRequestForInvalidLegalentity(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:56 IST" name="verifyCreatePermanentBadgeRequestForInvalidLegalentity" data-provider="testCasesData" finished-at="2023-05-19T18:12:56 IST" duration-ms="281" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Create permanent badge access request with  Invalid Legal Entity, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreatePermanentBadgeRequestForInvalidLegalentity, TestCaseID=Create pe, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreatePermanentBadgeRequestForInvalidLegalentity -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:56 IST" name="teardown" finished-at="2023-05-19T18:12:56 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreatePermanentBadgeRequestForInvalidLegalentity status=SUCCESS method=CreatePermanentBadgeRequest.verifyCreatePermanentBadgeRequestForInvalidLegalentity(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreatePermanentBadgeRequestForInvalidToken(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:56 IST" name="verifyCreatePermanentBadgeRequestForInvalidToken" data-provider="testCasesData" finished-at="2023-05-19T18:12:56 IST" duration-ms="196" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Create permanent badge access request with Invalid Token, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreatePermanentBadgeRequestForInvalidToken, TestCaseID=Create pe, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreatePermanentBadgeRequestForInvalidToken -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:56 IST" name="teardown" finished-at="2023-05-19T18:12:56 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreatePermanentBadgeRequestForInvalidToken status=SUCCESS method=CreatePermanentBadgeRequest.verifyCreatePermanentBadgeRequestForInvalidToken(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyCreatePermanentBadgeRequestGetService(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:56 IST" name="verifyCreatePermanentBadgeRequestGetService" data-provider="testCasesData" finished-at="2023-05-19T18:12:57 IST" duration-ms="510" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8988-FA-Permanent Badge - Create New Badge - Get Service ticket, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Request for New Permanent badge, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreatePermanentBadgeRequestGetService, TestCaseID=GAPI-8988, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyCreatePermanentBadgeRequestGetService(CreatePermanentBadgeRequest.java:231)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreatePermanentBadgeRequestGetService -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:57 IST" name="teardown" finished-at="2023-05-19T18:12:57 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreatePermanentBadgeRequestGetService status=SKIP method=CreatePermanentBadgeRequest.verifyCreatePermanentBadgeRequestGetService(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreatePermanentBadgeRequestGetService(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:57 IST" name="verifyCreatePermanentBadgeRequestGetService" data-provider="testCasesData" finished-at="2023-05-19T18:12:57 IST" duration-ms="422" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8988-FA-Permanent Badge - Create New Badge - Get Service ticket, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Request for New Permanent badge, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreatePermanentBadgeRequestGetService, TestCaseID=GAPI-8988, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyCreatePermanentBadgeRequestGetService(CreatePermanentBadgeRequest.java:231)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreatePermanentBadgeRequestGetService -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:57 IST" name="teardown" finished-at="2023-05-19T18:12:57 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreatePermanentBadgeRequestGetService status=FAILURE method=CreatePermanentBadgeRequest.verifyCreatePermanentBadgeRequestGetService(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyCreatePermanentBadgeRequestTelxGroup(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:57 IST" name="verifyCreatePermanentBadgeRequestTelxGroup" data-provider="testCasesData" finished-at="2023-05-19T18:12:57 IST" duration-ms="441" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8916-Create Permanent badge request in Test for Telx Group and verify weather the Description attribute value as (Request for New Permanent Badge) from Service ticket Get Call Response, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=Request for New Permanent badge, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreatePermanentBadgeRequestTelxGroup, TestCaseID=GAPI-8916, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyCreatePermanentBadgeRequestTelxGroup(CreatePermanentBadgeRequest.java:399)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreatePermanentBadgeRequestTelxGroup -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:57 IST" name="teardown" finished-at="2023-05-19T18:12:57 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreatePermanentBadgeRequestTelxGroup status=SKIP method=CreatePermanentBadgeRequest.verifyCreatePermanentBadgeRequestTelxGroup(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreatePermanentBadgeRequestTelxGroup(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:57 IST" name="verifyCreatePermanentBadgeRequestTelxGroup" data-provider="testCasesData" finished-at="2023-05-19T18:12:58 IST" duration-ms="417" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8916-Create Permanent badge request in Test for Telx Group and verify weather the Description attribute value as (Request for New Permanent Badge) from Service ticket Get Call Response, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=Request for New Permanent badge, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreatePermanentBadgeRequestTelxGroup, TestCaseID=GAPI-8916, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyCreatePermanentBadgeRequestTelxGroup(CreatePermanentBadgeRequest.java:399)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreatePermanentBadgeRequestTelxGroup -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:58 IST" name="teardown" finished-at="2023-05-19T18:12:58 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreatePermanentBadgeRequestTelxGroup status=FAILURE method=CreatePermanentBadgeRequest.verifyCreatePermanentBadgeRequestTelxGroup(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyCreatePermanentBadgeSubjectEnhancement(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:58 IST" name="verifyCreatePermanentBadgeSubjectEnhancement" data-provider="testCasesData" finished-at="2023-05-19T18:12:58 IST" duration-ms="435" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=Request for New Permanent badge, TestCaseName=GAPI-8985-FA-Permanent Badge - Create New Badge -Subject Enhancement, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=Request for New Permanent badge, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreatePermanentBadgeSubjectEnhancement, TestCaseID=GAPI-8985, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyCreatePermanentBadgeSubjectEnhancement(CreatePermanentBadgeRequest.java:312)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreatePermanentBadgeSubjectEnhancement -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:58 IST" name="teardown" finished-at="2023-05-19T18:12:58 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreatePermanentBadgeSubjectEnhancement status=SKIP method=CreatePermanentBadgeRequest.verifyCreatePermanentBadgeSubjectEnhancement(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreatePermanentBadgeSubjectEnhancement(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:58 IST" name="verifyCreatePermanentBadgeSubjectEnhancement" data-provider="testCasesData" finished-at="2023-05-19T18:12:59 IST" duration-ms="419" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=Request for New Permanent badge, TestCaseName=GAPI-8985-FA-Permanent Badge - Create New Badge -Subject Enhancement, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=Request for New Permanent badge, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreatePermanentBadgeSubjectEnhancement, TestCaseID=GAPI-8985, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyCreatePermanentBadgeSubjectEnhancement(CreatePermanentBadgeRequest.java:312)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreatePermanentBadgeSubjectEnhancement -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:59 IST" name="teardown" finished-at="2023-05-19T18:12:59 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreatePermanentBadgeSubjectEnhancement status=FAILURE method=CreatePermanentBadgeRequest.verifyCreatePermanentBadgeSubjectEnhancement(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyPermanentBadgeApprovedAndDeniedForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:59 IST" name="verifyPermanentBadgeApprovedAndDeniedForMultipleLocations" data-provider="testCasesData" finished-at="2023-05-19T18:12:59 IST" duration-ms="403" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8975-FA- Permanent badge -Create ticket for Multiple locations and verify the Ticket Status when one location is Approved and other one is Denied, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyPermanentBadgeApprovedAndDeniedForMultipleLocations, TestCaseID=GAPI-8975, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=Starbucks Cage F150-B, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreatePermanentBadgeRequest.createPermanentBadgeTicketsForMultipleLocations(CreatePermanentBadgeRequest.java:589)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyPermanentBadgeApprovedAndDeniedForMultipleLocations(CreatePermanentBadgeRequest.java:508)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPermanentBadgeApprovedAndDeniedForMultipleLocations -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:59 IST" name="teardown" finished-at="2023-05-19T18:12:59 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPermanentBadgeApprovedAndDeniedForMultipleLocations status=SKIP method=CreatePermanentBadgeRequest.verifyPermanentBadgeApprovedAndDeniedForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyPermanentBadgeApprovedAndDeniedForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:12:59 IST" name="verifyPermanentBadgeApprovedAndDeniedForMultipleLocations" data-provider="testCasesData" finished-at="2023-05-19T18:13:00 IST" duration-ms="397" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8975-FA- Permanent badge -Create ticket for Multiple locations and verify the Ticket Status when one location is Approved and other one is Denied, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyPermanentBadgeApprovedAndDeniedForMultipleLocations, TestCaseID=GAPI-8975, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=Starbucks Cage F150-B, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreatePermanentBadgeRequest.createPermanentBadgeTicketsForMultipleLocations(CreatePermanentBadgeRequest.java:589)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyPermanentBadgeApprovedAndDeniedForMultipleLocations(CreatePermanentBadgeRequest.java:508)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPermanentBadgeApprovedAndDeniedForMultipleLocations -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:00 IST" name="teardown" finished-at="2023-05-19T18:13:00 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPermanentBadgeApprovedAndDeniedForMultipleLocations status=FAILURE method=CreatePermanentBadgeRequest.verifyPermanentBadgeApprovedAndDeniedForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyPermanentBadgeApprovedForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:00 IST" name="verifyPermanentBadgeApprovedForMultipleLocations" data-provider="testCasesData" finished-at="2023-05-19T18:13:00 IST" duration-ms="449" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8976-Facility Access APIFA- Permanent badge -Create ticket for Multiple locations and verify the Ticket Status when both locations are Approved, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyPermanentBadgeApprovedForMultipleLocations, TestCaseID=GAPI-8976, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=Starbucks Cage F150-B, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreatePermanentBadgeRequest.createPermanentBadgeTicketsForMultipleLocations(CreatePermanentBadgeRequest.java:589)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyPermanentBadgeApprovedForMultipleLocations(CreatePermanentBadgeRequest.java:473)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPermanentBadgeApprovedForMultipleLocations -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:00 IST" name="teardown" finished-at="2023-05-19T18:13:00 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPermanentBadgeApprovedForMultipleLocations status=SKIP method=CreatePermanentBadgeRequest.verifyPermanentBadgeApprovedForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyPermanentBadgeApprovedForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:00 IST" name="verifyPermanentBadgeApprovedForMultipleLocations" data-provider="testCasesData" finished-at="2023-05-19T18:13:00 IST" duration-ms="433" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8976-Facility Access APIFA- Permanent badge -Create ticket for Multiple locations and verify the Ticket Status when both locations are Approved, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyPermanentBadgeApprovedForMultipleLocations, TestCaseID=GAPI-8976, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=Starbucks Cage F150-B, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreatePermanentBadgeRequest.createPermanentBadgeTicketsForMultipleLocations(CreatePermanentBadgeRequest.java:589)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyPermanentBadgeApprovedForMultipleLocations(CreatePermanentBadgeRequest.java:473)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPermanentBadgeApprovedForMultipleLocations -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:00 IST" name="teardown" finished-at="2023-05-19T18:13:00 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPermanentBadgeApprovedForMultipleLocations status=FAILURE method=CreatePermanentBadgeRequest.verifyPermanentBadgeApprovedForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyPermanentBadgeApprovedForSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:00 IST" name="verifyPermanentBadgeApprovedForSingleLocation" data-provider="testCasesData" finished-at="2023-05-19T18:13:01 IST" duration-ms="401" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8979-FA- Permanent badge -Create ticket for single Location and verify the Ticket Status when the location status is Denied, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyPermanentBadgeApprovedForSingleLocation, TestCaseID=GAPI-8979, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreatePermanentBadgeRequest.createPermanentBadgeTicketsForSingleLocation(CreatePermanentBadgeRequest.java:574)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyPermanentBadgeApprovedForSingleLocation(CreatePermanentBadgeRequest.java:526)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPermanentBadgeApprovedForSingleLocation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:01 IST" name="teardown" finished-at="2023-05-19T18:13:01 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPermanentBadgeApprovedForSingleLocation status=SKIP method=CreatePermanentBadgeRequest.verifyPermanentBadgeApprovedForSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyPermanentBadgeApprovedForSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:01 IST" name="verifyPermanentBadgeApprovedForSingleLocation" data-provider="testCasesData" finished-at="2023-05-19T18:13:01 IST" duration-ms="449" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8979-FA- Permanent badge -Create ticket for single Location and verify the Ticket Status when the location status is Denied, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyPermanentBadgeApprovedForSingleLocation, TestCaseID=GAPI-8979, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreatePermanentBadgeRequest.createPermanentBadgeTicketsForSingleLocation(CreatePermanentBadgeRequest.java:574)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyPermanentBadgeApprovedForSingleLocation(CreatePermanentBadgeRequest.java:526)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPermanentBadgeApprovedForSingleLocation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:01 IST" name="teardown" finished-at="2023-05-19T18:13:01 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPermanentBadgeApprovedForSingleLocation status=FAILURE method=CreatePermanentBadgeRequest.verifyPermanentBadgeApprovedForSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyPermanentBadgeAprovedAndPendingApprovalForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:01 IST" name="verifyPermanentBadgeAprovedAndPendingApprovalForMultipleLocations" data-provider="testCasesData" finished-at="2023-05-19T18:13:02 IST" duration-ms="409" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8973-FA-Permanent Badge -Create ticket with multiple Locations and verify the Ticket Status when one location is Approved and other one is pending for Approval, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyPermanentBadgeAprovedAndPendingApprovalForMultipleLocations, TestCaseID=GAPI-8973, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=Starbucks Cage F150-B, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreatePermanentBadgeRequest.createPermanentBadgeTicketsForMultipleLocations(CreatePermanentBadgeRequest.java:589)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyPermanentBadgeAprovedAndPendingApprovalForMultipleLocations(CreatePermanentBadgeRequest.java:440)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPermanentBadgeAprovedAndPendingApprovalForMultipleLocations -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:02 IST" name="teardown" finished-at="2023-05-19T18:13:02 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPermanentBadgeAprovedAndPendingApprovalForMultipleLocations status=SKIP method=CreatePermanentBadgeRequest.verifyPermanentBadgeAprovedAndPendingApprovalForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyPermanentBadgeAprovedAndPendingApprovalForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:02 IST" name="verifyPermanentBadgeAprovedAndPendingApprovalForMultipleLocations" data-provider="testCasesData" finished-at="2023-05-19T18:13:02 IST" duration-ms="386" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8973-FA-Permanent Badge -Create ticket with multiple Locations and verify the Ticket Status when one location is Approved and other one is pending for Approval, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyPermanentBadgeAprovedAndPendingApprovalForMultipleLocations, TestCaseID=GAPI-8973, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=Starbucks Cage F150-B, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreatePermanentBadgeRequest.createPermanentBadgeTicketsForMultipleLocations(CreatePermanentBadgeRequest.java:589)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyPermanentBadgeAprovedAndPendingApprovalForMultipleLocations(CreatePermanentBadgeRequest.java:440)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPermanentBadgeAprovedAndPendingApprovalForMultipleLocations -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:02 IST" name="teardown" finished-at="2023-05-19T18:13:02 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPermanentBadgeAprovedAndPendingApprovalForMultipleLocations status=FAILURE method=CreatePermanentBadgeRequest.verifyPermanentBadgeAprovedAndPendingApprovalForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyPermanentBadgeDeniedAndPendingApprovalForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:02 IST" name="verifyPermanentBadgeDeniedAndPendingApprovalForMultipleLocations" data-provider="testCasesData" finished-at="2023-05-19T18:13:02 IST" duration-ms="397" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8974-FA- Permanent badge -Create ticket for Multiple locations and verify the Ticket Status when one location is Denied and other one is pending for Approval, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyPermanentBadgeDeniedAndPendingApprovalForMultipleLocations, TestCaseID=GAPI-8974, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=Starbucks Cage F150-B, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreatePermanentBadgeRequest.createPermanentBadgeTicketsForMultipleLocations(CreatePermanentBadgeRequest.java:589)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyPermanentBadgeDeniedAndPendingApprovalForMultipleLocations(CreatePermanentBadgeRequest.java:457)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPermanentBadgeDeniedAndPendingApprovalForMultipleLocations -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:02 IST" name="teardown" finished-at="2023-05-19T18:13:02 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPermanentBadgeDeniedAndPendingApprovalForMultipleLocations status=SKIP method=CreatePermanentBadgeRequest.verifyPermanentBadgeDeniedAndPendingApprovalForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyPermanentBadgeDeniedAndPendingApprovalForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:02 IST" name="verifyPermanentBadgeDeniedAndPendingApprovalForMultipleLocations" data-provider="testCasesData" finished-at="2023-05-19T18:13:03 IST" duration-ms="405" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8974-FA- Permanent badge -Create ticket for Multiple locations and verify the Ticket Status when one location is Denied and other one is pending for Approval, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyPermanentBadgeDeniedAndPendingApprovalForMultipleLocations, TestCaseID=GAPI-8974, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=Starbucks Cage F150-B, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreatePermanentBadgeRequest.createPermanentBadgeTicketsForMultipleLocations(CreatePermanentBadgeRequest.java:589)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyPermanentBadgeDeniedAndPendingApprovalForMultipleLocations(CreatePermanentBadgeRequest.java:457)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPermanentBadgeDeniedAndPendingApprovalForMultipleLocations -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:03 IST" name="teardown" finished-at="2023-05-19T18:13:03 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPermanentBadgeDeniedAndPendingApprovalForMultipleLocations status=FAILURE method=CreatePermanentBadgeRequest.verifyPermanentBadgeDeniedAndPendingApprovalForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyPermanentBadgeDeniedForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:03 IST" name="verifyPermanentBadgeDeniedForMultipleLocations" data-provider="testCasesData" finished-at="2023-05-19T18:13:03 IST" duration-ms="437" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8977-FA- Permanent badge -Create ticket for Multiple locations and  verify the Ticket Status when both locations are Denied, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyPermanentBadgeDeniedForMultipleLocations, TestCaseID=GAPI-8977, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=Starbucks Cage F150-B, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreatePermanentBadgeRequest.createPermanentBadgeTicketsForMultipleLocations(CreatePermanentBadgeRequest.java:589)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyPermanentBadgeDeniedForMultipleLocations(CreatePermanentBadgeRequest.java:491)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPermanentBadgeDeniedForMultipleLocations -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:03 IST" name="teardown" finished-at="2023-05-19T18:13:03 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPermanentBadgeDeniedForMultipleLocations status=SKIP method=CreatePermanentBadgeRequest.verifyPermanentBadgeDeniedForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyPermanentBadgeDeniedForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:03 IST" name="verifyPermanentBadgeDeniedForMultipleLocations" data-provider="testCasesData" finished-at="2023-05-19T18:13:04 IST" duration-ms="424" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8977-FA- Permanent badge -Create ticket for Multiple locations and  verify the Ticket Status when both locations are Denied, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyPermanentBadgeDeniedForMultipleLocations, TestCaseID=GAPI-8977, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=Starbucks Cage F150-B, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreatePermanentBadgeRequest.createPermanentBadgeTicketsForMultipleLocations(CreatePermanentBadgeRequest.java:589)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyPermanentBadgeDeniedForMultipleLocations(CreatePermanentBadgeRequest.java:491)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPermanentBadgeDeniedForMultipleLocations -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:04 IST" name="teardown" finished-at="2023-05-19T18:13:04 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPermanentBadgeDeniedForMultipleLocations status=FAILURE method=CreatePermanentBadgeRequest.verifyPermanentBadgeDeniedForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyPermanentBadgeDeniedForSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:04 IST" name="verifyPermanentBadgeDeniedForSingleLocation" data-provider="testCasesData" finished-at="2023-05-19T18:13:04 IST" duration-ms="395" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8978-FA- Permanent badge -Create ticket for single Location and verify the Ticket Status when the location status is Approved, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyPermanentBadgeDeniedForSingleLocation, TestCaseID=GAPI-8978, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreatePermanentBadgeRequest.createPermanentBadgeTicketsForSingleLocation(CreatePermanentBadgeRequest.java:574)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyPermanentBadgeDeniedForSingleLocation(CreatePermanentBadgeRequest.java:542)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPermanentBadgeDeniedForSingleLocation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:04 IST" name="teardown" finished-at="2023-05-19T18:13:04 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPermanentBadgeDeniedForSingleLocation status=SKIP method=CreatePermanentBadgeRequest.verifyPermanentBadgeDeniedForSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyPermanentBadgeDeniedForSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:04 IST" name="verifyPermanentBadgeDeniedForSingleLocation" data-provider="testCasesData" finished-at="2023-05-19T18:13:05 IST" duration-ms="399" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8978-FA- Permanent badge -Create ticket for single Location and verify the Ticket Status when the location status is Approved, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyPermanentBadgeDeniedForSingleLocation, TestCaseID=GAPI-8978, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreatePermanentBadgeRequest.createPermanentBadgeTicketsForSingleLocation(CreatePermanentBadgeRequest.java:574)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyPermanentBadgeDeniedForSingleLocation(CreatePermanentBadgeRequest.java:542)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPermanentBadgeDeniedForSingleLocation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:05 IST" name="teardown" finished-at="2023-05-19T18:13:05 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPermanentBadgeDeniedForSingleLocation status=FAILURE method=CreatePermanentBadgeRequest.verifyPermanentBadgeDeniedForSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyPermanentBadgePendingApprovalForSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:05 IST" name="verifyPermanentBadgePendingApprovalForSingleLocation" data-provider="testCasesData" finished-at="2023-05-19T18:13:05 IST" duration-ms="402" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8981-FA- Permanent badge -Create ticket for single Location and  verify the Ticket Status when the location status is Pending for Approval, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyPermanentBadgePendingApprovalForSingleLocation, TestCaseID=GAPI-8981, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreatePermanentBadgeRequest.createPermanentBadgeTicketsForSingleLocation(CreatePermanentBadgeRequest.java:574)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyPermanentBadgePendingApprovalForSingleLocation(CreatePermanentBadgeRequest.java:558)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPermanentBadgePendingApprovalForSingleLocation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:05 IST" name="teardown" finished-at="2023-05-19T18:13:05 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPermanentBadgePendingApprovalForSingleLocation status=SKIP method=CreatePermanentBadgeRequest.verifyPermanentBadgePendingApprovalForSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyPermanentBadgePendingApprovalForSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:05 IST" name="verifyPermanentBadgePendingApprovalForSingleLocation" data-provider="testCasesData" finished-at="2023-05-19T18:13:05 IST" duration-ms="404" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8981-FA- Permanent badge -Create ticket for single Location and  verify the Ticket Status when the location status is Pending for Approval, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyPermanentBadgePendingApprovalForSingleLocation, TestCaseID=GAPI-8981, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreatePermanentBadgeRequest.createPermanentBadgeTicketsForSingleLocation(CreatePermanentBadgeRequest.java:574)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyPermanentBadgePendingApprovalForSingleLocation(CreatePermanentBadgeRequest.java:558)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPermanentBadgePendingApprovalForSingleLocation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:05 IST" name="teardown" finished-at="2023-05-19T18:13:05 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyPermanentBadgePendingApprovalForSingleLocation status=FAILURE method=CreatePermanentBadgeRequest.verifyPermanentBadgePendingApprovalForSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyUploadAttachmentToPermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:05 IST" name="verifyUploadAttachmentToPermanentBadgeRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:06 IST" duration-ms="449" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=true, contactType=, TestCaseName=Create Permanent Badge request and upload attachment, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyUploadAttachmentToPermanentBadgeRequest, TestCaseID=Create Pe, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyUploadAttachmentToPermanentBadgeRequest(CreatePermanentBadgeRequest.java:174)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUploadAttachmentToPermanentBadgeRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:06 IST" name="teardown" finished-at="2023-05-19T18:13:06 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyUploadAttachmentToPermanentBadgeRequest status=SKIP method=CreatePermanentBadgeRequest.verifyUploadAttachmentToPermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyUploadAttachmentToPermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:06 IST" name="verifyUploadAttachmentToPermanentBadgeRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:06 IST" duration-ms="413" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=true, contactType=, TestCaseName=Create Permanent Badge request and upload attachment, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyUploadAttachmentToPermanentBadgeRequest, TestCaseID=Create Pe, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CreatePermanentBadgeRequest.verifyUploadAttachmentToPermanentBadgeRequest(CreatePermanentBadgeRequest.java:174)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUploadAttachmentToPermanentBadgeRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2]" started-at="2023-05-19T18:13:06 IST" name="teardown" finished-at="2023-05-19T18:13:06 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyUploadAttachmentToPermanentBadgeRequest status=FAILURE method=CreatePermanentBadgeRequest.verifyUploadAttachmentToPermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePermanentBadgeRequest@6e15fe2] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.CreatePermanentBadgeRequest -->
      <class name="com.gapi.testCases.CreateFAOSPRequest">
        <test-method retried="true" signature="verifyCreateOSPAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@68f1b17f]" started-at="2023-05-19T18:13:06 IST" name="verifyCreateOSPAccessRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:07 IST" duration-ms="849" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=service, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=Visitor, TestCaseName=GAPI-6264-Create OSP access request with all mandatory parameters, search_query=, serviceImpactedDescription=not yet, yardi_id=, deleteFlag=, customerReference=, action=, details=OSP Access Request Form, ExpectedStatusMessage=OK, visitorPhone=919876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=service, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=any thing, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=external, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreateOSPAccessRequest, TestCaseID=GAPI-6264, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [404] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [404] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.CreateFAOSPRequest.verifyCreateOSPAccessRequest(CreateFAOSPRequest.java:47)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateOSPAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@68f1b17f]" started-at="2023-05-19T18:13:07 IST" name="teardown" finished-at="2023-05-19T18:13:07 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateOSPAccessRequest status=SKIP method=CreateFAOSPRequest.verifyCreateOSPAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@68f1b17f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateOSPAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@68f1b17f]" started-at="2023-05-19T18:13:07 IST" name="verifyCreateOSPAccessRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:08 IST" duration-ms="527" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=service, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=Visitor, TestCaseName=GAPI-6264-Create OSP access request with all mandatory parameters, search_query=, serviceImpactedDescription=not yet, yardi_id=, deleteFlag=, customerReference=, action=, details=OSP Access Request Form, ExpectedStatusMessage=OK, visitorPhone=919876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=service, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=any thing, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=external, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreateOSPAccessRequest, TestCaseID=GAPI-6264, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [404] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [404] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.CreateFAOSPRequest.verifyCreateOSPAccessRequest(CreateFAOSPRequest.java:47)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateOSPAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@68f1b17f]" started-at="2023-05-19T18:13:08 IST" name="teardown" finished-at="2023-05-19T18:13:08 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateOSPAccessRequest status=FAILURE method=CreateFAOSPRequest.verifyCreateOSPAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@68f1b17f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateOSPAccessRequestForInvalidLegalentity(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@68f1b17f]" started-at="2023-05-19T18:13:08 IST" name="verifyCreateOSPAccessRequestForInvalidLegalentity" data-provider="testCasesData" finished-at="2023-05-19T18:13:08 IST" duration-ms="456" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=service, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Create OSP access request for Invalid Legal  Entity , search_query=, serviceImpactedDescription=not yet, yardi_id=, deleteFlag=, customerReference=, action=, details=OSP Access Request Form, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=service, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=any thing, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=external, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreateOSPAccessRequestForInvalidLegalentity, TestCaseID=Create OS, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateOSPAccessRequestForInvalidLegalentity -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@68f1b17f]" started-at="2023-05-19T18:13:08 IST" name="teardown" finished-at="2023-05-19T18:13:08 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateOSPAccessRequestForInvalidLegalentity status=SUCCESS method=CreateFAOSPRequest.verifyCreateOSPAccessRequestForInvalidLegalentity(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@68f1b17f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateOSPAccessRequestForInvalidToken(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@68f1b17f]" started-at="2023-05-19T18:13:08 IST" name="verifyCreateOSPAccessRequestForInvalidToken" data-provider="testCasesData" finished-at="2023-05-19T18:13:08 IST" duration-ms="420" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=service, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Create OSP access request with Invalid Token, search_query=, serviceImpactedDescription=not yet, yardi_id=, deleteFlag=, customerReference=, action=, details=OSP Access Request Form, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=service, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=any thing, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=external, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreateOSPAccessRequestForInvalidToken, TestCaseID=Create OS, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateOSPAccessRequestForInvalidToken -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@68f1b17f]" started-at="2023-05-19T18:13:08 IST" name="teardown" finished-at="2023-05-19T18:13:08 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateOSPAccessRequestForInvalidToken status=SUCCESS method=CreateFAOSPRequest.verifyCreateOSPAccessRequestForInvalidToken(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@68f1b17f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyRetrievalOfOSPAccessRequestUsingID(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@68f1b17f]" started-at="2023-05-19T18:13:08 IST" name="verifyRetrievalOfOSPAccessRequestUsingID" data-provider="testCasesData" finished-at="2023-05-19T18:13:09 IST" duration-ms="527" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=service, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-6276-Retrieval of OSP access ticket details using ID, search_query=, serviceImpactedDescription=not yet, yardi_id=, deleteFlag=, customerReference=, action=, details=OSP Access Request Form, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=service, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=any thing, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=external, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyRetrievalOfOSPAccessRequestUsingID, TestCaseID=GAPI-6276, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [404] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [404] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.CreateFAOSPRequest.verifyRetrievalOfOSPAccessRequestUsingID(CreateFAOSPRequest.java:93)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRetrievalOfOSPAccessRequestUsingID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@68f1b17f]" started-at="2023-05-19T18:13:09 IST" name="teardown" finished-at="2023-05-19T18:13:09 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyRetrievalOfOSPAccessRequestUsingID status=SKIP method=CreateFAOSPRequest.verifyRetrievalOfOSPAccessRequestUsingID(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@68f1b17f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyRetrievalOfOSPAccessRequestUsingID(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@68f1b17f]" started-at="2023-05-19T18:13:09 IST" name="verifyRetrievalOfOSPAccessRequestUsingID" data-provider="testCasesData" finished-at="2023-05-19T18:13:10 IST" duration-ms="541" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=service, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-6276-Retrieval of OSP access ticket details using ID, search_query=, serviceImpactedDescription=not yet, yardi_id=, deleteFlag=, customerReference=, action=, details=OSP Access Request Form, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=service, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=any thing, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=external, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyRetrievalOfOSPAccessRequestUsingID, TestCaseID=GAPI-6276, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [404] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [404] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.CreateFAOSPRequest.verifyRetrievalOfOSPAccessRequestUsingID(CreateFAOSPRequest.java:93)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRetrievalOfOSPAccessRequestUsingID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@68f1b17f]" started-at="2023-05-19T18:13:10 IST" name="teardown" finished-at="2023-05-19T18:13:10 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyRetrievalOfOSPAccessRequestUsingID status=FAILURE method=CreateFAOSPRequest.verifyRetrievalOfOSPAccessRequestUsingID(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@68f1b17f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyUploadAttachmentToOSPAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@68f1b17f]" started-at="2023-05-19T18:13:10 IST" name="verifyUploadAttachmentToOSPAccessRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:10 IST" duration-ms="541" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=service, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-6850-Create OSP request and upload attachment, search_query=, serviceImpactedDescription=not yet, yardi_id=, deleteFlag=, customerReference=, action=, details=OSP Access Request Form, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=service, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=any thing, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=external, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyUploadAttachmentToOSPAccessRequest, TestCaseID=GAPI-6850, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [404] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [404] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.CreateFAOSPRequest.verifyUploadAttachmentToOSPAccessRequest(CreateFAOSPRequest.java:299)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUploadAttachmentToOSPAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@68f1b17f]" started-at="2023-05-19T18:13:10 IST" name="teardown" finished-at="2023-05-19T18:13:10 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyUploadAttachmentToOSPAccessRequest status=SKIP method=CreateFAOSPRequest.verifyUploadAttachmentToOSPAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@68f1b17f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyUploadAttachmentToOSPAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@68f1b17f]" started-at="2023-05-19T18:13:10 IST" name="verifyUploadAttachmentToOSPAccessRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:11 IST" duration-ms="526" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=service, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-6850-Create OSP request and upload attachment, search_query=, serviceImpactedDescription=not yet, yardi_id=, deleteFlag=, customerReference=, action=, details=OSP Access Request Form, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=service, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=any thing, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=external, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyUploadAttachmentToOSPAccessRequest, TestCaseID=GAPI-6850, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [404] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [404] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.CreateFAOSPRequest.verifyUploadAttachmentToOSPAccessRequest(CreateFAOSPRequest.java:299)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUploadAttachmentToOSPAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@68f1b17f]" started-at="2023-05-19T18:13:11 IST" name="teardown" finished-at="2023-05-19T18:13:11 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyUploadAttachmentToOSPAccessRequest status=FAILURE method=CreateFAOSPRequest.verifyUploadAttachmentToOSPAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateFAOSPRequest@68f1b17f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.CreateFAOSPRequest -->
      <class name="com.gapi.testCases.GetCrossConnectDetails">
        <test-method signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:16:33 IST" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:16:43 IST" duration-ms="9409" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4504-4518-Retrieve the Cross Connect Details By Valid Billing Account Number, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, TestCaseID=GAPI-4504, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:16:43 IST" name="teardown" finished-at="2023-05-19T18:16:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=SUCCESS method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:16:43 IST" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:16:50 IST" duration-ms="7247" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4508-Retrieve Cross Connet Requests by Iinterconnection Panel, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, TestCaseID=GAPI-4508, errorMessageType=, standardVisitorBadgeStr=, filters=?interconnectionPanel=005.01.600.76, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:16:50 IST" name="teardown" finished-at="2023-05-19T18:16:50 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=SUCCESS method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:16:50 IST" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:16:53 IST" duration-ms="3527" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4505-Retrieve Cross Connect Requests by Interconnection Port Status  -Available, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, TestCaseID=GAPI-4505, errorMessageType=, standardVisitorBadgeStr=, filters=?interconnectionPortStatus=Available, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:16:53 IST" name="teardown" finished-at="2023-05-19T18:16:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=SUCCESS method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:16:53 IST" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:17:01 IST" duration-ms="7230" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4506-Retrieve Cross Connet Requests by Interconnection PortStatus -In-Service, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, TestCaseID=GAPI-4506, errorMessageType=, standardVisitorBadgeStr=, filters=?interconnectionPortStatus=In-Service, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:01 IST" name="teardown" finished-at="2023-05-19T18:17:01 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=SUCCESS method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:01 IST" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:17:03 IST" duration-ms="2495" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4507-Retrieve Cross Connect Requests by Interconnection Port Status  -Pre-Wired, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, TestCaseID=GAPI-4507, errorMessageType=, standardVisitorBadgeStr=, filters=?interconnectionPortStatus=Pre-Wired, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:03 IST" name="teardown" finished-at="2023-05-19T18:17:03 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=SUCCESS method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:03 IST" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:17:10 IST" duration-ms="6945" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4509-Retrieve all Cross-Connect Request - filter - Limit(Min 25 to Max 1000), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, TestCaseID=GAPI-4509, errorMessageType=, standardVisitorBadgeStr=, filters=?limit=26, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:10 IST" name="teardown" finished-at="2023-05-19T18:17:10 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=SUCCESS method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:10 IST" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:17:10 IST" duration-ms="420" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4529-Retrieve the Cross Connect details by exceeds the Max Limit value(Max limit=1000), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, TestCaseID=GAPI-4529, errorMessageType=Query parameter 'limit' must be a integer and value has to be between '1' and '1000'., standardVisitorBadgeStr=, filters=?limit=3000, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:10 IST" name="teardown" finished-at="2023-05-19T18:17:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=SUCCESS method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:10 IST" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:17:13 IST" duration-ms="2740" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4510-CC- Retrieve Cross-Connect Requests by Offset, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, TestCaseID=GAPI-4510, errorMessageType=, standardVisitorBadgeStr=, filters=?offset=1, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:13 IST" name="teardown" finished-at="2023-05-19T18:17:13 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=SUCCESS method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:13 IST" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:17:20 IST" duration-ms="6604" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4663-Retreive the cross connect details by NOT providing the offset&Limit values, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, TestCaseID=GAPI-4663, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:20 IST" name="teardown" finished-at="2023-05-19T18:17:20 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=SUCCESS method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:20 IST" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:17:22 IST" duration-ms="2613" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4664-Retrieve the cross connect details by  providing the Limit values and Not specifying the offset value, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, TestCaseID=GAPI-4664, errorMessageType=, standardVisitorBadgeStr=, filters=?limit=10, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:22 IST" name="teardown" finished-at="2023-05-19T18:17:22 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=SUCCESS method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:22 IST" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:17:25 IST" duration-ms="2875" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4669-Retrive the Cross connect data by providing Same Limit & Offset values, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, TestCaseID=GAPI-4669, errorMessageType=, standardVisitorBadgeStr=, filters=?offset=8, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:25 IST" name="teardown" finished-at="2023-05-19T18:17:25 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=SUCCESS method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:25 IST" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:17:28 IST" duration-ms="2678" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4673-Retreive the cross connect details by providing the offset value greater than all available records, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, TestCaseID=GAPI-4673, errorMessageType=, standardVisitorBadgeStr=, filters=?offset=300, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(GetCrossConnectDetails.java:128)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:28 IST" name="teardown" finished-at="2023-05-19T18:17:28 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=SKIP method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:28 IST" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:17:31 IST" duration-ms="3500" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4673-Retreive the cross connect details by providing the offset value greater than all available records, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, TestCaseID=GAPI-4673, errorMessageType=, standardVisitorBadgeStr=, filters=?offset=300, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(GetCrossConnectDetails.java:128)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:31 IST" name="teardown" finished-at="2023-05-19T18:17:31 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=FAILURE method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:31 IST" name="verifyCrossConnectDetailsUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:17:38 IST" duration-ms="6396" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4516-Retrieve the Cross Connect Details by valid Limit & Offset values, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCrossConnectDetailsUsingDifferentFilters, TestCaseID=GAPI-4516, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCrossConnectDetailsUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:38 IST" name="teardown" finished-at="2023-05-19T18:17:38 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCrossConnectDetailsUsingDifferentFilters status=SUCCESS method=GetCrossConnectDetails.verifyCrossConnectDetailsUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetCrossConnectDetailsByInValidId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:38 IST" name="verifyGetCrossConnectDetailsByInValidId" data-provider="testCasesData" finished-at="2023-05-19T18:17:41 IST" duration-ms="2890" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4532-Retrieve Cross Connect Inventory by Invalid ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Internal Server Error, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=500, ci=, readFlag=, errorMessage=Oops. Something went wrong. The server encountered an internal error or misconfiguration and was unable to complete your request., methodName=verifyGetCrossConnectDetailsByInValidId, TestCaseID=GAPI-4532, errorMessageType=server, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["error"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["error"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONObject(JSONObject.java:732)
at com.gapi.utilities.TestUtilities.verifyErrorResponseMessage(TestUtilities.java:681)
at com.gapi.testCases.GetCrossConnectDetails.verifyGetCrossConnectDetailsByInValidId(GetCrossConnectDetails.java:198)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsByInValidId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:41 IST" name="teardown" finished-at="2023-05-19T18:17:41 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsByInValidId status=SKIP method=GetCrossConnectDetails.verifyGetCrossConnectDetailsByInValidId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetCrossConnectDetailsByInValidId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:41 IST" name="verifyGetCrossConnectDetailsByInValidId" data-provider="testCasesData" finished-at="2023-05-19T18:17:43 IST" duration-ms="1928" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4532-Retrieve Cross Connect Inventory by Invalid ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Internal Server Error, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=500, ci=, readFlag=, errorMessage=Oops. Something went wrong. The server encountered an internal error or misconfiguration and was unable to complete your request., methodName=verifyGetCrossConnectDetailsByInValidId, TestCaseID=GAPI-4532, errorMessageType=server, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["error"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["error"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONObject(JSONObject.java:732)
at com.gapi.utilities.TestUtilities.verifyErrorResponseMessage(TestUtilities.java:681)
at com.gapi.testCases.GetCrossConnectDetails.verifyGetCrossConnectDetailsByInValidId(GetCrossConnectDetails.java:198)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsByInValidId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:43 IST" name="teardown" finished-at="2023-05-19T18:17:43 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsByInValidId status=FAILURE method=GetCrossConnectDetails.verifyGetCrossConnectDetailsByInValidId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetCrossConnectDetailsByInvalidBearerToken(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:43 IST" name="verifyGetCrossConnectDetailsByInvalidBearerToken" data-provider="testCasesData" finished-at="2023-05-19T18:17:43 IST" duration-ms="2" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4533-GAPI-4524-Retrieve the  Cross connect details by Invalid Bearer Token, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsByInvalidBearerToken, TestCaseID=GAPI-4533, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Request URI cannot end with ?]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Request URI cannot end with ?
at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:67)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:483)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:72)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrapNoCoerce.callConstructor(ConstructorSite.java:105)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:59)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:263)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)
at io.restassured.internal.RequestSpecificationImpl.newFilterContext(RequestSpecificationImpl.groovy:1061)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1684)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1692)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.get(RequestSpecificationImpl.groovy:176)
at io.restassured.internal.RequestSpecificationImpl.get(RequestSpecificationImpl.groovy)
at com.gapi.utilities.TestUtilities.getRequest(TestUtilities.java:987)
at com.gapi.testCases.GetCrossConnectDetails.verifyGetCrossConnectDetailsByInvalidBearerToken(GetCrossConnectDetails.java:282)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsByInvalidBearerToken -->
        <test-method signature="verifyGetCrossConnectDetailsByInvalidBearerToken(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:43 IST" name="verifyGetCrossConnectDetailsByInvalidBearerToken" data-provider="testCasesData" finished-at="2023-05-19T18:17:43 IST" duration-ms="1" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4533-GAPI-4524-Retrieve the  Cross connect details by Invalid Bearer Token, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsByInvalidBearerToken, TestCaseID=GAPI-4533, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Request URI cannot end with ?]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Request URI cannot end with ?
at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:67)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:483)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:72)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrapNoCoerce.callConstructor(ConstructorSite.java:105)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)
at io.restassured.internal.RequestSpecificationImpl.newFilterContext(RequestSpecificationImpl.groovy:1061)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1684)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1692)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.get(RequestSpecificationImpl.groovy:176)
at io.restassured.internal.RequestSpecificationImpl.get(RequestSpecificationImpl.groovy)
at com.gapi.utilities.TestUtilities.getRequest(TestUtilities.java:987)
at com.gapi.testCases.GetCrossConnectDetails.verifyGetCrossConnectDetailsByInvalidBearerToken(GetCrossConnectDetails.java:282)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsByInvalidBearerToken -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:43 IST" name="teardown" finished-at="2023-05-19T18:17:43 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsByInvalidBearerToken status=SKIP method=GetCrossConnectDetails.verifyGetCrossConnectDetailsByInvalidBearerToken(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:43 IST" name="teardown" finished-at="2023-05-19T18:17:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsByInvalidBearerToken status=FAILURE method=GetCrossConnectDetails.verifyGetCrossConnectDetailsByInvalidBearerToken(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetCrossConnectDetailsByInvalidBillingAccountNumber(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:43 IST" name="verifyGetCrossConnectDetailsByInvalidBillingAccountNumber" data-provider="testCasesData" finished-at="2023-05-19T18:17:43 IST" duration-ms="192" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4511-Retrieve Cross Connect Requests by Invalid Blling Accounnt Number, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsByInvalidBillingAccountNumber, TestCaseID=GAPI-4511, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=1234, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.GetCrossConnectDetails.verifyGetCrossConnectDetailsByInvalidBillingAccountNumber(GetCrossConnectDetails.java:218)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsByInvalidBillingAccountNumber -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:43 IST" name="teardown" finished-at="2023-05-19T18:17:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsByInvalidBillingAccountNumber status=SKIP method=GetCrossConnectDetails.verifyGetCrossConnectDetailsByInvalidBillingAccountNumber(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetCrossConnectDetailsByInvalidBillingAccountNumber(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:43 IST" name="verifyGetCrossConnectDetailsByInvalidBillingAccountNumber" data-provider="testCasesData" finished-at="2023-05-19T18:17:43 IST" duration-ms="196" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4511-Retrieve Cross Connect Requests by Invalid Blling Accounnt Number, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsByInvalidBillingAccountNumber, TestCaseID=GAPI-4511, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=1234, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.GetCrossConnectDetails.verifyGetCrossConnectDetailsByInvalidBillingAccountNumber(GetCrossConnectDetails.java:218)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsByInvalidBillingAccountNumber -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:43 IST" name="teardown" finished-at="2023-05-19T18:17:43 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsByInvalidBillingAccountNumber status=FAILURE method=GetCrossConnectDetails.verifyGetCrossConnectDetailsByInvalidBillingAccountNumber(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetCrossConnectDetailsByInvalidInterconnectionPortStatus(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:43 IST" name="verifyGetCrossConnectDetailsByInvalidInterconnectionPortStatus" data-provider="testCasesData" finished-at="2023-05-19T18:17:43 IST" duration-ms="272" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4512-Retrieve Cross Connet Requests by In-valid  Interconnection PortStatus, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsByInvalidInterconnectionPortStatus, TestCaseID=GAPI-4512, errorMessageType=, standardVisitorBadgeStr=, filters=interconnectionPortStatus=abc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsByInvalidInterconnectionPortStatus -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:43 IST" name="teardown" finished-at="2023-05-19T18:17:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsByInvalidInterconnectionPortStatus status=SUCCESS method=GetCrossConnectDetails.verifyGetCrossConnectDetailsByInvalidInterconnectionPortStatus(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetCrossConnectDetailsByInvalidLimitValue(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:43 IST" name="verifyGetCrossConnectDetailsByInvalidLimitValue" data-provider="testCasesData" finished-at="2023-05-19T18:17:44 IST" duration-ms="268" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4528-Retrieve the Cross  connect details by Invalid Limit value(limit=0), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsByInvalidLimitValue, TestCaseID=GAPI-4528, errorMessageType=, standardVisitorBadgeStr=, filters=limit=0, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Query parameter 'limit' value has to be between '1' and '1000'.] but found [Query parameter 'limit' must be a integer and value has to be between '1' and '1000'.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Query parameter 'limit' value has to be between '1' and '1000'.] but found [Query parameter 'limit' must be a integer and value has to be between '1' and '1000'.]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.utilities.TestUtilities.verifyErrorResponseMessage(TestUtilities.java:687)
at com.gapi.testCases.GetCrossConnectDetails.verifyGetCrossConnectDetailsByInvalidLimitValue(GetCrossConnectDetails.java:312)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsByInvalidLimitValue -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:44 IST" name="teardown" finished-at="2023-05-19T18:17:44 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsByInvalidLimitValue status=SKIP method=GetCrossConnectDetails.verifyGetCrossConnectDetailsByInvalidLimitValue(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetCrossConnectDetailsByInvalidLimitValue(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:44 IST" name="verifyGetCrossConnectDetailsByInvalidLimitValue" data-provider="testCasesData" finished-at="2023-05-19T18:17:44 IST" duration-ms="258" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4528-Retrieve the Cross  connect details by Invalid Limit value(limit=0), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsByInvalidLimitValue, TestCaseID=GAPI-4528, errorMessageType=, standardVisitorBadgeStr=, filters=limit=0, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Query parameter 'limit' value has to be between '1' and '1000'.] but found [Query parameter 'limit' must be a integer and value has to be between '1' and '1000'.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Query parameter 'limit' value has to be between '1' and '1000'.] but found [Query parameter 'limit' must be a integer and value has to be between '1' and '1000'.]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.utilities.TestUtilities.verifyErrorResponseMessage(TestUtilities.java:687)
at com.gapi.testCases.GetCrossConnectDetails.verifyGetCrossConnectDetailsByInvalidLimitValue(GetCrossConnectDetails.java:312)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsByInvalidLimitValue -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:44 IST" name="teardown" finished-at="2023-05-19T18:17:44 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsByInvalidLimitValue status=FAILURE method=GetCrossConnectDetails.verifyGetCrossConnectDetailsByInvalidLimitValue(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetCrossConnectDetailsByValidId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:44 IST" name="verifyGetCrossConnectDetailsByValidId" data-provider="testCasesData" finished-at="2023-05-19T18:17:45 IST" duration-ms="1003" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4531-Retrieve Cross Connect Inventory Details by ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsByValidId, TestCaseID=GAPI-4531, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsByValidId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:45 IST" name="teardown" finished-at="2023-05-19T18:17:45 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsByValidId status=SUCCESS method=GetCrossConnectDetails.verifyGetCrossConnectDetailsByValidId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetCrossConnectDetailsByValidInterconnectionPortStatusAndInvalidInterConnectPanel(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:45 IST" name="verifyGetCrossConnectDetailsByValidInterconnectionPortStatusAndInvalidInterConnectPanel" data-provider="testCasesData" finished-at="2023-05-19T18:17:47 IST" duration-ms="2341" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4514-GAPI-4515-Retrieve the Cross Connect Details by valid Inter connection Port Status & Invalid inter connect Panel, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsByValidInterconnectionPortStatusAndInvalidInterConnectPanel, TestCaseID=GAPI-4514, errorMessageType=, standardVisitorBadgeStr=, filters=interconnectionPanel=002.04.10&interconnectionPortStatus=In-Service, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsByValidInterconnectionPortStatusAndInvalidInterConnectPanel -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:47 IST" name="teardown" finished-at="2023-05-19T18:17:47 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsByValidInterconnectionPortStatusAndInvalidInterConnectPanel status=SUCCESS method=GetCrossConnectDetails.verifyGetCrossConnectDetailsByValidInterconnectionPortStatusAndInvalidInterConnectPanel(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetCrossConnectDetailsWithNegativeLimitValues(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:47 IST" name="verifyGetCrossConnectDetailsWithNegativeLimitValues" data-provider="testCasesData" finished-at="2023-05-19T18:17:47 IST" duration-ms="208" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4665-Retreive the cross connect details by  providing the NEGATIVE Limit values, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsWithNegativeLimitValues, TestCaseID=GAPI-4665, errorMessageType=, standardVisitorBadgeStr=, filters=limit=-1000, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNegativeLimitValues(GetCrossConnectDetails.java:401)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsWithNegativeLimitValues -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:47 IST" name="teardown" finished-at="2023-05-19T18:17:47 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsWithNegativeLimitValues status=SKIP method=GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNegativeLimitValues(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetCrossConnectDetailsWithNegativeLimitValues(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:47 IST" name="verifyGetCrossConnectDetailsWithNegativeLimitValues" data-provider="testCasesData" finished-at="2023-05-19T18:17:48 IST" duration-ms="193" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4665-Retreive the cross connect details by  providing the NEGATIVE Limit values, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsWithNegativeLimitValues, TestCaseID=GAPI-4665, errorMessageType=, standardVisitorBadgeStr=, filters=limit=-1000, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNegativeLimitValues(GetCrossConnectDetails.java:401)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsWithNegativeLimitValues -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:48 IST" name="teardown" finished-at="2023-05-19T18:17:48 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsWithNegativeLimitValues status=FAILURE method=GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNegativeLimitValues(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetCrossConnectDetailsWithNegativeOffset(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:48 IST" name="verifyGetCrossConnectDetailsWithNegativeOffset" data-provider="testCasesData" finished-at="2023-05-19T18:17:48 IST" duration-ms="203" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4530-GAPI-4668-Retreive the cross connect details by  providing the NEGATIVE Offset values, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsWithNegativeOffset, TestCaseID=GAPI-4530, errorMessageType=, standardVisitorBadgeStr=, filters=offset=-1000, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNegativeOffset(GetCrossConnectDetails.java:334)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsWithNegativeOffset -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:48 IST" name="teardown" finished-at="2023-05-19T18:17:48 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsWithNegativeOffset status=SKIP method=GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNegativeOffset(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetCrossConnectDetailsWithNegativeOffset(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:48 IST" name="verifyGetCrossConnectDetailsWithNegativeOffset" data-provider="testCasesData" finished-at="2023-05-19T18:17:48 IST" duration-ms="196" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4530-GAPI-4668-Retreive the cross connect details by  providing the NEGATIVE Offset values, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsWithNegativeOffset, TestCaseID=GAPI-4530, errorMessageType=, standardVisitorBadgeStr=, filters=offset=-1000, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNegativeOffset(GetCrossConnectDetails.java:334)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsWithNegativeOffset -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:48 IST" name="teardown" finished-at="2023-05-19T18:17:48 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsWithNegativeOffset status=FAILURE method=GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNegativeOffset(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetCrossConnectDetailsWithNonIntegerLimitValues(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:48 IST" name="verifyGetCrossConnectDetailsWithNonIntegerLimitValues" data-provider="testCasesData" finished-at="2023-05-19T18:17:48 IST" duration-ms="202" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4666-Retreive the cross connect details by  providing the Non-Interger Limit values, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsWithNonIntegerLimitValues, TestCaseID=GAPI-4666, errorMessageType=, standardVisitorBadgeStr=, filters=limit=abc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNonIntegerLimitValues(GetCrossConnectDetails.java:379)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsWithNonIntegerLimitValues -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:48 IST" name="teardown" finished-at="2023-05-19T18:17:48 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsWithNonIntegerLimitValues status=SKIP method=GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNonIntegerLimitValues(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetCrossConnectDetailsWithNonIntegerLimitValues(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:48 IST" name="verifyGetCrossConnectDetailsWithNonIntegerLimitValues" data-provider="testCasesData" finished-at="2023-05-19T18:17:48 IST" duration-ms="191" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4666-Retreive the cross connect details by  providing the Non-Interger Limit values, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsWithNonIntegerLimitValues, TestCaseID=GAPI-4666, errorMessageType=, standardVisitorBadgeStr=, filters=limit=abc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNonIntegerLimitValues(GetCrossConnectDetails.java:379)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsWithNonIntegerLimitValues -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:48 IST" name="teardown" finished-at="2023-05-19T18:17:48 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsWithNonIntegerLimitValues status=FAILURE method=GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNonIntegerLimitValues(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetCrossConnectDetailsWithNonIntergerOffset(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:48 IST" name="verifyGetCrossConnectDetailsWithNonIntergerOffset" data-provider="testCasesData" finished-at="2023-05-19T18:17:49 IST" duration-ms="190" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4667-Retreive the cross connect details by  providing the Non-Interger Offset values, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsWithNonIntergerOffset, TestCaseID=GAPI-4667, errorMessageType=, standardVisitorBadgeStr=, filters=offset=abc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNonIntergerOffset(GetCrossConnectDetails.java:357)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsWithNonIntergerOffset -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:49 IST" name="teardown" finished-at="2023-05-19T18:17:49 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsWithNonIntergerOffset status=SKIP method=GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNonIntergerOffset(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetCrossConnectDetailsWithNonIntergerOffset(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:49 IST" name="verifyGetCrossConnectDetailsWithNonIntergerOffset" data-provider="testCasesData" finished-at="2023-05-19T18:17:49 IST" duration-ms="196" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4667-Retreive the cross connect details by  providing the Non-Interger Offset values, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyGetCrossConnectDetailsWithNonIntergerOffset, TestCaseID=GAPI-4667, errorMessageType=, standardVisitorBadgeStr=, filters=offset=abc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNonIntergerOffset(GetCrossConnectDetails.java:357)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsWithNonIntergerOffset -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:49 IST" name="teardown" finished-at="2023-05-19T18:17:49 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsWithNonIntergerOffset status=FAILURE method=GetCrossConnectDetails.verifyGetCrossConnectDetailsWithNonIntergerOffset(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetCrossConnectDetailsusingIDByInvalidBearerToken(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:49 IST" name="verifyGetCrossConnectDetailsusingIDByInvalidBearerToken" data-provider="testCasesData" finished-at="2023-05-19T18:17:49 IST" duration-ms="213" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve Cross Connect Inventory details by Invalid ID using In-Valid Bearer Token, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Unauthorized, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=401, ci=, readFlag=, errorMessage=Unauthorized. Access token is missing or invalid., methodName=verifyGetCrossConnectDetailsusingIDByInvalidBearerToken, TestCaseID=Retrieve, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCrossConnectDetailsusingIDByInvalidBearerToken -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7]" started-at="2023-05-19T18:17:49 IST" name="teardown" finished-at="2023-05-19T18:17:49 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCrossConnectDetailsusingIDByInvalidBearerToken status=SUCCESS method=GetCrossConnectDetails.verifyGetCrossConnectDetailsusingIDByInvalidBearerToken(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCrossConnectDetails@2a225dd7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetCrossConnectDetails -->
      <class name="com.gapi.testCases.AddCommentToTheShipmentsTicket">
        <test-method signature="AddUsercommentsShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddCommentToTheShipmentsTicket@616ac46a]" started-at="2023-05-19T18:17:54 IST" name="AddUsercommentsShipmentsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:17:56 IST" duration-ms="2098" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4060-CS- Add Comment to Existing S&R Ticket where comment size greater than 4000 charecters, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DTDCTEST, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=AddUsercommentsShipmentsTicket, TestCaseID=GAPI-4060, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddUsercommentsShipmentsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddCommentToTheShipmentsTicket@616ac46a]" started-at="2023-05-19T18:17:56 IST" name="teardown" finished-at="2023-05-19T18:17:56 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AddUsercommentsShipmentsTicket status=SUCCESS method=AddCommentToTheShipmentsTicket.AddUsercommentsShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddCommentToTheShipmentsTicket@616ac46a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyAddingsizeMaxSHTicketForWithmandatoryfieldsRequired(java.util.Map)[pri:0, instance:com.gapi.testCases.AddCommentToTheShipmentsTicket@616ac46a]" started-at="2023-05-19T18:17:56 IST" name="verifyAddingsizeMaxSHTicketForWithmandatoryfieldsRequired" data-provider="testCasesData" finished-at="2023-05-19T18:17:57 IST" duration-ms="146" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4059-SR- Add Comment to Existing S&R Ticket where comment size max 4000 characters, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=WO8685565, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments= RH Create User Comment in UAT  RH Create User Comment in UAT  RH Create User Comment in UAT  RH Create User Comment in UAT  RH Create User Comment in UAT  RH Create User Comment in UAT  RH Create User Comment in UAT  RH Create User Comment in UAT  RH Create User Comment in UAT  RH Create User Comment in UAT  RH Create User Comment in UAT  RH Create User Comment in UAT  RH Create User Comment in UAT  RH Create User Comment in UAT, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyAddingsizeMaxSHTicketForWithmandatoryfieldsRequired, TestCaseID=GAPI-4059, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddingsizeMaxSHTicketForWithmandatoryfieldsRequired -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddCommentToTheShipmentsTicket@616ac46a]" started-at="2023-05-19T18:17:57 IST" name="teardown" finished-at="2023-05-19T18:17:57 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAddingsizeMaxSHTicketForWithmandatoryfieldsRequired status=SUCCESS method=AddCommentToTheShipmentsTicket.verifyAddingsizeMaxSHTicketForWithmandatoryfieldsRequired(java.util.Map)[pri:0, instance:com.gapi.testCases.AddCommentToTheShipmentsTicket@616ac46a] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.AddCommentToTheShipmentsTicket -->
      <class name="com.gapi.testCases.CreateAllFourInOne">
        <test-method signature="CreatePermissionGroup(java.util.Map)[pri:1, instance:com.gapi.testCases.CreateAllFourInOne@5c669da8]" started-at="2023-05-19T18:18:34 IST" name="CreatePermissionGroup" data-provider="testCasesData" finished-at="2023-05-19T18:18:37 IST" duration-ms="2348" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5571-Validate if we are able to create Permission Group, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=automationPermissionGroupName, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=CreatePermissionGroup, TestCaseID=GAPI-5571, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreatePermissionGroup -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateAllFourInOne@5c669da8]" started-at="2023-05-19T18:18:37 IST" name="teardown" finished-at="2023-05-19T18:18:37 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreatePermissionGroup status=SUCCESS method=CreateAllFourInOne.CreatePermissionGroup(java.util.Map)[pri:1, instance:com.gapi.testCases.CreateAllFourInOne@5c669da8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="CreatePermissions(java.util.Map)[pri:2, instance:com.gapi.testCases.CreateAllFourInOne@5c669da8]" started-at="2023-05-19T18:18:37 IST" name="CreatePermissions" data-provider="testCasesData" finished-at="2023-05-19T18:18:39 IST" duration-ms="2431" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5557-Validate if we are able to create Permissions, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=automationPermissionAction, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=dummyPG, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=automationPermissionName, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=CreatePermissions, TestCaseID=GAPI-5557, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreatePermissions -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateAllFourInOne@5c669da8]" started-at="2023-05-19T18:18:39 IST" name="teardown" finished-at="2023-05-19T18:18:39 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreatePermissions status=SUCCESS method=CreateAllFourInOne.CreatePermissions(java.util.Map)[pri:2, instance:com.gapi.testCases.CreateAllFourInOne@5c669da8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="CreateRoles(java.util.Map)[pri:3, instance:com.gapi.testCases.CreateAllFourInOne@5c669da8]" started-at="2023-05-19T18:18:39 IST" name="CreateRoles" data-provider="testCasesData" finished-at="2023-05-19T18:18:40 IST" duration-ms="506" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=automationPermissionForRoles, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5766-Validate if we are able to create Roles, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=automationRoleName, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=10000, lastName=, code=C, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=automationPermissionGroupForRoles, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=CreateRoles, TestCaseID=GAPI-5766, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=automationPermissionGroupForRoles, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateRoles -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateAllFourInOne@5c669da8]" started-at="2023-05-19T18:18:40 IST" name="teardown" finished-at="2023-05-19T18:18:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateRoles status=SUCCESS method=CreateAllFourInOne.CreateRoles(java.util.Map)[pri:3, instance:com.gapi.testCases.CreateAllFourInOne@5c669da8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.CreateAllFourInOne -->
      <class name="com.gapi.testCases.CreateNewUser">
        <test-method retried="true" signature="verifyCreateNewUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateNewUser@59d4cd39]" started-at="2023-05-19T18:11:06 IST" name="verifyCreateNewUser" data-provider="testCasesData" finished-at="2023-05-19T18:11:06 IST" duration-ms="450" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5733-GAPI-5749-GAPI-5737-verify user should be able to create a New user with mandatory parameters using post request, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=testfirstName, phone=+31 1212121212, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=testLastName, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=testEmail, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=Request is invalid., methodName=verifyCreateNewUser, TestCaseID=GAPI-5733, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [201] but found [400]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [201] but found [400]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CreateNewUser.verifyCreateNewUser(CreateNewUser.java:66)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateNewUser -->
        <test-method signature="verifyCreateNewUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateNewUser@59d4cd39]" started-at="2023-05-19T18:11:06 IST" name="verifyCreateNewUser" data-provider="testCasesData" finished-at="2023-05-19T18:11:07 IST" duration-ms="414" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5733-GAPI-5749-GAPI-5737-verify user should be able to create a New user with mandatory parameters using post request, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=testfirstName, phone=+31 1212121212, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=testLastName, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=testEmail, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=Request is invalid., methodName=verifyCreateNewUser, TestCaseID=GAPI-5733, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [201] but found [400]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [201] but found [400]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CreateNewUser.verifyCreateNewUser(CreateNewUser.java:66)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateNewUser -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateNewUser@59d4cd39]" started-at="2023-05-19T18:11:06 IST" name="teardown" finished-at="2023-05-19T18:11:06 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateNewUser status=SKIP method=CreateNewUser.verifyCreateNewUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateNewUser@59d4cd39] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateNewUser@59d4cd39]" started-at="2023-05-19T18:11:07 IST" name="teardown" finished-at="2023-05-19T18:11:07 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateNewUser status=FAILURE method=CreateNewUser.verifyCreateNewUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateNewUser@59d4cd39] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyCreateNewUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateNewUser@59d4cd39]" started-at="2023-05-19T18:11:07 IST" name="verifyCreateNewUser" data-provider="testCasesData" finished-at="2023-05-19T18:11:07 IST" duration-ms="388" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5735-verify user should be able to create a New user with optional parameters as Position using post request, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=testfirstName, phone=+31 1212121212, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=Director of Marketing, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=testLastName, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=testEmail, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateNewUser, TestCaseID=GAPI-5735, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [201] but found [400]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [201] but found [400]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CreateNewUser.verifyCreateNewUser(CreateNewUser.java:66)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateNewUser -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateNewUser@59d4cd39]" started-at="2023-05-19T18:11:07 IST" name="teardown" finished-at="2023-05-19T18:11:07 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateNewUser status=SKIP method=CreateNewUser.verifyCreateNewUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateNewUser@59d4cd39] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateNewUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateNewUser@59d4cd39]" started-at="2023-05-19T18:11:07 IST" name="verifyCreateNewUser" data-provider="testCasesData" finished-at="2023-05-19T18:11:07 IST" duration-ms="421" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5735-verify user should be able to create a New user with optional parameters as Position using post request, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=testfirstName, phone=+31 1212121212, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=Director of Marketing, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=testLastName, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=testEmail, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateNewUser, TestCaseID=GAPI-5735, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [201] but found [400]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [201] but found [400]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CreateNewUser.verifyCreateNewUser(CreateNewUser.java:66)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateNewUser -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateNewUser@59d4cd39]" started-at="2023-05-19T18:11:07 IST" name="teardown" finished-at="2023-05-19T18:11:07 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateNewUser status=FAILURE method=CreateNewUser.verifyCreateNewUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateNewUser@59d4cd39] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateNewUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateNewUser@59d4cd39]" started-at="2023-05-19T18:11:07 IST" name="verifyCreateNewUser" data-provider="testCasesData" finished-at="2023-05-19T18:11:08 IST" duration-ms="376" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5738-verify API user should NOT be able to create a New user without mandatory parameter - first name using post request, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Doe, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=jdoe@digitalrealy.com, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=MISSING_FIRST_NAME, methodName=verifyCreateNewUser, TestCaseID=GAPI-5738, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateNewUser -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateNewUser@59d4cd39]" started-at="2023-05-19T18:11:08 IST" name="teardown" finished-at="2023-05-19T18:11:08 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateNewUser status=SUCCESS method=CreateNewUser.verifyCreateNewUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateNewUser@59d4cd39] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyCreateNewUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateNewUser@59d4cd39]" started-at="2023-05-19T18:11:08 IST" name="verifyCreateNewUser" data-provider="testCasesData" finished-at="2023-05-19T18:11:08 IST" duration-ms="429" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Validate if we are able to create new user using both mandatory & optional parameters, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=testfirstName, phone=+31 1212121212, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=Director of Marketing, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=testLastName, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=testEmail, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateNewUser, TestCaseID=Validate, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [201] but found [400]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [201] but found [400]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CreateNewUser.verifyCreateNewUser(CreateNewUser.java:66)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateNewUser -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateNewUser@59d4cd39]" started-at="2023-05-19T18:11:08 IST" name="teardown" finished-at="2023-05-19T18:11:08 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateNewUser status=SKIP method=CreateNewUser.verifyCreateNewUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateNewUser@59d4cd39] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateNewUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateNewUser@59d4cd39]" started-at="2023-05-19T18:11:08 IST" name="verifyCreateNewUser" data-provider="testCasesData" finished-at="2023-05-19T18:11:09 IST" duration-ms="389" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Validate if we are able to create new user using both mandatory & optional parameters, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=testfirstName, phone=+31 1212121212, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=Director of Marketing, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=testLastName, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=testEmail, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateNewUser, TestCaseID=Validate, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [201] but found [400]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [201] but found [400]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CreateNewUser.verifyCreateNewUser(CreateNewUser.java:66)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateNewUser -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateNewUser@59d4cd39]" started-at="2023-05-19T18:11:09 IST" name="teardown" finished-at="2023-05-19T18:11:09 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateNewUser status=FAILURE method=CreateNewUser.verifyCreateNewUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateNewUser@59d4cd39] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyCreateNewUserDetails(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateNewUser@59d4cd39]" started-at="2023-05-19T18:11:09 IST" name="verifyCreateNewUserDetails" data-provider="testCasesData" finished-at="2023-05-19T18:11:09 IST" duration-ms="421" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-8920-U - Verify weather the user details like first name, Last name & Mobile numbers coming after User Role & account Association, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=91aa7e54132e7600a501b7a66144b036, billingAccountNumber=, assetId1=2ca74e8713123600a501b7a66144b0f4, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=testfirstName, phone=+31 1212121212, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=testLastName, code=, role=006e3896-38bd-454c-ba8f-e0d193cc9f5a, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=testEmail, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateNewUserDetails, TestCaseID=GAPI-8920, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=region=North America, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [201] but found [400]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [201] but found [400]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CreateNewUser.verifyCreateNewUserDetails(CreateNewUser.java:152)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateNewUserDetails -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateNewUser@59d4cd39]" started-at="2023-05-19T18:11:09 IST" name="teardown" finished-at="2023-05-19T18:11:09 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateNewUserDetails status=SKIP method=CreateNewUser.verifyCreateNewUserDetails(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateNewUser@59d4cd39] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateNewUserDetails(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateNewUser@59d4cd39]" started-at="2023-05-19T18:11:09 IST" name="verifyCreateNewUserDetails" data-provider="testCasesData" finished-at="2023-05-19T18:11:10 IST" duration-ms="443" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-8920-U - Verify weather the user details like first name, Last name & Mobile numbers coming after User Role & account Association, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=91aa7e54132e7600a501b7a66144b036, billingAccountNumber=, assetId1=2ca74e8713123600a501b7a66144b0f4, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=testfirstName, phone=+31 1212121212, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=testLastName, code=, role=006e3896-38bd-454c-ba8f-e0d193cc9f5a, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=testEmail, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateNewUserDetails, TestCaseID=GAPI-8920, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=region=North America, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [201] but found [400]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [201] but found [400]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CreateNewUser.verifyCreateNewUserDetails(CreateNewUser.java:152)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateNewUserDetails -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateNewUser@59d4cd39]" started-at="2023-05-19T18:11:10 IST" name="teardown" finished-at="2023-05-19T18:11:10 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateNewUserDetails status=FAILURE method=CreateNewUser.verifyCreateNewUserDetails(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateNewUser@59d4cd39] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.CreateNewUser -->
      <class name="com.gapi.testCases.GetMarkets">
        <test-method signature="getMarketsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetMarkets@45ac5f9b]" started-at="2023-05-19T18:11:28 IST" name="getMarketsInformation" data-provider="testCasesData" finished-at="2023-05-19T18:11:29 IST" duration-ms="588" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName= Validate if the Response has Markets field in addition to the 200 code, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getMarketsInformation, TestCaseID= Validate, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWaQAM&sitecodes=LAX010, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getMarketsInformation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetMarkets@45ac5f9b]" started-at="2023-05-19T18:11:29 IST" name="teardown" finished-at="2023-05-19T18:11:29 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getMarketsInformation status=SUCCESS method=GetMarkets.getMarketsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetMarkets@45ac5f9b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetMarkets -->
      <class name="com.gapi.testCases.ModifyFAPermanentBadge">
        <test-method retried="true" signature="verifyAttributeModifyPermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3]" started-at="2023-05-19T18:13:33 IST" name="verifyAttributeModifyPermanentBadgeRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:33 IST" duration-ms="620" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-9005-Modify Perm badge (Add Site) and verify the weather the category attribute value as (Modify Badge) from Service Ticket Get call response, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyAttributeModifyPermanentBadgeRequest, TestCaseID=GAPI-9005, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=Modify Badge, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.ModifyFAPermanentBadge.verifyAttributeModifyPermanentBadgeRequest(ModifyFAPermanentBadge.java:196)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAttributeModifyPermanentBadgeRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3]" started-at="2023-05-19T18:13:33 IST" name="teardown" finished-at="2023-05-19T18:13:33 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAttributeModifyPermanentBadgeRequest status=SKIP method=ModifyFAPermanentBadge.verifyAttributeModifyPermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyAttributeModifyPermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3]" started-at="2023-05-19T18:13:33 IST" name="verifyAttributeModifyPermanentBadgeRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:34 IST" duration-ms="468" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-9005-Modify Perm badge (Add Site) and verify the weather the category attribute value as (Modify Badge) from Service Ticket Get call response, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyAttributeModifyPermanentBadgeRequest, TestCaseID=GAPI-9005, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=Modify Badge, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.ModifyFAPermanentBadge.verifyAttributeModifyPermanentBadgeRequest(ModifyFAPermanentBadge.java:196)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAttributeModifyPermanentBadgeRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3]" started-at="2023-05-19T18:13:34 IST" name="teardown" finished-at="2023-05-19T18:13:34 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAttributeModifyPermanentBadgeRequest status=FAILURE method=ModifyFAPermanentBadge.verifyAttributeModifyPermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyModifyPermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3]" started-at="2023-05-19T18:13:34 IST" name="verifyModifyPermanentBadgeRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:34 IST" duration-ms="437" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-6840-GAPI-6812-GAPI-6842-GAPI-6260-GAPI-6806-GAPI-6808-GAPI-6822-FA-Permanent Badge - Modify  Badge- Add sites, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyModifyPermanentBadgeRequest, TestCaseID=GAPI-6840, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.ModifyFAPermanentBadge.verifyModifyPermanentBadgeRequest(ModifyFAPermanentBadge.java:55)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyModifyPermanentBadgeRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3]" started-at="2023-05-19T18:13:34 IST" name="teardown" finished-at="2023-05-19T18:13:34 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyModifyPermanentBadgeRequest status=SKIP method=ModifyFAPermanentBadge.verifyModifyPermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyModifyPermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3]" started-at="2023-05-19T18:13:34 IST" name="verifyModifyPermanentBadgeRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:35 IST" duration-ms="432" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-6840-GAPI-6812-GAPI-6842-GAPI-6260-GAPI-6806-GAPI-6808-GAPI-6822-FA-Permanent Badge - Modify  Badge- Add sites, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyModifyPermanentBadgeRequest, TestCaseID=GAPI-6840, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.ModifyFAPermanentBadge.verifyModifyPermanentBadgeRequest(ModifyFAPermanentBadge.java:55)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyModifyPermanentBadgeRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3]" started-at="2023-05-19T18:13:35 IST" name="teardown" finished-at="2023-05-19T18:13:35 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyModifyPermanentBadgeRequest status=FAILURE method=ModifyFAPermanentBadge.verifyModifyPermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyModifyPermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3]" started-at="2023-05-19T18:13:35 IST" name="verifyModifyPermanentBadgeRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:35 IST" duration-ms="282" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Modify permanent badge request with Invalid site and location, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Not Found, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=404, ci=, readFlag=, errorMessage=Resource not found., methodName=verifyModifyPermanentBadgeRequest, TestCaseID=Modify pe, errorMessageType=client, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=abc041, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyModifyPermanentBadgeRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3]" started-at="2023-05-19T18:13:35 IST" name="teardown" finished-at="2023-05-19T18:13:35 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyModifyPermanentBadgeRequest status=SUCCESS method=ModifyFAPermanentBadge.verifyModifyPermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyModifyPermanentBadgeRequestAddSite(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3]" started-at="2023-05-19T18:13:35 IST" name="verifyModifyPermanentBadgeRequestAddSite" data-provider="testCasesData" finished-at="2023-05-19T18:13:36 IST" duration-ms="449" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-9007-Modify Perm badge (Add Site) and verify the weather the Description attribute value as (Request for Modify Permanent Badge) from Service Ticket Get call response, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=Request for Modify Permanent badge, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyModifyPermanentBadgeRequestAddSite, TestCaseID=GAPI-9007, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.ModifyFAPermanentBadge.verifyModifyPermanentBadgeRequestAddSite(ModifyFAPermanentBadge.java:269)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyModifyPermanentBadgeRequestAddSite -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3]" started-at="2023-05-19T18:13:36 IST" name="teardown" finished-at="2023-05-19T18:13:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyModifyPermanentBadgeRequestAddSite status=SKIP method=ModifyFAPermanentBadge.verifyModifyPermanentBadgeRequestAddSite(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyModifyPermanentBadgeRequestAddSite(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3]" started-at="2023-05-19T18:13:36 IST" name="verifyModifyPermanentBadgeRequestAddSite" data-provider="testCasesData" finished-at="2023-05-19T18:13:36 IST" duration-ms="439" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-9007-Modify Perm badge (Add Site) and verify the weather the Description attribute value as (Request for Modify Permanent Badge) from Service Ticket Get call response, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=Request for Modify Permanent badge, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyModifyPermanentBadgeRequestAddSite, TestCaseID=GAPI-9007, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.ModifyFAPermanentBadge.verifyModifyPermanentBadgeRequestAddSite(ModifyFAPermanentBadge.java:269)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyModifyPermanentBadgeRequestAddSite -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3]" started-at="2023-05-19T18:13:36 IST" name="teardown" finished-at="2023-05-19T18:13:36 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyModifyPermanentBadgeRequestAddSite status=FAILURE method=ModifyFAPermanentBadge.verifyModifyPermanentBadgeRequestAddSite(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyModifyPermanentBadgeServiceTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3]" started-at="2023-05-19T18:13:36 IST" name="verifyModifyPermanentBadgeServiceTicket" data-provider="testCasesData" finished-at="2023-05-19T18:13:37 IST" duration-ms="678" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, contactType=, TestCaseName=GAPI-8989-FA-Permanent Badge - Modify Ticket -Get Service Ticket, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyModifyPermanentBadgeServiceTicket, TestCaseID=GAPI-8989, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.ModifyFAPermanentBadge.verifyModifyPermanentBadgeServiceTicket(ModifyFAPermanentBadge.java:102)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyModifyPermanentBadgeServiceTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3]" started-at="2023-05-19T18:13:37 IST" name="teardown" finished-at="2023-05-19T18:13:37 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyModifyPermanentBadgeServiceTicket status=SKIP method=ModifyFAPermanentBadge.verifyModifyPermanentBadgeServiceTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyModifyPermanentBadgeServiceTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3]" started-at="2023-05-19T18:13:37 IST" name="verifyModifyPermanentBadgeServiceTicket" data-provider="testCasesData" finished-at="2023-05-19T18:13:37 IST" duration-ms="420" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, contactType=, TestCaseName=GAPI-8989-FA-Permanent Badge - Modify Ticket -Get Service Ticket, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyModifyPermanentBadgeServiceTicket, TestCaseID=GAPI-8989, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.ModifyFAPermanentBadge.verifyModifyPermanentBadgeServiceTicket(ModifyFAPermanentBadge.java:102)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyModifyPermanentBadgeServiceTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3]" started-at="2023-05-19T18:13:37 IST" name="teardown" finished-at="2023-05-19T18:13:37 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyModifyPermanentBadgeServiceTicket status=FAILURE method=ModifyFAPermanentBadge.verifyModifyPermanentBadgeServiceTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyModifyPermanentBadgeSubjectEnhancement(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3]" started-at="2023-05-19T18:13:37 IST" name="verifyModifyPermanentBadgeSubjectEnhancement" data-provider="testCasesData" finished-at="2023-05-19T18:13:38 IST" duration-ms="436" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, contactType=Request for Modify Permanent badge, TestCaseName=GAPI-8986-FA-Permanent Badge - Modify Ticket -Subject Enhancement, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=Request for Modify Permanent badge, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyModifyPermanentBadgeSubjectEnhancement, TestCaseID=GAPI-8986, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.ModifyFAPermanentBadge.verifyModifyPermanentBadgeSubjectEnhancement(ModifyFAPermanentBadge.java:162)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyModifyPermanentBadgeSubjectEnhancement -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3]" started-at="2023-05-19T18:13:38 IST" name="teardown" finished-at="2023-05-19T18:13:38 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyModifyPermanentBadgeSubjectEnhancement status=SKIP method=ModifyFAPermanentBadge.verifyModifyPermanentBadgeSubjectEnhancement(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyModifyPermanentBadgeSubjectEnhancement(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3]" started-at="2023-05-19T18:13:38 IST" name="verifyModifyPermanentBadgeSubjectEnhancement" data-provider="testCasesData" finished-at="2023-05-19T18:13:38 IST" duration-ms="428" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, contactType=Request for Modify Permanent badge, TestCaseName=GAPI-8986-FA-Permanent Badge - Modify Ticket -Subject Enhancement, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=Request for Modify Permanent badge, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyModifyPermanentBadgeSubjectEnhancement, TestCaseID=GAPI-8986, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.ModifyFAPermanentBadge.verifyModifyPermanentBadgeSubjectEnhancement(ModifyFAPermanentBadge.java:162)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyModifyPermanentBadgeSubjectEnhancement -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3]" started-at="2023-05-19T18:13:38 IST" name="teardown" finished-at="2023-05-19T18:13:38 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyModifyPermanentBadgeSubjectEnhancement status=FAILURE method=ModifyFAPermanentBadge.verifyModifyPermanentBadgeSubjectEnhancement(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAPermanentBadge@275bf9b3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.ModifyFAPermanentBadge -->
      <class name="com.gapi.testCases.AddCommentsToTheRemoteHandsTicket">
        <test-method signature="AddUsercommentsRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddCommentsToTheRemoteHandsTicket@57576994]" started-at="2023-05-19T18:17:49 IST" name="AddUsercommentsRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:17:51 IST" duration-ms="2144" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4079-Add Comment to Existing RH Tickets in Status -New  - Comment greater than Max size of 1024, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=AddUsercommentsRemoteHandsTicket, TestCaseID=GAPI-4079, errorMessageType=, standardVisitorBadgeStr=, filters=1100, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Power cycle or reboot, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddUsercommentsRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddCommentsToTheRemoteHandsTicket@57576994]" started-at="2023-05-19T18:17:51 IST" name="teardown" finished-at="2023-05-19T18:17:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AddUsercommentsRemoteHandsTicket status=SUCCESS method=AddCommentsToTheRemoteHandsTicket.AddUsercommentsRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddCommentsToTheRemoteHandsTicket@57576994] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="AddUsercommentsRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddCommentsToTheRemoteHandsTicket@57576994]" started-at="2023-05-19T18:17:51 IST" name="AddUsercommentsRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:17:53 IST" duration-ms="1940" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4077-Add Comment to Existing RH Tickets in Status -New (up to max size 1024), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=AddUsercommentsRemoteHandsTicket, TestCaseID=GAPI-4077, errorMessageType=, standardVisitorBadgeStr=, filters=900, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Power cycle or reboot, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddUsercommentsRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddCommentsToTheRemoteHandsTicket@57576994]" started-at="2023-05-19T18:17:53 IST" name="teardown" finished-at="2023-05-19T18:17:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AddUsercommentsRemoteHandsTicket status=SUCCESS method=AddCommentsToTheRemoteHandsTicket.AddUsercommentsRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddCommentsToTheRemoteHandsTicket@57576994] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="AddUsercommentsRemoteHandsTicketwithoutMandatoryParameters(java.util.Map)[pri:0, instance:com.gapi.testCases.AddCommentsToTheRemoteHandsTicket@57576994]" started-at="2023-05-19T18:17:53 IST" name="AddUsercommentsRemoteHandsTicketwithoutMandatoryParameters" data-provider="testCasesData" finished-at="2023-05-19T18:17:54 IST" duration-ms="1181" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4080-Add Comment to Existing RH Tickets without using both Mandatory fields RequestID and Comment, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=gpuat22-51@yahoo.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=AddUsercommentsRemoteHandsTicketwithoutMandatoryParameters, TestCaseID=GAPI-4080, errorMessageType=, standardVisitorBadgeStr=, filters=", visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Existing cross connect or connectivity testing, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddUsercommentsRemoteHandsTicketwithoutMandatoryParameters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddCommentsToTheRemoteHandsTicket@57576994]" started-at="2023-05-19T18:17:54 IST" name="teardown" finished-at="2023-05-19T18:17:54 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AddUsercommentsRemoteHandsTicketwithoutMandatoryParameters status=SUCCESS method=AddCommentsToTheRemoteHandsTicket.AddUsercommentsRemoteHandsTicketwithoutMandatoryParameters(java.util.Map)[pri:0, instance:com.gapi.testCases.AddCommentsToTheRemoteHandsTicket@57576994] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.AddCommentsToTheRemoteHandsTicket -->
      <class name="com.gapi.testCases.GetPermanentBadgeDetails">
        <test-method signature="getPermanentBadgeDetailsInfoWithInvalidGlobalUltimate()[pri:0, instance:com.gapi.testCases.GetPermanentBadgeDetails@57ad2aa7]" started-at="2023-05-19T18:13:13 IST" name="getPermanentBadgeDetailsInfoWithInvalidGlobalUltimate" finished-at="2023-05-19T18:13:14 IST" duration-ms="343" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPermanentBadgeDetailsInfoWithInvalidGlobalUltimate -->
        <test-method signature="getPermanentBadgeInfo()[pri:0, instance:com.gapi.testCases.GetPermanentBadgeDetails@57ad2aa7]" started-at="2023-05-19T18:13:14 IST" name="getPermanentBadgeInfo" finished-at="2023-05-19T18:13:18 IST" duration-ms="3921" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPermanentBadgeInfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetPermanentBadgeDetails@57ad2aa7]" started-at="2023-05-19T18:13:14 IST" name="teardown" finished-at="2023-05-19T18:13:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getPermanentBadgeDetailsInfoWithInvalidGlobalUltimate status=SUCCESS method=GetPermanentBadgeDetails.getPermanentBadgeDetailsInfoWithInvalidGlobalUltimate()[pri:0, instance:com.gapi.testCases.GetPermanentBadgeDetails@57ad2aa7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetPermanentBadgeDetails@57ad2aa7]" started-at="2023-05-19T18:13:18 IST" name="teardown" finished-at="2023-05-19T18:13:18 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getPermanentBadgeInfo status=SUCCESS method=GetPermanentBadgeDetails.getPermanentBadgeInfo()[pri:0, instance:com.gapi.testCases.GetPermanentBadgeDetails@57ad2aa7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getPermanentBadgeInfoWithInvalidLegalentity()[pri:0, instance:com.gapi.testCases.GetPermanentBadgeDetails@57ad2aa7]" started-at="2023-05-19T18:13:18 IST" name="getPermanentBadgeInfoWithInvalidLegalentity" finished-at="2023-05-19T18:13:18 IST" duration-ms="368" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPermanentBadgeInfoWithInvalidLegalentity -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetPermanentBadgeDetails@57ad2aa7]" started-at="2023-05-19T18:13:18 IST" name="teardown" finished-at="2023-05-19T18:13:18 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getPermanentBadgeInfoWithInvalidLegalentity status=SUCCESS method=GetPermanentBadgeDetails.getPermanentBadgeInfoWithInvalidLegalentity()[pri:0, instance:com.gapi.testCases.GetPermanentBadgeDetails@57ad2aa7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getPermanentBadgeInfoWithInvalidToken()[pri:0, instance:com.gapi.testCases.GetPermanentBadgeDetails@57ad2aa7]" started-at="2023-05-19T18:13:18 IST" name="getPermanentBadgeInfoWithInvalidToken" finished-at="2023-05-19T18:13:18 IST" duration-ms="193" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPermanentBadgeInfoWithInvalidToken -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetPermanentBadgeDetails@57ad2aa7]" started-at="2023-05-19T18:13:18 IST" name="teardown" finished-at="2023-05-19T18:13:18 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getPermanentBadgeInfoWithInvalidToken status=SUCCESS method=GetPermanentBadgeDetails.getPermanentBadgeInfoWithInvalidToken()[pri:0, instance:com.gapi.testCases.GetPermanentBadgeDetails@57ad2aa7] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetPermanentBadgeDetails -->
      <class name="com.gapi.testCases.GetSites">
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:11:51 IST" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-05-19T18:11:52 IST" duration-ms="901" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5367-Retrieve Locations for Customer - Site using account id &Campus, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, TestCaseID=GAPI-5367, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&campus=Y, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:11:52 IST" name="teardown" finished-at="2023-05-19T18:11:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:11:52 IST" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-05-19T18:11:52 IST" duration-ms="557" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5366-Retrieve Locations for Customer - Site using account id , City&Campus, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, TestCaseID=GAPI-5366, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&city=Hong Kong&campus=Y, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:11:52 IST" name="teardown" finished-at="2023-05-19T18:11:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:11:52 IST" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-05-19T18:11:53 IST" duration-ms="643" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5364-Retrieve Locations for Customer - Site using account id , Market&City, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, TestCaseID=GAPI-5364, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&market=Hong Kong&city=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:11:53 IST" name="teardown" finished-at="2023-05-19T18:11:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:11:53 IST" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-05-19T18:11:54 IST" duration-ms="653" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5365-Retrieve Locations for Customer - Site using account id , Market&Campus, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, TestCaseID=GAPI-5365, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&market=Hong Kong&campus=Y, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:11:54 IST" name="teardown" finished-at="2023-05-19T18:11:54 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:11:54 IST" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-05-19T18:11:54 IST" duration-ms="608" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5363-GAPI-5390-Retrieve Locations for Customer - Site using account id &Market, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, TestCaseID=GAPI-5363, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&market=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:11:54 IST" name="teardown" finished-at="2023-05-19T18:11:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:11:54 IST" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-05-19T18:11:55 IST" duration-ms="601" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5362-Retrieve Locations for Customer - Site using account id , Country&Campus, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, TestCaseID=GAPI-5362, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&country=Hong Kong&campus=Y, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:11:55 IST" name="teardown" finished-at="2023-05-19T18:11:55 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:11:55 IST" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-05-19T18:11:56 IST" duration-ms="628" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5361-Retrieve Locations for Customer - Site using account id , Country&City, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, TestCaseID=GAPI-5361, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&country=Hong Kong&city=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:11:56 IST" name="teardown" finished-at="2023-05-19T18:11:56 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:11:56 IST" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-05-19T18:11:56 IST" duration-ms="563" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5360-Retrieve Locations for Customer - Site using account id , Country,Market&City, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, TestCaseID=GAPI-5360, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&country=Hong Kong&market=Hong Kong&city=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:11:56 IST" name="teardown" finished-at="2023-05-19T18:11:56 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:11:56 IST" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-05-19T18:11:57 IST" duration-ms="766" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5359-5375-Retrieve Locations for Customer - Site using account id , Country&Market, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, TestCaseID=GAPI-5359, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&country=Hong Kong&market=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:11:57 IST" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-05-19T18:11:57 IST" duration-ms="619" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5358-Retrieve Locations for Customer - Site using account id &Country code, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, TestCaseID=GAPI-5358, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&country=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:11:57 IST" name="teardown" finished-at="2023-05-19T18:11:57 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:11:57 IST" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-05-19T18:11:58 IST" duration-ms="682" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5357-Retrieve Locations for Customer - Site using account id , Region,Country,Market,City &Campus, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, TestCaseID=GAPI-5357, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&region=APAC&country=Hong Kong&market=Hong Kong&city=Hong Kong&campus=Y, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:11:57 IST" name="teardown" finished-at="2023-05-19T18:11:57 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:11:58 IST" name="teardown" finished-at="2023-05-19T18:11:58 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:11:58 IST" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-05-19T18:11:59 IST" duration-ms="561" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5356-Retrieve Locations for Customer - Site using account id , Region,Country,Market &City, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, TestCaseID=GAPI-5356, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&region=APAC&country=Hong Kong&market=Hong Kong&city=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:11:59 IST" name="teardown" finished-at="2023-05-19T18:11:59 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:11:59 IST" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-05-19T18:11:59 IST" duration-ms="625" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5355-Retrieve Locations for Customer - Site using account id , Region,Country &Market, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, TestCaseID=GAPI-5355, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&region=APAC&country=Hong Kong&market=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:11:59 IST" name="teardown" finished-at="2023-05-19T18:11:59 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:11:59 IST" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-05-19T18:12:00 IST" duration-ms="635" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5354-Retrieve Locations for Customer - Site using account id , Region&Campus, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, TestCaseID=GAPI-5354, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&region=APAC&campus=Y, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:12:00 IST" name="teardown" finished-at="2023-05-19T18:12:00 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:12:00 IST" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-05-19T18:12:01 IST" duration-ms="620" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5353-Retrieve Locations for Customer - Site using account id , Region&City, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, TestCaseID=GAPI-5353, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&region=APAC&city=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:12:01 IST" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-05-19T18:12:01 IST" duration-ms="604" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5351-GAPI-5350-Retrieve Locations for Customer - Site using account id , Region&Country, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, TestCaseID=GAPI-5351, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&region=APAC&country=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:12:01 IST" name="teardown" finished-at="2023-05-19T18:12:01 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:12:01 IST" name="teardown" finished-at="2023-05-19T18:12:01 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:12:01 IST" name="getAllSiteDetailsinfo" data-provider="testCasesData" finished-at="2023-05-19T18:12:02 IST" duration-ms="630" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5352-Retrieve Locations for Customer - Site using account id , Region&Market, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllSiteDetailsinfo, TestCaseID=GAPI-5352, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&region=APAC&market=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSiteDetailsinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d]" started-at="2023-05-19T18:12:02 IST" name="teardown" finished-at="2023-05-19T18:12:02 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSiteDetailsinfo status=SUCCESS method=GetSites.getAllSiteDetailsinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetSites@4f74980d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetSites -->
      <class name="com.gapi.testCases.CreateVisitorAccessRequest">
        <test-method retried="true" signature="CreateVisitorAccessRequestGreaterLocationStartDate(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:33 IST" name="CreateVisitorAccessRequestGreaterLocationStartDate" data-provider="testCasesData" finished-at="2023-05-19T18:12:34 IST" duration-ms="871" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=true, isBulkRequest=false, contactType=, TestCaseName=GAPI-8903-FA Visitor Access - Create with Location Start Date >=Visitor Badge Start Dates, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=CreateVisitorAccessRequestGreaterLocationStartDate, TestCaseID=GAPI-8903, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CreateVisitorAccessRequest.CreateVisitorAccessRequestGreaterLocationStartDate(CreateVisitorAccessRequest.java:529)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateVisitorAccessRequestGreaterLocationStartDate -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:34 IST" name="teardown" finished-at="2023-05-19T18:12:34 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateVisitorAccessRequestGreaterLocationStartDate status=SKIP method=CreateVisitorAccessRequest.CreateVisitorAccessRequestGreaterLocationStartDate(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="CreateVisitorAccessRequestGreaterLocationStartDate(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:34 IST" name="CreateVisitorAccessRequestGreaterLocationStartDate" data-provider="testCasesData" finished-at="2023-05-19T18:12:34 IST" duration-ms="488" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=true, isBulkRequest=false, contactType=, TestCaseName=GAPI-8903-FA Visitor Access - Create with Location Start Date >=Visitor Badge Start Dates, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=CreateVisitorAccessRequestGreaterLocationStartDate, TestCaseID=GAPI-8903, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CreateVisitorAccessRequest.CreateVisitorAccessRequestGreaterLocationStartDate(CreateVisitorAccessRequest.java:529)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateVisitorAccessRequestGreaterLocationStartDate -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:34 IST" name="teardown" finished-at="2023-05-19T18:12:34 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateVisitorAccessRequestGreaterLocationStartDate status=FAILURE method=CreateVisitorAccessRequest.CreateVisitorAccessRequestGreaterLocationStartDate(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="CreateVisitorAccessRequestLessLocationStartDate(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:34 IST" name="CreateVisitorAccessRequestLessLocationStartDate" data-provider="testCasesData" finished-at="2023-05-19T18:12:34 IST" duration-ms="411" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=true, isBulkRequest=false, contactType=, TestCaseName=GAPI-8948-FA Visitor Access - Create with Location Start Date < Visitor Badge Start Date, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=Payload contains invalid date in sites/locations/accessStartDate or sites/locations/accessEndDate attributes, methodName=CreateVisitorAccessRequestLessLocationStartDate, TestCaseID=GAPI-8948, errorMessageType=client, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateVisitorAccessRequestLessLocationStartDate -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:34 IST" name="teardown" finished-at="2023-05-19T18:12:34 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateVisitorAccessRequestLessLocationStartDate status=SUCCESS method=CreateVisitorAccessRequest.CreateVisitorAccessRequestLessLocationStartDate(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="bulkVisitorAccessRequestInfo(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:34 IST" name="bulkVisitorAccessRequestInfo" data-provider="testCasesData" finished-at="2023-05-19T18:12:35 IST" duration-ms="494" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-6818-FA-Creation of Bulk Visitor Access request, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=bulkVisitorAccessRequestInfo, TestCaseID=GAPI-6818, errorMessageType=, standardVisitorBadgeStr=, filters=?file_name=Sample12.xlsx&requestId=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getWOIDFromResponse(TestUtilities.java:641)
at com.gapi.testCases.CreateVisitorAccessRequest.bulkVisitorAccessRequestInfo(CreateVisitorAccessRequest.java:351)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bulkVisitorAccessRequestInfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:35 IST" name="teardown" finished-at="2023-05-19T18:12:35 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=bulkVisitorAccessRequestInfo status=SKIP method=CreateVisitorAccessRequest.bulkVisitorAccessRequestInfo(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="bulkVisitorAccessRequestInfo(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:35 IST" name="bulkVisitorAccessRequestInfo" data-provider="testCasesData" finished-at="2023-05-19T18:12:35 IST" duration-ms="490" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-6818-FA-Creation of Bulk Visitor Access request, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=bulkVisitorAccessRequestInfo, TestCaseID=GAPI-6818, errorMessageType=, standardVisitorBadgeStr=, filters=?file_name=Sample12.xlsx&requestId=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getWOIDFromResponse(TestUtilities.java:641)
at com.gapi.testCases.CreateVisitorAccessRequest.bulkVisitorAccessRequestInfo(CreateVisitorAccessRequest.java:351)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- bulkVisitorAccessRequestInfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:35 IST" name="teardown" finished-at="2023-05-19T18:12:35 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=bulkVisitorAccessRequestInfo status=FAILURE method=CreateVisitorAccessRequest.bulkVisitorAccessRequestInfo(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="getVisitorAccessRequestByID(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:35 IST" name="getVisitorAccessRequestByID" data-provider="testCasesData" finished-at="2023-05-19T18:12:36 IST" duration-ms="467" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=true, isBulkRequest=false, contactType=, TestCaseName=GAPI-6274-Retrieve Visitor Access ticket details - Get By ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getVisitorAccessRequestByID, TestCaseID=GAPI-6274, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getWOIDFromResponse(TestUtilities.java:641)
at com.gapi.testCases.CreateVisitorAccessRequest.getVisitorAccessRequestByID(CreateVisitorAccessRequest.java:257)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getVisitorAccessRequestByID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:36 IST" name="teardown" finished-at="2023-05-19T18:12:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getVisitorAccessRequestByID status=SKIP method=CreateVisitorAccessRequest.getVisitorAccessRequestByID(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getVisitorAccessRequestByID(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:36 IST" name="getVisitorAccessRequestByID" data-provider="testCasesData" finished-at="2023-05-19T18:12:36 IST" duration-ms="489" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=true, isBulkRequest=false, contactType=, TestCaseName=GAPI-6274-Retrieve Visitor Access ticket details - Get By ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getVisitorAccessRequestByID, TestCaseID=GAPI-6274, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getWOIDFromResponse(TestUtilities.java:641)
at com.gapi.testCases.CreateVisitorAccessRequest.getVisitorAccessRequestByID(CreateVisitorAccessRequest.java:257)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getVisitorAccessRequestByID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:36 IST" name="teardown" finished-at="2023-05-19T18:12:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getVisitorAccessRequestByID status=FAILURE method=CreateVisitorAccessRequest.getVisitorAccessRequestByID(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyAttributeCreateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:36 IST" name="verifyAttributeCreateVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-05-19T18:12:37 IST" duration-ms="489" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=true, isBulkRequest=false, contactType=, TestCaseName=GAPI-8917-Create Visitor access ticket and verify weather the category attribute value as (New Visitor Access) from Service ticket Get Call Response, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyAttributeCreateVisitorAccessRequest, TestCaseID=GAPI-8917, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=category, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=New Visitor Access, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreateVisitorAccessRequest.verifyAttributeCreateVisitorAccessRequest(CreateVisitorAccessRequest.java:401)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAttributeCreateVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:37 IST" name="teardown" finished-at="2023-05-19T18:12:37 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAttributeCreateVisitorAccessRequest status=SKIP method=CreateVisitorAccessRequest.verifyAttributeCreateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyAttributeCreateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:37 IST" name="verifyAttributeCreateVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-05-19T18:12:37 IST" duration-ms="585" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=true, isBulkRequest=false, contactType=, TestCaseName=GAPI-8917-Create Visitor access ticket and verify weather the category attribute value as (New Visitor Access) from Service ticket Get Call Response, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyAttributeCreateVisitorAccessRequest, TestCaseID=GAPI-8917, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=category, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=New Visitor Access, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreateVisitorAccessRequest.verifyAttributeCreateVisitorAccessRequest(CreateVisitorAccessRequest.java:401)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAttributeCreateVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:37 IST" name="teardown" finished-at="2023-05-19T18:12:37 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAttributeCreateVisitorAccessRequest status=FAILURE method=CreateVisitorAccessRequest.verifyAttributeCreateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyAttributeCreateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:37 IST" name="verifyAttributeCreateVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-05-19T18:12:38 IST" duration-ms="459" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=true, isBulkRequest=false, contactType=, TestCaseName=GAPI-9009-Create Visitor access request in Test for Telx Group and verify weather the Description attribute value as (New Visitor Access) from Service ticket Get Call Response, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=New Visitor Access, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyAttributeCreateVisitorAccessRequest, TestCaseID=GAPI-9009, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=description, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreateVisitorAccessRequest.verifyAttributeCreateVisitorAccessRequest(CreateVisitorAccessRequest.java:401)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAttributeCreateVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:38 IST" name="teardown" finished-at="2023-05-19T18:12:38 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAttributeCreateVisitorAccessRequest status=SKIP method=CreateVisitorAccessRequest.verifyAttributeCreateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyAttributeCreateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:38 IST" name="verifyAttributeCreateVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-05-19T18:12:38 IST" duration-ms="458" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=true, isBulkRequest=false, contactType=, TestCaseName=GAPI-9009-Create Visitor access request in Test for Telx Group and verify weather the Description attribute value as (New Visitor Access) from Service ticket Get Call Response, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=New Visitor Access, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyAttributeCreateVisitorAccessRequest, TestCaseID=GAPI-9009, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=description, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreateVisitorAccessRequest.verifyAttributeCreateVisitorAccessRequest(CreateVisitorAccessRequest.java:401)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAttributeCreateVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:38 IST" name="teardown" finished-at="2023-05-19T18:12:38 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAttributeCreateVisitorAccessRequest status=FAILURE method=CreateVisitorAccessRequest.verifyAttributeCreateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyCreateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:38 IST" name="verifyCreateVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-05-19T18:12:39 IST" duration-ms="468" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=true, isBulkRequest=false, contactType=, TestCaseName=GAPI-6253-Create visitor access request with all mandatory parameters, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreateVisitorAccessRequest, TestCaseID=GAPI-6253, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CreateVisitorAccessRequest.verifyCreateVisitorAccessRequest(CreateVisitorAccessRequest.java:60)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:39 IST" name="teardown" finished-at="2023-05-19T18:12:39 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateVisitorAccessRequest status=SKIP method=CreateVisitorAccessRequest.verifyCreateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:39 IST" name="verifyCreateVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-05-19T18:12:39 IST" duration-ms="452" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=true, isBulkRequest=false, contactType=, TestCaseName=GAPI-6253-Create visitor access request with all mandatory parameters, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreateVisitorAccessRequest, TestCaseID=GAPI-6253, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CreateVisitorAccessRequest.verifyCreateVisitorAccessRequest(CreateVisitorAccessRequest.java:60)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:39 IST" name="teardown" finished-at="2023-05-19T18:12:39 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateVisitorAccessRequest status=FAILURE method=CreateVisitorAccessRequest.verifyCreateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:39 IST" name="verifyCreateVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-05-19T18:12:40 IST" duration-ms="284" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Create visitor access request without mandatory parameters(without Visitor name), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=Mandatory payload 'firstName' is null or empty., methodName=verifyCreateVisitorAccessRequest, TestCaseID=Create vi, errorMessageType=client, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:40 IST" name="teardown" finished-at="2023-05-19T18:12:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateVisitorAccessRequest status=SUCCESS method=CreateVisitorAccessRequest.verifyCreateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:40 IST" name="verifyCreateVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-05-19T18:12:40 IST" duration-ms="277" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Create visitor access request without Site value, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=Payload attribute site contain incorrect size, methodName=verifyCreateVisitorAccessRequest, TestCaseID=Create vi, errorMessageType=client, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:40 IST" name="teardown" finished-at="2023-05-19T18:12:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateVisitorAccessRequest status=SUCCESS method=CreateVisitorAccessRequest.verifyCreateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:40 IST" name="verifyCreateVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-05-19T18:12:40 IST" duration-ms="310" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Create visitor access request with invalid Location value, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Not Found, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=404, ci=, readFlag=, errorMessage=Resource not found., methodName=verifyCreateVisitorAccessRequest, TestCaseID=Create vi, errorMessageType=client, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=ABC, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:40 IST" name="teardown" finished-at="2023-05-19T18:12:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateVisitorAccessRequest status=SUCCESS method=CreateVisitorAccessRequest.verifyCreateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateVisitorAccessRequestForInvalidLegalentity(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:40 IST" name="verifyCreateVisitorAccessRequestForInvalidLegalentity" data-provider="testCasesData" finished-at="2023-05-19T18:12:41 IST" duration-ms="296" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Create visitor access request for Invalid Legal  Entity , search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreateVisitorAccessRequestForInvalidLegalentity, TestCaseID=Create vi, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateVisitorAccessRequestForInvalidLegalentity -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:41 IST" name="teardown" finished-at="2023-05-19T18:12:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateVisitorAccessRequestForInvalidLegalentity status=SUCCESS method=CreateVisitorAccessRequest.verifyCreateVisitorAccessRequestForInvalidLegalentity(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateVisitorAccessRequestForInvalidToken(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:41 IST" name="verifyCreateVisitorAccessRequestForInvalidToken" data-provider="testCasesData" finished-at="2023-05-19T18:12:41 IST" duration-ms="211" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Create visitor access request with Invalid Token, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreateVisitorAccessRequestForInvalidToken, TestCaseID=Create vi, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateVisitorAccessRequestForInvalidToken -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:41 IST" name="teardown" finished-at="2023-05-19T18:12:41 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateVisitorAccessRequestForInvalidToken status=SUCCESS method=CreateVisitorAccessRequest.verifyCreateVisitorAccessRequestForInvalidToken(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyUploadAttachmentToVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:41 IST" name="verifyUploadAttachmentToVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-05-19T18:12:41 IST" duration-ms="460" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=true, contactType=, TestCaseName=Create visitor access request and add attachment, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyUploadAttachmentToVisitorAccessRequest, TestCaseID=Create vi, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CreateVisitorAccessRequest.verifyUploadAttachmentToVisitorAccessRequest(CreateVisitorAccessRequest.java:221)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUploadAttachmentToVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:41 IST" name="teardown" finished-at="2023-05-19T18:12:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyUploadAttachmentToVisitorAccessRequest status=SKIP method=CreateVisitorAccessRequest.verifyUploadAttachmentToVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyUploadAttachmentToVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:41 IST" name="verifyUploadAttachmentToVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-05-19T18:12:42 IST" duration-ms="541" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=true, contactType=, TestCaseName=Create visitor access request and add attachment, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyUploadAttachmentToVisitorAccessRequest, TestCaseID=Create vi, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [401]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [401]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CreateVisitorAccessRequest.verifyUploadAttachmentToVisitorAccessRequest(CreateVisitorAccessRequest.java:221)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUploadAttachmentToVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:42 IST" name="teardown" finished-at="2023-05-19T18:12:42 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyUploadAttachmentToVisitorAccessRequest status=FAILURE method=CreateVisitorAccessRequest.verifyUploadAttachmentToVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyVisitorAccessApprovedForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:42 IST" name="verifyVisitorAccessApprovedForMultipleLocations" data-provider="testCasesData" finished-at="2023-05-19T18:12:42 IST" duration-ms="428" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8997-FA-visitor access- Create ticket for multiple locations and verify the Ticket Status when both location statuses is Approved, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyVisitorAccessApprovedForMultipleLocations, TestCaseID=GAPI-8997, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=Starbucks Cage F150-B, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreateVisitorAccessRequest.createVisitorAccessTicketsForMultipleLocations(CreateVisitorAccessRequest.java:787)
at com.gapi.testCases.CreateVisitorAccessRequest.verifyVisitorAccessApprovedForMultipleLocations(CreateVisitorAccessRequest.java:694)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyVisitorAccessApprovedForMultipleLocations -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:42 IST" name="teardown" finished-at="2023-05-19T18:12:42 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyVisitorAccessApprovedForMultipleLocations status=SKIP method=CreateVisitorAccessRequest.verifyVisitorAccessApprovedForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyVisitorAccessApprovedForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:42 IST" name="verifyVisitorAccessApprovedForMultipleLocations" data-provider="testCasesData" finished-at="2023-05-19T18:12:43 IST" duration-ms="489" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8997-FA-visitor access- Create ticket for multiple locations and verify the Ticket Status when both location statuses is Approved, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyVisitorAccessApprovedForMultipleLocations, TestCaseID=GAPI-8997, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=Starbucks Cage F150-B, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreateVisitorAccessRequest.createVisitorAccessTicketsForMultipleLocations(CreateVisitorAccessRequest.java:787)
at com.gapi.testCases.CreateVisitorAccessRequest.verifyVisitorAccessApprovedForMultipleLocations(CreateVisitorAccessRequest.java:694)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyVisitorAccessApprovedForMultipleLocations -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:43 IST" name="teardown" finished-at="2023-05-19T18:12:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyVisitorAccessApprovedForMultipleLocations status=FAILURE method=CreateVisitorAccessRequest.verifyVisitorAccessApprovedForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyVisitorAccessApprovedForSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:43 IST" name="verifyVisitorAccessApprovedForSingleLocation" data-provider="testCasesData" finished-at="2023-05-19T18:12:43 IST" duration-ms="414" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8999 -FA-visitor access- Create ticket for one location and verify the Ticket Status when the location status is Approved, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyVisitorAccessApprovedForSingleLocation, TestCaseID=GAPI-8999, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreateVisitorAccessRequest.createVisitorAccessTicketsForSingleLocation(CreateVisitorAccessRequest.java:772)
at com.gapi.testCases.CreateVisitorAccessRequest.verifyVisitorAccessApprovedForSingleLocation(CreateVisitorAccessRequest.java:544)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyVisitorAccessApprovedForSingleLocation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:43 IST" name="teardown" finished-at="2023-05-19T18:12:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyVisitorAccessApprovedForSingleLocation status=SKIP method=CreateVisitorAccessRequest.verifyVisitorAccessApprovedForSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyVisitorAccessApprovedForSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:43 IST" name="verifyVisitorAccessApprovedForSingleLocation" data-provider="testCasesData" finished-at="2023-05-19T18:12:43 IST" duration-ms="408" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8999 -FA-visitor access- Create ticket for one location and verify the Ticket Status when the location status is Approved, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyVisitorAccessApprovedForSingleLocation, TestCaseID=GAPI-8999, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreateVisitorAccessRequest.createVisitorAccessTicketsForSingleLocation(CreateVisitorAccessRequest.java:772)
at com.gapi.testCases.CreateVisitorAccessRequest.verifyVisitorAccessApprovedForSingleLocation(CreateVisitorAccessRequest.java:544)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyVisitorAccessApprovedForSingleLocation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:43 IST" name="teardown" finished-at="2023-05-19T18:12:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyVisitorAccessApprovedForSingleLocation status=FAILURE method=CreateVisitorAccessRequest.verifyVisitorAccessApprovedForSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyVisitorAccessApprovedPendingApprovalDoubleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:43 IST" name="verifyVisitorAccessApprovedPendingApprovalDoubleLocation" data-provider="testCasesData" finished-at="2023-05-19T18:12:44 IST" duration-ms="415" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8994-FA-visitor access- Create ticket for multiple locations and verify the Ticket Status when one location status is Approved and other Location is Pending for Approval , search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyVisitorAccessApprovedPendingApprovalDoubleLocation, TestCaseID=GAPI-8994, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=Starbucks Cage F150-B, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreateVisitorAccessRequest.createVisitorAccessTicketsForMultipleLocations(CreateVisitorAccessRequest.java:787)
at com.gapi.testCases.CreateVisitorAccessRequest.verifyVisitorAccessApprovedPendingApprovalDoubleLocation(CreateVisitorAccessRequest.java:660)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyVisitorAccessApprovedPendingApprovalDoubleLocation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:44 IST" name="teardown" finished-at="2023-05-19T18:12:44 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyVisitorAccessApprovedPendingApprovalDoubleLocation status=SKIP method=CreateVisitorAccessRequest.verifyVisitorAccessApprovedPendingApprovalDoubleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyVisitorAccessApprovedPendingApprovalDoubleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:44 IST" name="verifyVisitorAccessApprovedPendingApprovalDoubleLocation" data-provider="testCasesData" finished-at="2023-05-19T18:12:44 IST" duration-ms="393" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8994-FA-visitor access- Create ticket for multiple locations and verify the Ticket Status when one location status is Approved and other Location is Pending for Approval , search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyVisitorAccessApprovedPendingApprovalDoubleLocation, TestCaseID=GAPI-8994, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=Starbucks Cage F150-B, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreateVisitorAccessRequest.createVisitorAccessTicketsForMultipleLocations(CreateVisitorAccessRequest.java:787)
at com.gapi.testCases.CreateVisitorAccessRequest.verifyVisitorAccessApprovedPendingApprovalDoubleLocation(CreateVisitorAccessRequest.java:660)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyVisitorAccessApprovedPendingApprovalDoubleLocation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:44 IST" name="teardown" finished-at="2023-05-19T18:12:44 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyVisitorAccessApprovedPendingApprovalDoubleLocation status=FAILURE method=CreateVisitorAccessRequest.verifyVisitorAccessApprovedPendingApprovalDoubleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyVisitorAccessDeniedForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:44 IST" name="verifyVisitorAccessDeniedForMultipleLocations" data-provider="testCasesData" finished-at="2023-05-19T18:12:45 IST" duration-ms="399" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8998-FA-visitor access- Create ticket for multiple locations and verify the Ticket Status when both location statuses is Denied, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyVisitorAccessDeniedForMultipleLocations, TestCaseID=GAPI-8998, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=COLO 8 Starbucks Cage 8.06, escortLastName=test6, assetName=, locations=Starbucks Cage F150-B, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreateVisitorAccessRequest.createVisitorAccessTicketsForMultipleLocations(CreateVisitorAccessRequest.java:787)
at com.gapi.testCases.CreateVisitorAccessRequest.verifyVisitorAccessDeniedForMultipleLocations(CreateVisitorAccessRequest.java:593)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyVisitorAccessDeniedForMultipleLocations -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:45 IST" name="teardown" finished-at="2023-05-19T18:12:45 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyVisitorAccessDeniedForMultipleLocations status=SKIP method=CreateVisitorAccessRequest.verifyVisitorAccessDeniedForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyVisitorAccessDeniedForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:45 IST" name="verifyVisitorAccessDeniedForMultipleLocations" data-provider="testCasesData" finished-at="2023-05-19T18:12:45 IST" duration-ms="445" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8998-FA-visitor access- Create ticket for multiple locations and verify the Ticket Status when both location statuses is Denied, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyVisitorAccessDeniedForMultipleLocations, TestCaseID=GAPI-8998, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=COLO 8 Starbucks Cage 8.06, escortLastName=test6, assetName=, locations=Starbucks Cage F150-B, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreateVisitorAccessRequest.createVisitorAccessTicketsForMultipleLocations(CreateVisitorAccessRequest.java:787)
at com.gapi.testCases.CreateVisitorAccessRequest.verifyVisitorAccessDeniedForMultipleLocations(CreateVisitorAccessRequest.java:593)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyVisitorAccessDeniedForMultipleLocations -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:45 IST" name="teardown" finished-at="2023-05-19T18:12:45 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyVisitorAccessDeniedForMultipleLocations status=FAILURE method=CreateVisitorAccessRequest.verifyVisitorAccessDeniedForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyVisitorAccessDeniedForSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:45 IST" name="verifyVisitorAccessDeniedForSingleLocation" data-provider="testCasesData" finished-at="2023-05-19T18:12:46 IST" duration-ms="624" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-9000 -FA-visitor access- Create ticket for one location and verify the Ticket Status when the location status is Denied, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyVisitorAccessDeniedForSingleLocation, TestCaseID=GAPI-9000, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreateVisitorAccessRequest.createVisitorAccessTicketsForSingleLocation(CreateVisitorAccessRequest.java:772)
at com.gapi.testCases.CreateVisitorAccessRequest.verifyVisitorAccessDeniedForSingleLocation(CreateVisitorAccessRequest.java:562)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyVisitorAccessDeniedForSingleLocation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:46 IST" name="teardown" finished-at="2023-05-19T18:12:46 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyVisitorAccessDeniedForSingleLocation status=SKIP method=CreateVisitorAccessRequest.verifyVisitorAccessDeniedForSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyVisitorAccessDeniedForSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:46 IST" name="verifyVisitorAccessDeniedForSingleLocation" data-provider="testCasesData" finished-at="2023-05-19T18:12:46 IST" duration-ms="400" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-9000 -FA-visitor access- Create ticket for one location and verify the Ticket Status when the location status is Denied, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyVisitorAccessDeniedForSingleLocation, TestCaseID=GAPI-9000, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreateVisitorAccessRequest.createVisitorAccessTicketsForSingleLocation(CreateVisitorAccessRequest.java:772)
at com.gapi.testCases.CreateVisitorAccessRequest.verifyVisitorAccessDeniedForSingleLocation(CreateVisitorAccessRequest.java:562)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyVisitorAccessDeniedForSingleLocation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:46 IST" name="teardown" finished-at="2023-05-19T18:12:46 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyVisitorAccessDeniedForSingleLocation status=FAILURE method=CreateVisitorAccessRequest.verifyVisitorAccessDeniedForSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyVisitorAccessDeniedForSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:46 IST" name="verifyVisitorAccessDeniedForSingleLocation" data-provider="testCasesData" finished-at="2023-05-19T18:12:47 IST" duration-ms="432" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8902-FA-Ticket status Approval denied, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyVisitorAccessDeniedForSingleLocation, TestCaseID=GAPI-8902, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreateVisitorAccessRequest.createVisitorAccessTicketsForSingleLocation(CreateVisitorAccessRequest.java:772)
at com.gapi.testCases.CreateVisitorAccessRequest.verifyVisitorAccessDeniedForSingleLocation(CreateVisitorAccessRequest.java:562)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyVisitorAccessDeniedForSingleLocation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:47 IST" name="teardown" finished-at="2023-05-19T18:12:47 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyVisitorAccessDeniedForSingleLocation status=SKIP method=CreateVisitorAccessRequest.verifyVisitorAccessDeniedForSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyVisitorAccessDeniedForSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:47 IST" name="verifyVisitorAccessDeniedForSingleLocation" data-provider="testCasesData" finished-at="2023-05-19T18:12:47 IST" duration-ms="460" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8902-FA-Ticket status Approval denied, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyVisitorAccessDeniedForSingleLocation, TestCaseID=GAPI-8902, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreateVisitorAccessRequest.createVisitorAccessTicketsForSingleLocation(CreateVisitorAccessRequest.java:772)
at com.gapi.testCases.CreateVisitorAccessRequest.verifyVisitorAccessDeniedForSingleLocation(CreateVisitorAccessRequest.java:562)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyVisitorAccessDeniedForSingleLocation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:47 IST" name="teardown" finished-at="2023-05-19T18:12:47 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyVisitorAccessDeniedForSingleLocation status=FAILURE method=CreateVisitorAccessRequest.verifyVisitorAccessDeniedForSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyVisitorAccessDeniedPendingApprovalForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:47 IST" name="verifyVisitorAccessDeniedPendingApprovalForMultipleLocations" data-provider="testCasesData" finished-at="2023-05-19T18:12:47 IST" duration-ms="387" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8995- FA-visitor access- Create ticket for multiple locations and verify the Ticket Status when one location status is Denied and other Location is Pending for Approval, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyVisitorAccessDeniedPendingApprovalForMultipleLocations, TestCaseID=GAPI-8995, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=COLO 8 Starbucks Cage 8.06, escortLastName=test6, assetName=, locations=Starbucks Cage F150-B, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreateVisitorAccessRequest.createVisitorAccessTicketsForMultipleLocations(CreateVisitorAccessRequest.java:787)
at com.gapi.testCases.CreateVisitorAccessRequest.verifyVisitorAccessDeniedPendingApprovalForMultipleLocations(CreateVisitorAccessRequest.java:613)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyVisitorAccessDeniedPendingApprovalForMultipleLocations -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:47 IST" name="teardown" finished-at="2023-05-19T18:12:47 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyVisitorAccessDeniedPendingApprovalForMultipleLocations status=SKIP method=CreateVisitorAccessRequest.verifyVisitorAccessDeniedPendingApprovalForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyVisitorAccessDeniedPendingApprovalForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:47 IST" name="verifyVisitorAccessDeniedPendingApprovalForMultipleLocations" data-provider="testCasesData" finished-at="2023-05-19T18:12:48 IST" duration-ms="458" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8995- FA-visitor access- Create ticket for multiple locations and verify the Ticket Status when one location status is Denied and other Location is Pending for Approval, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyVisitorAccessDeniedPendingApprovalForMultipleLocations, TestCaseID=GAPI-8995, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=COLO 8 Starbucks Cage 8.06, escortLastName=test6, assetName=, locations=Starbucks Cage F150-B, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreateVisitorAccessRequest.createVisitorAccessTicketsForMultipleLocations(CreateVisitorAccessRequest.java:787)
at com.gapi.testCases.CreateVisitorAccessRequest.verifyVisitorAccessDeniedPendingApprovalForMultipleLocations(CreateVisitorAccessRequest.java:613)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyVisitorAccessDeniedPendingApprovalForMultipleLocations -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:48 IST" name="teardown" finished-at="2023-05-19T18:12:48 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyVisitorAccessDeniedPendingApprovalForMultipleLocations status=FAILURE method=CreateVisitorAccessRequest.verifyVisitorAccessDeniedPendingApprovalForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyVisitorAccessPendingApprovalForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:48 IST" name="verifyVisitorAccessPendingApprovalForMultipleLocations" data-provider="testCasesData" finished-at="2023-05-19T18:12:48 IST" duration-ms="421" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8993-FA-visitor access- Create ticket for multiple locations and verify the Ticket Status when the location status is Pending for Approval for user with no permissions, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyVisitorAccessPendingApprovalForMultipleLocations, TestCaseID=GAPI-8993, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=Starbucks Cage F150-B, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreateVisitorAccessRequest.createVisitorAccessTicketsForMultipleLocations(CreateVisitorAccessRequest.java:787)
at com.gapi.testCases.CreateVisitorAccessRequest.verifyVisitorAccessPendingApprovalForMultipleLocations(CreateVisitorAccessRequest.java:678)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyVisitorAccessPendingApprovalForMultipleLocations -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:48 IST" name="teardown" finished-at="2023-05-19T18:12:48 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyVisitorAccessPendingApprovalForMultipleLocations status=SKIP method=CreateVisitorAccessRequest.verifyVisitorAccessPendingApprovalForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyVisitorAccessPendingApprovalForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:48 IST" name="verifyVisitorAccessPendingApprovalForMultipleLocations" data-provider="testCasesData" finished-at="2023-05-19T18:12:49 IST" duration-ms="414" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8993-FA-visitor access- Create ticket for multiple locations and verify the Ticket Status when the location status is Pending for Approval for user with no permissions, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyVisitorAccessPendingApprovalForMultipleLocations, TestCaseID=GAPI-8993, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=Starbucks Cage F150-B, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreateVisitorAccessRequest.createVisitorAccessTicketsForMultipleLocations(CreateVisitorAccessRequest.java:787)
at com.gapi.testCases.CreateVisitorAccessRequest.verifyVisitorAccessPendingApprovalForMultipleLocations(CreateVisitorAccessRequest.java:678)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyVisitorAccessPendingApprovalForMultipleLocations -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:49 IST" name="teardown" finished-at="2023-05-19T18:12:49 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyVisitorAccessPendingApprovalForMultipleLocations status=FAILURE method=CreateVisitorAccessRequest.verifyVisitorAccessPendingApprovalForMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyVisitorAccessPendingForApprovalForSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:49 IST" name="verifyVisitorAccessPendingForApprovalForSingleLocation" data-provider="testCasesData" finished-at="2023-05-19T18:12:49 IST" duration-ms="402" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8972-FA-visitor access- Create ticket for one location and verify the Ticket Status when the location status is Pending for Approval, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyVisitorAccessPendingForApprovalForSingleLocation, TestCaseID=GAPI-8972, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreateVisitorAccessRequest.createVisitorAccessTicketsForSingleLocation(CreateVisitorAccessRequest.java:772)
at com.gapi.testCases.CreateVisitorAccessRequest.verifyVisitorAccessPendingForApprovalForSingleLocation(CreateVisitorAccessRequest.java:578)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyVisitorAccessPendingForApprovalForSingleLocation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:49 IST" name="teardown" finished-at="2023-05-19T18:12:49 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyVisitorAccessPendingForApprovalForSingleLocation status=SKIP method=CreateVisitorAccessRequest.verifyVisitorAccessPendingForApprovalForSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyVisitorAccessPendingForApprovalForSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:49 IST" name="verifyVisitorAccessPendingForApprovalForSingleLocation" data-provider="testCasesData" finished-at="2023-05-19T18:12:50 IST" duration-ms="394" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8972-FA-visitor access- Create ticket for one location and verify the Ticket Status when the location status is Pending for Approval, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyVisitorAccessPendingForApprovalForSingleLocation, TestCaseID=GAPI-8972, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreateVisitorAccessRequest.createVisitorAccessTicketsForSingleLocation(CreateVisitorAccessRequest.java:772)
at com.gapi.testCases.CreateVisitorAccessRequest.verifyVisitorAccessPendingForApprovalForSingleLocation(CreateVisitorAccessRequest.java:578)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyVisitorAccessPendingForApprovalForSingleLocation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:50 IST" name="teardown" finished-at="2023-05-19T18:12:50 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyVisitorAccessPendingForApprovalForSingleLocation status=FAILURE method=CreateVisitorAccessRequest.verifyVisitorAccessPendingForApprovalForSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyVisitorAccessDeniedApprovedForMultipleLocations(java.util.Map)[pri:1, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:50 IST" name="verifyVisitorAccessDeniedApprovedForMultipleLocations" data-provider="testCasesData" finished-at="2023-05-19T18:12:50 IST" duration-ms="421" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8996-FA-visitor access- Create ticket for multiple locations and verify the Ticket Status when one location status is Approved and other Location is Denied, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyVisitorAccessDeniedApprovedForMultipleLocations, TestCaseID=GAPI-8996, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=COLO 8 Starbucks Cage 8.06, escortLastName=test6, assetName=, locations=Starbucks Cage F150-B, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreateVisitorAccessRequest.createVisitorAccessTicketsForMultipleLocations(CreateVisitorAccessRequest.java:787)
at com.gapi.testCases.CreateVisitorAccessRequest.verifyVisitorAccessDeniedApprovedForMultipleLocations(CreateVisitorAccessRequest.java:639)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyVisitorAccessDeniedApprovedForMultipleLocations -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:50 IST" name="teardown" finished-at="2023-05-19T18:12:50 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyVisitorAccessDeniedApprovedForMultipleLocations status=SKIP method=CreateVisitorAccessRequest.verifyVisitorAccessDeniedApprovedForMultipleLocations(java.util.Map)[pri:1, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyVisitorAccessDeniedApprovedForMultipleLocations(java.util.Map)[pri:1, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:50 IST" name="verifyVisitorAccessDeniedApprovedForMultipleLocations" data-provider="testCasesData" finished-at="2023-05-19T18:12:50 IST" duration-ms="404" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8996-FA-visitor access- Create ticket for multiple locations and verify the Ticket Status when one location status is Approved and other Location is Denied, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyVisitorAccessDeniedApprovedForMultipleLocations, TestCaseID=GAPI-8996, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=COLO 8 Starbucks Cage 8.06, escortLastName=test6, assetName=, locations=Starbucks Cage F150-B, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.CreateVisitorAccessRequest.createVisitorAccessTicketsForMultipleLocations(CreateVisitorAccessRequest.java:787)
at com.gapi.testCases.CreateVisitorAccessRequest.verifyVisitorAccessDeniedApprovedForMultipleLocations(CreateVisitorAccessRequest.java:639)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyVisitorAccessDeniedApprovedForMultipleLocations -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b]" started-at="2023-05-19T18:12:50 IST" name="teardown" finished-at="2023-05-19T18:12:50 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyVisitorAccessDeniedApprovedForMultipleLocations status=FAILURE method=CreateVisitorAccessRequest.verifyVisitorAccessDeniedApprovedForMultipleLocations(java.util.Map)[pri:1, instance:com.gapi.testCases.CreateVisitorAccessRequest@4167d97b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.CreateVisitorAccessRequest -->
      <class name="com.gapi.testCases.GetServiceTicketDetails">
        <test-method is-config="true" signature="generateAuthorizationToken()[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:55:26 IST" name="generateAuthorizationToken" finished-at="2023-05-19T17:55:46 IST" duration-ms="19041" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateAuthorizationToken -->
        <test-method is-config="true" signature="BeforeSuite()[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:55:46 IST" name="BeforeSuite" finished-at="2023-05-19T17:55:46 IST" duration-ms="100" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeSuite -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:55:48 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:55:52 IST" duration-ms="3829" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3776-Verify Get-All- Retrieve the Service Ticket details by filtering with Request Type of  Facilities Request, Category of Fire/Safety , search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3776, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Facilities Request&category=Fire/Safety, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:55:52 IST" name="teardown" finished-at="2023-05-19T17:55:52 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:55:52 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:55:56 IST" duration-ms="3812" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3775-Verify Get-All- Retrieve the Service Ticket by filtering with  Request Type of  Facilities Request, Category of  Electrical  (Ticket Type Customer Support), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3775, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Facilities Request&category=Electrical, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:55:56 IST" name="teardown" finished-at="2023-05-19T17:55:56 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:55:56 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:56:00 IST" duration-ms="3595" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3777Verify Get-All- Retrieve the Service Ticket by filtering with  Request Type of  Facilities Request, Category of Planned Maintenance  (Ticket Type Customer Support), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3777, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Facilities Request&category=Planned Maintenance, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:00 IST" name="teardown" finished-at="2023-05-19T17:56:00 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:00 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:56:03 IST" duration-ms="3695" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3764-Verify Retrieve the Service by filtering with  Request type Planned work and RH ticket type, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3764, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:03 IST" name="teardown" finished-at="2023-05-19T17:56:03 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:03 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:56:07 IST" duration-ms="3591" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3765-Verify Retrieve the Service by filtering with  Request type Urgent work and RH ticket type, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3765, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Urgent Work, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:07 IST" name="teardown" finished-at="2023-05-19T17:56:07 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:07 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:56:10 IST" duration-ms="2931" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3761-Verify Retrieve the Service by filtering with  status completed Filter, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3761, errorMessageType=, standardVisitorBadgeStr=, filters=category=User Account Inquiry&status=Completed&requestType=Account Management, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:10 IST" name="teardown" finished-at="2023-05-19T17:56:10 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:10 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:56:13 IST" duration-ms="2803" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3762-Verify Retrieve the Service by filtering with  status cancelled Filter, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3762, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Account Management&category=User Account Inquiry&status=Cancelled, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:13 IST" name="teardown" finished-at="2023-05-19T17:56:13 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:13 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:56:16 IST" duration-ms="3426" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3774-Verify Get-All- Retrieve the Service Ticket by filtering with  Request Type of  Facilities Request, Category of  Cooling - Office  (Ticket Type Customer Support), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3774, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Facilities Request&category=Cooling - Office, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:16 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:56:19 IST" duration-ms="3451" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3773-Verify Get-All- Retrieve the Service Ticket by filtering with  Request Type of  Facilities Request, Category of  Cooling - Datacenter  (Ticket Type Customer Support), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3773, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Facilities Request&category=Cooling - Datacenter, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:16 IST" name="teardown" finished-at="2023-05-19T17:56:16 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:19 IST" name="teardown" finished-at="2023-05-19T17:56:19 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:19 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:56:23 IST" duration-ms="3586" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3779-Retrieve all Tickets - Verify Offset(page), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3779, errorMessageType=, standardVisitorBadgeStr=, filters=page=1, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:23 IST" name="teardown" finished-at="2023-05-19T17:56:23 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:23 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:56:27 IST" duration-ms="3730" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3778-Retrieve all Tickets -Verify filter - Size(Min 25 to Max 1000), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3778, errorMessageType=, standardVisitorBadgeStr=, filters=size=25, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(GetServiceTicketDetails.java:160)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:27 IST" name="teardown" finished-at="2023-05-19T17:56:27 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SKIP method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:27 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:56:30 IST" duration-ms="3597" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3778-Retrieve all Tickets -Verify filter - Size(Min 25 to Max 1000), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3778, errorMessageType=, standardVisitorBadgeStr=, filters=size=25, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(GetServiceTicketDetails.java:160)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:30 IST" name="teardown" finished-at="2023-05-19T17:56:30 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=FAILURE method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:30 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:56:34 IST" duration-ms="3385" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3760-Retrieve all Tickets in In Progress Status, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3760, errorMessageType=, standardVisitorBadgeStr=, filters=status=In Progress, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:34 IST" name="teardown" finished-at="2023-05-19T17:56:34 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:34 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:56:37 IST" duration-ms="3455" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3759-Retrieve all Tickets in New Status, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3759, errorMessageType=, standardVisitorBadgeStr=, filters=status=New, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(GetServiceTicketDetails.java:132)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:37 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:56:41 IST" duration-ms="3490" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3759-Retrieve all Tickets in New Status, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3759, errorMessageType=, standardVisitorBadgeStr=, filters=status=New, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(GetServiceTicketDetails.java:132)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:37 IST" name="teardown" finished-at="2023-05-19T17:56:37 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SKIP method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:41 IST" name="teardown" finished-at="2023-05-19T17:56:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=FAILURE method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:41 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:56:44 IST" duration-ms="3804" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3771-Verify Get-All- Retrieve the Service Ticket by filtering with  Request Type of  Account Management, Category of User Account Inquiry  (Ticket Type Customer Support), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3771, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Account Management&category=User Account Inquiry, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:44 IST" name="teardown" finished-at="2023-05-19T17:56:44 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:44 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:56:48 IST" duration-ms="3618" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3772-Verify Get-All- Retrieve the Service Ticket by filtering with  Request Type of  Accounts Receivable, Category of General Billing Inquiry  (Ticket Type Customer Support), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3772, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Accounts Receivable&category=General Billing Inquiry, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:48 IST" name="teardown" finished-at="2023-05-19T17:56:48 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:48 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:56:52 IST" duration-ms="3643" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3768-Retrieve all Tickets with  Request Type of  Facilities Request   (Ticket Type Customer Support), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3768, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Facilities Request, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:52 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:56:55 IST" duration-ms="3399" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3763-Verify Retrieve the Service by filtering with  status cancellation requested Filter, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3763, errorMessageType=, standardVisitorBadgeStr=, filters=status=Cancellation Requested, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:52 IST" name="teardown" finished-at="2023-05-19T17:56:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:55 IST" name="teardown" finished-at="2023-05-19T17:56:55 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:56:55 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:57:00 IST" duration-ms="4517" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3767-Retrieve all Tickets with Request Type of Accounts Receivable  (Ticket Type Customer Support), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3767, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Accounts Receivable, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:00 IST" name="teardown" finished-at="2023-05-19T17:57:00 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:00 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:57:03 IST" duration-ms="3376" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3766-Retrieve all Tickets with  Request Type of Account Management   (Ticket Type Customer Support), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3766, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Account Management, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:03 IST" name="teardown" finished-at="2023-05-19T17:57:03 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:03 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:57:07 IST" duration-ms="3502" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3935-GAPI-3930-Verify Get-All- Retrieve the Service Ticket by filtering with  Request Type of Urgent Work and category Existing cross connect or connectivity testing(Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3935, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Urgent Work&category=Existing cross connect or connectivity testing, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:07 IST" name="teardown" finished-at="2023-05-19T17:57:07 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:07 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:57:10 IST" duration-ms="3357" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3929-Verify Get-All- Retrieve the Service Ticket by filtering with  Request Type of Planned Work and category Customer premise cabling(Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3929, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&category=Customer premise cabling, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:10 IST" name="teardown" finished-at="2023-05-19T17:57:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:10 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:57:13 IST" duration-ms="3441" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3928-Verify Get-All- Retrieve the Service Ticket by filtering with  Request Type of Planned Work and category Tape swaps(Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3928, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&category=Tape swaps, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:13 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:57:17 IST" duration-ms="3210" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3927-Verify Get-All- Retrieve the Service Ticket by filtering with  Request Type of Planned Work and category Equipment installation(Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3927, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&category=Equipment installation, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:13 IST" name="teardown" finished-at="2023-05-19T17:57:13 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:17 IST" name="teardown" finished-at="2023-05-19T17:57:17 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:17 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:57:20 IST" duration-ms="3511" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3926-Verify Get-All- Retrieve the Service Ticket by filtering with  Request Type of Planned Work and category Equipment de-installation(Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3926, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&category=Equipment de-installation, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:20 IST" name="teardown" finished-at="2023-05-19T17:57:20 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:20 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:57:24 IST" duration-ms="3526" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3930-Retrieve all Tickets with  Request Type of Urgent Work and category Existing cross connect or connectivity testing(Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3930, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Urgent Work&category=Existing cross connect or connectivity testing, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:24 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:57:27 IST" duration-ms="3574" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3934-Retrieve all Tickets with  Request Type of Urgent Work and category Equipment troubleshoot or replacement (Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3934, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Urgent Work&category=Equipment troubleshoot or replacement, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:24 IST" name="teardown" finished-at="2023-05-19T17:57:24 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:27 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:57:31 IST" duration-ms="3487" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3932-Retrieve all Tickets with  Request Type of Urgent Work and category Power cycle or reboot(Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3932, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Urgent Work&category=Power cycle or reboot, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:27 IST" name="teardown" finished-at="2023-05-19T17:57:27 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:31 IST" name="teardown" finished-at="2023-05-19T17:57:31 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:31 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:57:34 IST" duration-ms="3213" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3758-Retrieve all tickets for a location/site, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3758, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(GetServiceTicketDetails.java:132)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:34 IST" name="teardown" finished-at="2023-05-19T17:57:34 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SKIP method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:34 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:57:37 IST" duration-ms="3264" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3758-Retrieve all tickets for a location/site, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3758, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(GetServiceTicketDetails.java:132)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:37 IST" name="teardown" finished-at="2023-05-19T17:57:37 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=FAILURE method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:37 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:57:41 IST" duration-ms="3535" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3919-Retrieve all Tickets with  Request Type of Planned Work and category Dedicated escort(Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3919, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&category=Dedicated escort, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:41 IST" name="teardown" finished-at="2023-05-19T17:57:41 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:41 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:57:44 IST" duration-ms="3752" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3924-Retrieve all Tickets with  Request Type of Planned Work and category Auditing (Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3924, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&category=Auditing, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:44 IST" name="teardown" finished-at="2023-05-19T17:57:44 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:44 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:57:48 IST" duration-ms="3494" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3933-Retrieve all Tickets with  Request Type of Urgent Work and category KVM (keyboard, video, mouse) assistance(Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3933, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Urgent Work&category=KVM (keyboard, video, mouse) assistance, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:48 IST" name="teardown" finished-at="2023-05-19T17:57:48 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:48 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:57:51 IST" duration-ms="3532" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3931-Retrieve all Tickets with Request Type of Urgent Work and category Other(Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3931, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Urgent Work&category=Other, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:51 IST" name="teardown" finished-at="2023-05-19T17:57:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:51 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:57:55 IST" duration-ms="3400" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3923-Retrieve all Tickets with Request Type of Planned Work and category Other(Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3923, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&category=Other, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:55 IST" name="teardown" finished-at="2023-05-19T17:57:55 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:55 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:57:59 IST" duration-ms="3730" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3922-GAPI-3924-Retrieve all Tickets with  Request Type of Planned Work and category Auditing (Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3922, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&category=Auditing, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:59 IST" name="teardown" finished-at="2023-05-19T17:57:59 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:57:59 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:58:02 IST" duration-ms="3583" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3921-Retrieve all Tickets with  Request Type of Planned Work and category Infrastructure Data Cabling (Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3921, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&category=Customer premise cabling, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:58:02 IST" name="teardown" finished-at="2023-05-19T17:58:02 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:58:02 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:58:06 IST" duration-ms="3548" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3925-Retrieve all Tickets with  Request Type of Planned Work and category Dedicated escort (Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3925, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&category=Dedicated escort, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:58:06 IST" name="teardown" finished-at="2023-05-19T17:58:06 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:58:06 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:58:09 IST" duration-ms="3525" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3918-GAPI-3929-Retrieve all Tickets with  Request Type of Planned Work and category Customer premise cabling (Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3918, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&category=Existing cross connect or connectivity testing, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:58:09 IST" name="teardown" finished-at="2023-05-19T17:58:09 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:58:09 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:58:13 IST" duration-ms="3436" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3917-Retrieve all Tickets with  Request Type of Planned Work and category Connectivity Circuit Testing (Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3917, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&category=Customer premise cabling, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:58:13 IST" name="teardown" finished-at="2023-05-19T17:58:13 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:58:13 IST" name="verifyGetAllWithServiceTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T17:58:16 IST" duration-ms="3612" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3916-Retrieve all Tickets with  Request Type of Planned Work and category Cabinet Power Strip Energizing    (Ticket Type Remote Hands), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithServiceTicketFilters, TestCaseID=GAPI-3916, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&category=Other, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithServiceTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T17:58:16 IST" name="teardown" finished-at="2023-05-19T17:58:16 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithServiceTicketFilters status=SUCCESS method=GetServiceTicketDetails.verifyGetAllWithServiceTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="AfterSuite()[pri:0, instance:com.gapi.testCases.GetServiceTicketDetails@42a15bdc]" started-at="2023-05-19T18:18:40 IST" name="AfterSuite" finished-at="2023-05-19T18:18:40 IST" duration-ms="505" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterSuite -->
      </class> <!-- com.gapi.testCases.GetServiceTicketDetails -->
      <class name="com.gapi.testCases.GetVisitorAccessDetails">
        <test-method retried="true" signature="GetVisitorAccessDetailsInfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb]" started-at="2023-05-19T18:14:13 IST" name="GetVisitorAccessDetailsInfo" data-provider="testCasesData" finished-at="2023-05-19T18:14:14 IST" duration-ms="1255" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-6278-Get  visitor access request details, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=GetVisitorAccessDetailsInfo, TestCaseID=GAPI-6278, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.GetVisitorAccessDetails.GetVisitorAccessDetailsInfo(GetVisitorAccessDetails.java:64)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- GetVisitorAccessDetailsInfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb]" started-at="2023-05-19T18:14:14 IST" name="teardown" finished-at="2023-05-19T18:14:14 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetVisitorAccessDetailsInfo status=SKIP method=GetVisitorAccessDetails.GetVisitorAccessDetailsInfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="GetVisitorAccessDetailsInfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb]" started-at="2023-05-19T18:14:14 IST" name="GetVisitorAccessDetailsInfo" data-provider="testCasesData" finished-at="2023-05-19T18:14:15 IST" duration-ms="478" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-6278-Get  visitor access request details, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=GetVisitorAccessDetailsInfo, TestCaseID=GAPI-6278, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.GetVisitorAccessDetails.GetVisitorAccessDetailsInfo(GetVisitorAccessDetails.java:64)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- GetVisitorAccessDetailsInfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb]" started-at="2023-05-19T18:14:15 IST" name="teardown" finished-at="2023-05-19T18:14:15 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GetVisitorAccessDetailsInfo status=FAILURE method=GetVisitorAccessDetails.GetVisitorAccessDetailsInfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyVisitorAccessGetAccessTickerforSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb]" started-at="2023-05-19T18:14:15 IST" name="verifyVisitorAccessGetAccessTickerforSingleLocation" data-provider="testCasesData" finished-at="2023-05-19T18:14:15 IST" duration-ms="484" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8905 -FA Visitor Access - Subject value enhancement for Single Location, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyVisitorAccessGetAccessTickerforSingleLocation, TestCaseID=GAPI-8905, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getWOIDFromResponse(TestUtilities.java:641)
at com.gapi.testCases.GetVisitorAccessDetails.verifyVisitorAccessGetAccessTickerforSingleLocation(GetVisitorAccessDetails.java:95)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyVisitorAccessGetAccessTickerforSingleLocation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb]" started-at="2023-05-19T18:14:15 IST" name="teardown" finished-at="2023-05-19T18:14:15 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyVisitorAccessGetAccessTickerforSingleLocation status=SKIP method=GetVisitorAccessDetails.verifyVisitorAccessGetAccessTickerforSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyVisitorAccessGetAccessTickerforSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb]" started-at="2023-05-19T18:14:15 IST" name="verifyVisitorAccessGetAccessTickerforSingleLocation" data-provider="testCasesData" finished-at="2023-05-19T18:14:16 IST" duration-ms="454" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8905 -FA Visitor Access - Subject value enhancement for Single Location, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyVisitorAccessGetAccessTickerforSingleLocation, TestCaseID=GAPI-8905, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getWOIDFromResponse(TestUtilities.java:641)
at com.gapi.testCases.GetVisitorAccessDetails.verifyVisitorAccessGetAccessTickerforSingleLocation(GetVisitorAccessDetails.java:95)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyVisitorAccessGetAccessTickerforSingleLocation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb]" started-at="2023-05-19T18:14:16 IST" name="teardown" finished-at="2023-05-19T18:14:16 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyVisitorAccessGetAccessTickerforSingleLocation status=FAILURE method=GetVisitorAccessDetails.verifyVisitorAccessGetAccessTickerforSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyVisitorTitleInGetAccessTicketsMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb]" started-at="2023-05-19T18:14:16 IST" name="verifyVisitorTitleInGetAccessTicketsMultipleLocations" data-provider="testCasesData" finished-at="2023-05-19T18:14:16 IST" duration-ms="454" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8906-FA Visitor Access - Subject value enhancement for Multiple Locations, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyVisitorTitleInGetAccessTicketsMultipleLocations, TestCaseID=GAPI-8906, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=COLO 8 Starbucks Cage 8.06, escortLastName=test6, assetName=, locations=Starbucks Cage F150-B, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getWOIDFromResponse(TestUtilities.java:641)
at com.gapi.testCases.GetVisitorAccessDetails.verifyVisitorTitleInGetAccessTicketsMultipleLocations(GetVisitorAccessDetails.java:145)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyVisitorTitleInGetAccessTicketsMultipleLocations -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb]" started-at="2023-05-19T18:14:16 IST" name="teardown" finished-at="2023-05-19T18:14:16 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyVisitorTitleInGetAccessTicketsMultipleLocations status=SKIP method=GetVisitorAccessDetails.verifyVisitorTitleInGetAccessTicketsMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyVisitorTitleInGetAccessTicketsMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb]" started-at="2023-05-19T18:14:16 IST" name="verifyVisitorTitleInGetAccessTicketsMultipleLocations" data-provider="testCasesData" finished-at="2023-05-19T18:14:17 IST" duration-ms="458" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8906-FA Visitor Access - Subject value enhancement for Multiple Locations, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyVisitorTitleInGetAccessTicketsMultipleLocations, TestCaseID=GAPI-8906, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=COLO 8 Starbucks Cage 8.06, escortLastName=test6, assetName=, locations=Starbucks Cage F150-B, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getWOIDFromResponse(TestUtilities.java:641)
at com.gapi.testCases.GetVisitorAccessDetails.verifyVisitorTitleInGetAccessTicketsMultipleLocations(GetVisitorAccessDetails.java:145)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyVisitorTitleInGetAccessTicketsMultipleLocations -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb]" started-at="2023-05-19T18:14:17 IST" name="teardown" finished-at="2023-05-19T18:14:17 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyVisitorTitleInGetAccessTicketsMultipleLocations status=FAILURE method=GetVisitorAccessDetails.verifyVisitorTitleInGetAccessTicketsMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyVisitorTitleInGetServiceTicketsMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb]" started-at="2023-05-19T18:14:17 IST" name="verifyVisitorTitleInGetServiceTicketsMultipleLocations" data-provider="testCasesData" finished-at="2023-05-19T18:14:17 IST" duration-ms="443" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8971-FA Visitor Access - Title attribute in Get Service tickets End point Response for Multiple Locations, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyVisitorTitleInGetServiceTicketsMultipleLocations, TestCaseID=GAPI-8971, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=COLO 8 Starbucks Cage 8.06, escortLastName=test6, assetName=, locations=Starbucks Cage F150-B, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getWOIDFromResponse(TestUtilities.java:641)
at com.gapi.testCases.GetVisitorAccessDetails.verifyVisitorTitleInGetServiceTicketsMultipleLocations(GetVisitorAccessDetails.java:244)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyVisitorTitleInGetServiceTicketsMultipleLocations -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb]" started-at="2023-05-19T18:14:17 IST" name="teardown" finished-at="2023-05-19T18:14:17 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyVisitorTitleInGetServiceTicketsMultipleLocations status=SKIP method=GetVisitorAccessDetails.verifyVisitorTitleInGetServiceTicketsMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyVisitorTitleInGetServiceTicketsMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb]" started-at="2023-05-19T18:14:17 IST" name="verifyVisitorTitleInGetServiceTicketsMultipleLocations" data-provider="testCasesData" finished-at="2023-05-19T18:14:18 IST" duration-ms="446" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8971-FA Visitor Access - Title attribute in Get Service tickets End point Response for Multiple Locations, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyVisitorTitleInGetServiceTicketsMultipleLocations, TestCaseID=GAPI-8971, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=COLO 8 Starbucks Cage 8.06, escortLastName=test6, assetName=, locations=Starbucks Cage F150-B, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getWOIDFromResponse(TestUtilities.java:641)
at com.gapi.testCases.GetVisitorAccessDetails.verifyVisitorTitleInGetServiceTicketsMultipleLocations(GetVisitorAccessDetails.java:244)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyVisitorTitleInGetServiceTicketsMultipleLocations -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb]" started-at="2023-05-19T18:14:18 IST" name="teardown" finished-at="2023-05-19T18:14:18 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyVisitorTitleInGetServiceTicketsMultipleLocations status=FAILURE method=GetVisitorAccessDetails.verifyVisitorTitleInGetServiceTicketsMultipleLocations(java.util.Map)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyVisitorTitleInGetServiceTicketsSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb]" started-at="2023-05-19T18:14:18 IST" name="verifyVisitorTitleInGetServiceTicketsSingleLocation" data-provider="testCasesData" finished-at="2023-05-19T18:14:18 IST" duration-ms="457" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8970 -FA Visitor Access - Title attribute in get service tickets end point for single location, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyVisitorTitleInGetServiceTicketsSingleLocation, TestCaseID=GAPI-8970, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getWOIDFromResponse(TestUtilities.java:641)
at com.gapi.testCases.GetVisitorAccessDetails.verifyVisitorTitleInGetServiceTicketsSingleLocation(GetVisitorAccessDetails.java:195)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyVisitorTitleInGetServiceTicketsSingleLocation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb]" started-at="2023-05-19T18:14:18 IST" name="teardown" finished-at="2023-05-19T18:14:18 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyVisitorTitleInGetServiceTicketsSingleLocation status=SKIP method=GetVisitorAccessDetails.verifyVisitorTitleInGetServiceTicketsSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyVisitorTitleInGetServiceTicketsSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb]" started-at="2023-05-19T18:14:18 IST" name="verifyVisitorTitleInGetServiceTicketsSingleLocation" data-provider="testCasesData" finished-at="2023-05-19T18:14:19 IST" duration-ms="478" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-8970 -FA Visitor Access - Title attribute in get service tickets end point for single location, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyVisitorTitleInGetServiceTicketsSingleLocation, TestCaseID=GAPI-8970, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getWOIDFromResponse(TestUtilities.java:641)
at com.gapi.testCases.GetVisitorAccessDetails.verifyVisitorTitleInGetServiceTicketsSingleLocation(GetVisitorAccessDetails.java:195)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyVisitorTitleInGetServiceTicketsSingleLocation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb]" started-at="2023-05-19T18:14:19 IST" name="teardown" finished-at="2023-05-19T18:14:19 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyVisitorTitleInGetServiceTicketsSingleLocation status=FAILURE method=GetVisitorAccessDetails.verifyVisitorTitleInGetServiceTicketsSingleLocation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetVisitorAccessDetails@4fbe37eb] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetVisitorAccessDetails -->
      <class name="com.gapi.testCases.CreateCustomerSupportTicket">
        <test-method retried="true" signature="createCustomerSupportTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:03:56 IST" name="createCustomerSupportTicketAndVerifyEndToEndFlow" data-provider="testCasesData" finished-at="2023-05-19T18:04:01 IST" duration-ms="5491" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3842-GAPI-3796-GAPI-3841-Adding multiple Attachment to Existing Customer Support Request -  ( posting 1 attachment at a time), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=createCustomerSupportTicketAndVerifyEndToEndFlow, TestCaseID=GAPI-3842, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Electrical, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.AddCommentsToTheRemoteHandsTicket.addCommentsToTheExistingTicket(AddCommentsToTheRemoteHandsTicket.java:91)
at com.gapi.utilities.TestUtilities.addCommentToTheRequestAndVerify(TestUtilities.java:473)
at com.gapi.testCases.CreateCustomerSupportTicket.createCustomerSupportTicketAndVerifyEndToEndFlow(CreateCustomerSupportTicket.java:109)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createCustomerSupportTicketAndVerifyEndToEndFlow -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:04:01 IST" name="teardown" finished-at="2023-05-19T18:04:01 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createCustomerSupportTicketAndVerifyEndToEndFlow status=SKIP method=CreateCustomerSupportTicket.createCustomerSupportTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="createCustomerSupportTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:04:01 IST" name="createCustomerSupportTicketAndVerifyEndToEndFlow" data-provider="testCasesData" finished-at="2023-05-19T18:04:06 IST" duration-ms="5399" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3842-GAPI-3796-GAPI-3841-Adding multiple Attachment to Existing Customer Support Request -  ( posting 1 attachment at a time), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=createCustomerSupportTicketAndVerifyEndToEndFlow, TestCaseID=GAPI-3842, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Electrical, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.AddCommentsToTheRemoteHandsTicket.addCommentsToTheExistingTicket(AddCommentsToTheRemoteHandsTicket.java:91)
at com.gapi.utilities.TestUtilities.addCommentToTheRequestAndVerify(TestUtilities.java:473)
at com.gapi.testCases.CreateCustomerSupportTicket.createCustomerSupportTicketAndVerifyEndToEndFlow(CreateCustomerSupportTicket.java:109)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createCustomerSupportTicketAndVerifyEndToEndFlow -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:04:06 IST" name="teardown" finished-at="2023-05-19T18:04:06 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createCustomerSupportTicketAndVerifyEndToEndFlow status=FAILURE method=CreateCustomerSupportTicket.createCustomerSupportTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="createCustomerSupportTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:04:06 IST" name="createCustomerSupportTicketAndVerifyEndToEndFlow" data-provider="testCasesData" finished-at="2023-05-19T18:04:13 IST" duration-ms="6613" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3836-GAPI-3837-GAPI-3789-Add multiple Comments to Existing CS Ticket  (user can only send 1 comment at a time), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=createCustomerSupportTicketAndVerifyEndToEndFlow, TestCaseID=GAPI-3836, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Fire/Safety, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.AddCommentsToTheRemoteHandsTicket.addCommentsToTheExistingTicket(AddCommentsToTheRemoteHandsTicket.java:91)
at com.gapi.utilities.TestUtilities.addCommentToTheRequestAndVerify(TestUtilities.java:473)
at com.gapi.testCases.CreateCustomerSupportTicket.createCustomerSupportTicketAndVerifyEndToEndFlow(CreateCustomerSupportTicket.java:109)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createCustomerSupportTicketAndVerifyEndToEndFlow -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:04:13 IST" name="teardown" finished-at="2023-05-19T18:04:13 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createCustomerSupportTicketAndVerifyEndToEndFlow status=SKIP method=CreateCustomerSupportTicket.createCustomerSupportTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="createCustomerSupportTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:04:13 IST" name="createCustomerSupportTicketAndVerifyEndToEndFlow" data-provider="testCasesData" finished-at="2023-05-19T18:04:19 IST" duration-ms="5561" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3836-GAPI-3837-GAPI-3789-Add multiple Comments to Existing CS Ticket  (user can only send 1 comment at a time), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=createCustomerSupportTicketAndVerifyEndToEndFlow, TestCaseID=GAPI-3836, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Fire/Safety, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.AddCommentsToTheRemoteHandsTicket.addCommentsToTheExistingTicket(AddCommentsToTheRemoteHandsTicket.java:91)
at com.gapi.utilities.TestUtilities.addCommentToTheRequestAndVerify(TestUtilities.java:473)
at com.gapi.testCases.CreateCustomerSupportTicket.createCustomerSupportTicketAndVerifyEndToEndFlow(CreateCustomerSupportTicket.java:109)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createCustomerSupportTicketAndVerifyEndToEndFlow -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:04:19 IST" name="teardown" finished-at="2023-05-19T18:04:19 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createCustomerSupportTicketAndVerifyEndToEndFlow status=FAILURE method=CreateCustomerSupportTicket.createCustomerSupportTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="createCustomerSupportTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:04:19 IST" name="createCustomerSupportTicketAndVerifyEndToEndFlow" data-provider="testCasesData" finished-at="2023-05-19T18:04:24 IST" duration-ms="5918" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3833-GAPI-3867-Add Comment to Existing CS ticket submitted by another user at the same company/organization, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=createCustomerSupportTicketAndVerifyEndToEndFlow, TestCaseID=GAPI-3833, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.AddCommentsToTheRemoteHandsTicket.addCommentsToTheExistingTicket(AddCommentsToTheRemoteHandsTicket.java:91)
at com.gapi.utilities.TestUtilities.addCommentToTheRequestAndVerify(TestUtilities.java:473)
at com.gapi.testCases.CreateCustomerSupportTicket.createCustomerSupportTicketAndVerifyEndToEndFlow(CreateCustomerSupportTicket.java:109)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createCustomerSupportTicketAndVerifyEndToEndFlow -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:04:24 IST" name="teardown" finished-at="2023-05-19T18:04:24 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createCustomerSupportTicketAndVerifyEndToEndFlow status=SKIP method=CreateCustomerSupportTicket.createCustomerSupportTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="createCustomerSupportTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:04:24 IST" name="createCustomerSupportTicketAndVerifyEndToEndFlow" data-provider="testCasesData" finished-at="2023-05-19T18:04:30 IST" duration-ms="5507" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3833-GAPI-3867-Add Comment to Existing CS ticket submitted by another user at the same company/organization, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=createCustomerSupportTicketAndVerifyEndToEndFlow, TestCaseID=GAPI-3833, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.AddCommentsToTheRemoteHandsTicket.addCommentsToTheExistingTicket(AddCommentsToTheRemoteHandsTicket.java:91)
at com.gapi.utilities.TestUtilities.addCommentToTheRequestAndVerify(TestUtilities.java:473)
at com.gapi.testCases.CreateCustomerSupportTicket.createCustomerSupportTicketAndVerifyEndToEndFlow(CreateCustomerSupportTicket.java:109)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createCustomerSupportTicketAndVerifyEndToEndFlow -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:04:30 IST" name="teardown" finished-at="2023-05-19T18:04:30 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createCustomerSupportTicketAndVerifyEndToEndFlow status=FAILURE method=CreateCustomerSupportTicket.createCustomerSupportTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="retrieveCustomerSupportTicketAttachmentusingRequestId(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:04:30 IST" name="retrieveCustomerSupportTicketAttachmentusingRequestId" data-provider="testCasesData" finished-at="2023-05-19T18:04:31 IST" duration-ms="1178" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3847-Get all Attachment IDs related to a Customer Support ticket (by Request ID), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=retrieveCustomerSupportTicketAttachmentusingRequestId, TestCaseID=GAPI-3847, errorMessageType=, standardVisitorBadgeStr=, filters=?file_name=sampleattachment.png&requestId=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NoSuchMethodError">
            <message>
              <![CDATA['org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoSuchMethodError: 'org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])'
at org.apache.http.entity.mime.MultipartEntityBuilder.buildEntity(MultipartEntityBuilder.java:219)
at org.apache.http.entity.mime.MultipartEntityBuilder.build(MultipartEntityBuilder.java:240)
at org.apache.http.entity.mime.MultipartEntityBuilder$build$5.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:125)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:130)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getEntity(RestAssuredMultiPartEntity.groovy:58)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getContentType(RestAssuredMultiPartEntity.groovy:89)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at org.codehaus.groovy.runtime.metaclass.MethodMetaProperty$GetBeanMethodMetaProperty.getProperty(MethodMetaProperty.java:76)
at org.codehaus.groovy.runtime.callsite.GetEffectivePogoPropertySite.getProperty(GetEffectivePogoPropertySite.java:85)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetProperty(AbstractCallSite.java:329)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetPropertySafe(AbstractCallSite.java:448)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.shouldApplyContentTypeFromRestAssuredConfigDelegate(RequestSpecificationImpl.groovy:2139)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:194)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2060)
at io.restassured.internal.http.HTTPBuilder.post(HTTPBuilder.java:350)
at io.restassured.internal.http.HTTPBuilder$post$2.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1194)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)
at io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.FilterContext$next.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1686)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1692)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy:180)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy)
at com.gapi.utilities.TestUtilities.postAttachmentRequest(TestUtilities.java:957)
at com.gapi.testCases.CreateCustomerSupportTicket.retrieveCustomerSupportTicketAttachmentusingRequestId(CreateCustomerSupportTicket.java:180)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoSuchMethodError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- retrieveCustomerSupportTicketAttachmentusingRequestId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:04:31 IST" name="teardown" finished-at="2023-05-19T18:04:31 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=retrieveCustomerSupportTicketAttachmentusingRequestId status=SKIP method=CreateCustomerSupportTicket.retrieveCustomerSupportTicketAttachmentusingRequestId(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="retrieveCustomerSupportTicketAttachmentusingRequestId(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:04:31 IST" name="retrieveCustomerSupportTicketAttachmentusingRequestId" data-provider="testCasesData" finished-at="2023-05-19T18:04:32 IST" duration-ms="1006" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3847-Get all Attachment IDs related to a Customer Support ticket (by Request ID), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=retrieveCustomerSupportTicketAttachmentusingRequestId, TestCaseID=GAPI-3847, errorMessageType=, standardVisitorBadgeStr=, filters=?file_name=sampleattachment.png&requestId=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NoSuchMethodError">
            <message>
              <![CDATA['org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoSuchMethodError: 'org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])'
at org.apache.http.entity.mime.MultipartEntityBuilder.buildEntity(MultipartEntityBuilder.java:219)
at org.apache.http.entity.mime.MultipartEntityBuilder.build(MultipartEntityBuilder.java:240)
at org.apache.http.entity.mime.MultipartEntityBuilder$build$5.call(Unknown Source)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getEntity(RestAssuredMultiPartEntity.groovy:58)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getContentType(RestAssuredMultiPartEntity.groovy:89)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at org.codehaus.groovy.runtime.metaclass.MethodMetaProperty$GetBeanMethodMetaProperty.getProperty(MethodMetaProperty.java:76)
at org.codehaus.groovy.runtime.callsite.GetEffectivePogoPropertySite.getProperty(GetEffectivePogoPropertySite.java:85)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetProperty(AbstractCallSite.java:329)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetPropertySafe(AbstractCallSite.java:448)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.shouldApplyContentTypeFromRestAssuredConfigDelegate(RequestSpecificationImpl.groovy:2139)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:194)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2060)
at io.restassured.internal.http.HTTPBuilder.post(HTTPBuilder.java:350)
at io.restassured.internal.http.HTTPBuilder$post$2.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1194)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)
at io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.FilterContext$next.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1686)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1692)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy:180)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy)
at com.gapi.utilities.TestUtilities.postAttachmentRequest(TestUtilities.java:957)
at com.gapi.testCases.CreateCustomerSupportTicket.retrieveCustomerSupportTicketAttachmentusingRequestId(CreateCustomerSupportTicket.java:180)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoSuchMethodError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- retrieveCustomerSupportTicketAttachmentusingRequestId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:04:32 IST" name="teardown" finished-at="2023-05-19T18:04:32 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=retrieveCustomerSupportTicketAttachmentusingRequestId status=FAILURE method=CreateCustomerSupportTicket.retrieveCustomerSupportTicketAttachmentusingRequestId(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCSTicketForInvalidUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:04:32 IST" name="verifyCreateCSTicketForInvalidUser" data-provider="testCasesData" finished-at="2023-05-19T18:04:32 IST" duration-ms="292" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Customer Support with Invalid user RBAC, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyCreateCSTicketForInvalidUser, TestCaseID=Create Cu, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCSTicketForInvalidUser -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:04:32 IST" name="teardown" finished-at="2023-05-19T18:04:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCSTicketForInvalidUser status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCSTicketForInvalidUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:04:32 IST" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:04:37 IST" duration-ms="4353" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Customer Support with Mandatory Fields only, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, TestCaseID=Create Cu, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:04:37 IST" name="teardown" finished-at="2023-05-19T18:04:37 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:04:37 IST" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:04:41 IST" duration-ms="4509" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3787-Create Customer Support Ticket with Request Type as Facilities Request and Category as Electrical, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, TestCaseID=GAPI-3787, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Electrical, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:04:41 IST" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:04:46 IST" duration-ms="4658" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3791-Create Customer Support Ticket with Request Type as Amenities and Category as Elevator, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Amenities, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, TestCaseID=GAPI-3791, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Elevator, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:04:41 IST" name="teardown" finished-at="2023-05-19T18:04:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:04:46 IST" name="teardown" finished-at="2023-05-19T18:04:46 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:04:46 IST" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:04:51 IST" duration-ms="4518" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Customer Support Ticket with Request Type as Account Management and Category as User Account Inquiry, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Account Management, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, TestCaseID=Create Cu, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=User Account Inquiry, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:04:51 IST" name="teardown" finished-at="2023-05-19T18:04:51 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:04:51 IST" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:04:55 IST" duration-ms="4703" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3790-Create Customer Support Ticket with Request Type as Accounts Receivable and Category as General Billing Inquiry, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Accounts Receivable, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, TestCaseID=GAPI-3790, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=General Billing Inquiry, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:04:55 IST" name="teardown" finished-at="2023-05-19T18:04:55 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:04:55 IST" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:05:00 IST" duration-ms="4518" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3792-Create Customer Support Ticket with Request Type as Amenities and Category as Loading Dock, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Amenities, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, TestCaseID=GAPI-3792, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Loading Dock, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:05:00 IST" name="teardown" finished-at="2023-05-19T18:05:00 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:05:00 IST" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:05:05 IST" duration-ms="4832" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3793-Create Customer Support Ticket with Request Type as Amenities and Category as Parking, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Amenities, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, TestCaseID=GAPI-3793, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Parking, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:05:05 IST" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:05:09 IST" duration-ms="4804" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3794-Create Customer Support Ticket with Request Type as Amenities and Category as General Inquiry, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Amenities, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, TestCaseID=GAPI-3794, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=General Inquiry, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:05:05 IST" name="teardown" finished-at="2023-05-19T18:05:05 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:05:09 IST" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:05:14 IST" duration-ms="4620" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3795-Create Customer Support Ticket with Request Type as Facilities Request and Category as Cooling Datacenter, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, TestCaseID=GAPI-3795, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Cooling - Datacenter, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:05:09 IST" name="teardown" finished-at="2023-05-19T18:05:09 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:05:14 IST" name="teardown" finished-at="2023-05-19T18:05:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:05:14 IST" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:05:19 IST" duration-ms="4883" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Customer Support Ticket with Request Type as Facilities Request and Category as Cooling Office, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, TestCaseID=Create Cu, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Cooling - Office, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:05:19 IST" name="teardown" finished-at="2023-05-19T18:05:19 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:05:19 IST" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:05:23 IST" duration-ms="4568" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3798-Create Customer Support Ticket with Request Type as Facilities Request and Category as Fire/Safety, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, TestCaseID=GAPI-3798, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Fire/Safety, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:05:23 IST" name="teardown" finished-at="2023-05-19T18:05:23 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:05:23 IST" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:05:28 IST" duration-ms="4623" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3799-Create Customer Support Ticket with Request Type as Facilities Request and Category as Planned Maintenance, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title  , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, TestCaseID=GAPI-3799, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:05:28 IST" name="teardown" finished-at="2023-05-19T18:05:28 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:05:28 IST" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:05:33 IST" duration-ms="4474" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3797-Create Customer Support Ticket with Request Type as Facilities Request and Category as Electrical, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, TestCaseID=GAPI-3797, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Electrical, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:05:33 IST" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:05:37 IST" duration-ms="4570" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3780-Create a Customer support Ticket - with all valid Mandatory Parameters (site, request type, category, title, description) , search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Amenities, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, TestCaseID=GAPI-3780, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Parking, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:05:33 IST" name="teardown" finished-at="2023-05-19T18:05:33 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:05:37 IST" name="teardown" finished-at="2023-05-19T18:05:37 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:05:37 IST" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:05:41 IST" duration-ms="4319" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3801-GAPI-3781-Create a Customer Support Ticket - with both Mandatory & Optional Parameters (location, customerReference, notificationRecipients)., search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, TestCaseID=GAPI-3801, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=Fire/Safety, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:05:41 IST" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:05:46 IST" duration-ms="4554" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3800-Create a Customer Support Request - with Optional parameter location., search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, TestCaseID=GAPI-3800, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=Fire/Safety, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:05:41 IST" name="teardown" finished-at="2023-05-19T18:05:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:05:46 IST" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:05:51 IST" duration-ms="4515" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create a Customer Support Request - with Optional parameter Customer Reference., search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, TestCaseID=Create a, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Fire/Safety, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:05:46 IST" name="teardown" finished-at="2023-05-19T18:05:46 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:05:51 IST" name="teardown" finished-at="2023-05-19T18:05:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:05:51 IST" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:05:55 IST" duration-ms="4791" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3802-Create a Customer Support Request - with  1 Notification Recipient., search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, TestCaseID=GAPI-3802, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Fire/Safety, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:05:55 IST" name="teardown" finished-at="2023-05-19T18:05:55 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:05:55 IST" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:06:00 IST" duration-ms="4551" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3803-Create a Customer Support Request - with multiple Notification Recipients (comma separated email addresses)., search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com,Qatest@gmai.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Amenities, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, TestCaseID=GAPI-3803, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Parking, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:06:00 IST" name="teardown" finished-at="2023-05-19T18:06:00 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:06:00 IST" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:06:00 IST" duration-ms="259" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create a Customer Support Request - with invalid Notification Recipient email format, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=test, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Amenities, expectedStatusCode=400, ci=, readFlag=, errorMessage=Payload 'notificationRecipients' has an invalid email., methodName=verifyCreateCustomerSupportTicket, TestCaseID=Create a, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Parking, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:06:00 IST" name="teardown" finished-at="2023-05-19T18:06:00 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:06:00 IST" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:06:05 IST" duration-ms="4501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3817-GAPI-3782-GAPI-3788-Create a Customer Support Request - By Request Type -Amenities, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Amenities, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, TestCaseID=GAPI-3817, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Elevator, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:06:05 IST" name="teardown" finished-at="2023-05-19T18:06:05 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:06:05 IST" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:06:09 IST" duration-ms="4647" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3816-Create a Customer Support Request - By Request Type -Facilities Request, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title  , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, TestCaseID=GAPI-3816, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:06:09 IST" name="teardown" finished-at="2023-05-19T18:06:09 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:06:09 IST" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:06:14 IST" duration-ms="4810" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3783-Create a Customer Support Request - valid Title Parameter, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Amenities, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, TestCaseID=GAPI-3783, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Parking, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:06:14 IST" name="teardown" finished-at="2023-05-19T18:06:14 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:06:14 IST" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:06:20 IST" duration-ms="5571" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create a Customer Support Request - with valid Site Parameter, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Amenities, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, TestCaseID=Create a, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Parking, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:06:20 IST" name="teardown" finished-at="2023-05-19T18:06:20 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:06:20 IST" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:06:24 IST" duration-ms="4752" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3786-Create a Customer Support Request -By Request Type -Accounts Receivable, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Accounts Receivable, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, TestCaseID=GAPI-3786, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=General Billing Inquiry, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:06:24 IST" name="teardown" finished-at="2023-05-19T18:06:24 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:06:24 IST" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:06:29 IST" duration-ms="4675" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3785-Create a Customer Support Request -By Request Type -Account Management, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Account Management, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, TestCaseID=GAPI-3785, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=User Account Inquiry, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:06:29 IST" name="teardown" finished-at="2023-05-19T18:06:29 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:06:29 IST" name="verifyCreateCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:06:34 IST" duration-ms="5067" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3784-Create a Customer Support Request - with Description, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=Customer Support Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Amenities, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateCustomerSupportTicket, TestCaseID=GAPI-3784, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Loading Dock, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c]" started-at="2023-05-19T18:06:34 IST" name="teardown" finished-at="2023-05-19T18:06:34 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateCustomerSupportTicket status=SUCCESS method=CreateCustomerSupportTicket.verifyCreateCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateCustomerSupportTicket@a307a8c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.CreateCustomerSupportTicket -->
      <class name="com.gapi.testCases.CreatePOPPOERequest">
        <test-method retried="true" signature="verifyCreatePOPPOERequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePOPPOERequest@14fa86ae]" started-at="2023-05-19T18:12:50 IST" name="verifyCreatePOPPOERequest" data-provider="testCasesData" finished-at="2023-05-19T18:12:51 IST" duration-ms="649" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=true, isBulkRequest=, contactType=Visitor, TestCaseName=GAPI-6265-Create POP/POE Request with all mandatory parameters, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=OSP Access Request Form, ExpectedStatusMessage=OK, visitorPhone=919876543210, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=external1, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreatePOPPOERequest, TestCaseID=GAPI-6265, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CreatePOPPOERequest.verifyCreatePOPPOERequest(CreatePOPPOERequest.java:49)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreatePOPPOERequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePOPPOERequest@14fa86ae]" started-at="2023-05-19T18:12:51 IST" name="teardown" finished-at="2023-05-19T18:12:51 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreatePOPPOERequest status=SKIP method=CreatePOPPOERequest.verifyCreatePOPPOERequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePOPPOERequest@14fa86ae] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreatePOPPOERequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePOPPOERequest@14fa86ae]" started-at="2023-05-19T18:12:51 IST" name="verifyCreatePOPPOERequest" data-provider="testCasesData" finished-at="2023-05-19T18:12:52 IST" duration-ms="466" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=true, isBulkRequest=, contactType=Visitor, TestCaseName=GAPI-6265-Create POP/POE Request with all mandatory parameters, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=OSP Access Request Form, ExpectedStatusMessage=OK, visitorPhone=919876543210, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=external1, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreatePOPPOERequest, TestCaseID=GAPI-6265, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CreatePOPPOERequest.verifyCreatePOPPOERequest(CreatePOPPOERequest.java:49)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreatePOPPOERequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePOPPOERequest@14fa86ae]" started-at="2023-05-19T18:12:52 IST" name="teardown" finished-at="2023-05-19T18:12:52 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreatePOPPOERequest status=FAILURE method=CreatePOPPOERequest.verifyCreatePOPPOERequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePOPPOERequest@14fa86ae] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreatePOPPOERequestForInvalidLegalEntity(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePOPPOERequest@14fa86ae]" started-at="2023-05-19T18:12:52 IST" name="verifyCreatePOPPOERequestForInvalidLegalEntity" data-provider="testCasesData" finished-at="2023-05-19T18:12:52 IST" duration-ms="280" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=true, isBulkRequest=, contactType=web, TestCaseName=Create POP/POE Request with invalid legal entity, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=OSP Access Request Form, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Bytedance Co., Ltd., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=external1, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCreatePOPPOERequestForInvalidLegalEntity, TestCaseID=Create PO, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreatePOPPOERequestForInvalidLegalEntity -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePOPPOERequest@14fa86ae]" started-at="2023-05-19T18:12:52 IST" name="teardown" finished-at="2023-05-19T18:12:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreatePOPPOERequestForInvalidLegalEntity status=SUCCESS method=CreatePOPPOERequest.verifyCreatePOPPOERequestForInvalidLegalEntity(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePOPPOERequest@14fa86ae] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyUploadAttachmentToPOPPOERequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePOPPOERequest@14fa86ae]" started-at="2023-05-19T18:12:52 IST" name="verifyUploadAttachmentToPOPPOERequest" data-provider="testCasesData" finished-at="2023-05-19T18:12:52 IST" duration-ms="435" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=true, isBulkRequest=, contactType=web, TestCaseName=GAPI-6847-Create POP/POE Request and upload attachment, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=OSP Access Request Form, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Bytedance Co., Ltd., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=external1, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyUploadAttachmentToPOPPOERequest, TestCaseID=GAPI-6847, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CreatePOPPOERequest.verifyUploadAttachmentToPOPPOERequest(CreatePOPPOERequest.java:137)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUploadAttachmentToPOPPOERequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePOPPOERequest@14fa86ae]" started-at="2023-05-19T18:12:52 IST" name="teardown" finished-at="2023-05-19T18:12:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyUploadAttachmentToPOPPOERequest status=SKIP method=CreatePOPPOERequest.verifyUploadAttachmentToPOPPOERequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePOPPOERequest@14fa86ae] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyUploadAttachmentToPOPPOERequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePOPPOERequest@14fa86ae]" started-at="2023-05-19T18:12:52 IST" name="verifyUploadAttachmentToPOPPOERequest" data-provider="testCasesData" finished-at="2023-05-19T18:12:53 IST" duration-ms="419" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=true, isBulkRequest=, contactType=web, TestCaseName=GAPI-6847-Create POP/POE Request and upload attachment, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=OSP Access Request Form, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Bytedance Co., Ltd., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=external1, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyUploadAttachmentToPOPPOERequest, TestCaseID=GAPI-6847, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CreatePOPPOERequest.verifyUploadAttachmentToPOPPOERequest(CreatePOPPOERequest.java:137)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUploadAttachmentToPOPPOERequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreatePOPPOERequest@14fa86ae]" started-at="2023-05-19T18:12:53 IST" name="teardown" finished-at="2023-05-19T18:12:53 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyUploadAttachmentToPOPPOERequest status=FAILURE method=CreatePOPPOERequest.verifyUploadAttachmentToPOPPOERequest(java.util.Map)[pri:0, instance:com.gapi.testCases.CreatePOPPOERequest@14fa86ae] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.CreatePOPPOERequest -->
      <class name="com.gapi.testCases.GetShipmentsTicketDetails">
        <test-method signature="getAllShipmentsTicketsInfo()[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:22 IST" name="getAllShipmentsTicketsInfo" finished-at="2023-05-19T18:09:25 IST" duration-ms="3157" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllShipmentsTicketsInfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:25 IST" name="teardown" finished-at="2023-05-19T18:09:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllShipmentsTicketsInfo status=SUCCESS method=GetShipmentsTicketDetails.getAllShipmentsTicketsInfo()[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="retrieveShipmentTicketInfoByInvalidId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:25 IST" name="retrieveShipmentTicketInfoByInvalidId" data-provider="testCasesData" finished-at="2023-05-19T18:09:27 IST" duration-ms="1456" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4033-Retrieve S&R tickets by InValid Request ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=retrieveShipmentTicketInfoByInvalidId, TestCaseID=GAPI-4033, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getWONumberFromResponse(TestUtilities.java:621)
at com.gapi.testCases.GetShipmentsTicketDetails.retrieveShipmentTicketInfoByInvalidId(GetShipmentsTicketDetails.java:182)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- retrieveShipmentTicketInfoByInvalidId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:27 IST" name="teardown" finished-at="2023-05-19T18:09:27 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=retrieveShipmentTicketInfoByInvalidId status=SKIP method=GetShipmentsTicketDetails.retrieveShipmentTicketInfoByInvalidId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="retrieveShipmentTicketInfoByInvalidId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:27 IST" name="retrieveShipmentTicketInfoByInvalidId" data-provider="testCasesData" finished-at="2023-05-19T18:09:28 IST" duration-ms="1540" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4033-Retrieve S&R tickets by InValid Request ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=retrieveShipmentTicketInfoByInvalidId, TestCaseID=GAPI-4033, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- retrieveShipmentTicketInfoByInvalidId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:28 IST" name="teardown" finished-at="2023-05-19T18:09:28 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=retrieveShipmentTicketInfoByInvalidId status=SUCCESS method=GetShipmentsTicketDetails.retrieveShipmentTicketInfoByInvalidId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:28 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:09:32 IST" duration-ms="3110" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4035-Verify Get-All- Retrieve the Shipments Ticket details by filtering with  Site name, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=GAPI-4035, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:32 IST" name="teardown" finished-at="2023-05-19T18:09:32 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:32 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:09:33 IST" duration-ms="1909" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket details by filtering with requestType=Amenities&category=Shipping / Receiving, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=page=0&createdBy=DLR1 Super_Admin&status=Cancelled, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:33 IST" name="teardown" finished-at="2023-05-19T18:09:33 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SKIP method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:33 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:09:35 IST" duration-ms="1870" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket details by filtering with requestType=Amenities&category=Shipping / Receiving, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=page=0&createdBy=DLR1 Super_Admin&status=Cancelled, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:35 IST" name="teardown" finished-at="2023-05-19T18:09:35 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=FAILURE method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:35 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:09:39 IST" duration-ms="3517" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4032-GAPI-4030-Retrieve S&R tickets by Valid Request ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=GAPI-4032, errorMessageType=, standardVisitorBadgeStr=, filters=status=New, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:39 IST" name="teardown" finished-at="2023-05-19T18:09:39 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:39 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:09:41 IST" duration-ms="1921" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket details by filtering with Status as InProgress, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=In Progress, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:41 IST" name="teardown" finished-at="2023-05-19T18:09:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SKIP method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:41 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:09:43 IST" duration-ms="2141" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket details by filtering with Status as InProgress, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=In Progress, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:43 IST" name="teardown" finished-at="2023-05-19T18:09:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=FAILURE method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:43 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:09:45 IST" duration-ms="1913" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket details by filtering with Status as Completed, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=Completed, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:45 IST" name="teardown" finished-at="2023-05-19T18:09:45 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SKIP method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:45 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:09:47 IST" duration-ms="2021" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket details by filtering with Status as Completed, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=Completed, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:47 IST" name="teardown" finished-at="2023-05-19T18:09:47 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=FAILURE method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:47 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:09:49 IST" duration-ms="1797" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket details by filtering with Status as Cancelled, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=Cancelled, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:49 IST" name="teardown" finished-at="2023-05-19T18:09:49 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SKIP method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:49 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:09:50 IST" duration-ms="1776" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket details by filtering with Status as Cancelled, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=Cancelled, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:50 IST" name="teardown" finished-at="2023-05-19T18:09:50 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=FAILURE method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:50 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:09:52 IST" duration-ms="1869" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket details by filtering with requestType as Amenities, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&status=Cancelled, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:52 IST" name="teardown" finished-at="2023-05-19T18:09:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SKIP method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:52 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:09:54 IST" duration-ms="1822" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket details by filtering with requestType as Amenities, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&status=Cancelled, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:54 IST" name="teardown" finished-at="2023-05-19T18:09:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=FAILURE method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:54 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:09:56 IST" duration-ms="1838" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket details by filtering with Category as Shipping / Receiving, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=createdBy=DLR1 Super_Admin&status=In Progress, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:56 IST" name="teardown" finished-at="2023-05-19T18:09:56 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SKIP method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:56 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:09:58 IST" duration-ms="1900" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket details by filtering with Category as Shipping / Receiving, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=createdBy=DLR1 Super_Admin&status=In Progress, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:58 IST" name="teardown" finished-at="2023-05-19T18:09:58 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=FAILURE method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:09:58 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:10:01 IST" duration-ms="3471" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All-Retrieve the Shipments Ticket details by filtering with Limit value as 30, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=size=30, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:01 IST" name="teardown" finished-at="2023-05-19T18:10:01 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:01 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:10:04 IST" duration-ms="3145" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket details by filtering with Offset values as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=page=0, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:04 IST" name="teardown" finished-at="2023-05-19T18:10:04 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:04 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:10:08 IST" duration-ms="3179" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket details by filtering with site as DFW10 and Status as New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&status=New, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:08 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:10:10 IST" duration-ms="2816" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket details by filtering with site as DFW10 and  CreatedBy as John Johnson, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&size=15, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:08 IST" name="teardown" finished-at="2023-05-19T18:10:08 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:10 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:10:12 IST" duration-ms="1788" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket details by filtering with  Site as DFW10 and requestType as Amenities, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&createdBy=DLR1 Super_Admin, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:10 IST" name="teardown" finished-at="2023-05-19T18:10:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:12 IST" name="teardown" finished-at="2023-05-19T18:10:12 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SKIP method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:12 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:10:15 IST" duration-ms="2346" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket details by filtering with  Site as DFW10 and requestType as Amenities, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&createdBy=DLR1 Super_Admin, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:15 IST" name="teardown" finished-at="2023-05-19T18:10:15 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=FAILURE method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:15 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:10:17 IST" duration-ms="1941" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket by filtering with  Site as DFW10 & Category as Shipping / Receiving, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&status=Completed, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:17 IST" name="teardown" finished-at="2023-05-19T18:10:17 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SKIP method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:17 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:10:18 IST" duration-ms="1809" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipments Ticket by filtering with  Site as DFW10 & Category as Shipping / Receiving, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&status=Completed, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:18 IST" name="teardown" finished-at="2023-05-19T18:10:18 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=FAILURE method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:18 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:10:22 IST" duration-ms="3539" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with  Site as DFW10 & Limit as 30, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&size=30, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:22 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:10:25 IST" duration-ms="3185" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with  Site  as DFW10& offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&page=0, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:22 IST" name="teardown" finished-at="2023-05-19T18:10:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:25 IST" name="teardown" finished-at="2023-05-19T18:10:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:25 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:10:27 IST" duration-ms="1783" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with  Status as New and CreatedBy as John Johnson, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&createdBy=DLR1 Super_Admin, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:27 IST" name="teardown" finished-at="2023-05-19T18:10:27 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SKIP method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:27 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:10:29 IST" duration-ms="1863" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with  Status as New and CreatedBy as John Johnson, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&createdBy=DLR1 Super_Admin, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:29 IST" name="teardown" finished-at="2023-05-19T18:10:29 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=FAILURE method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:29 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:10:32 IST" duration-ms="3423" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with  Status as New and Limit as 30, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&size=30, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:32 IST" name="teardown" finished-at="2023-05-19T18:10:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:32 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:10:36 IST" duration-ms="3527" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with  Status as New and offset as 20, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&page=0, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method retried="true" signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:36 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:10:38 IST" duration-ms="1880" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with Site as DFW10 ,Status as In Progres &createdBy as John Johnson, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&status=In Progress&createdBy=DLR1 Super_Admin, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:36 IST" name="teardown" finished-at="2023-05-19T18:10:36 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:38 IST" name="teardown" finished-at="2023-05-19T18:10:38 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SKIP method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:38 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:10:39 IST" duration-ms="1868" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with Site as DFW10 ,Status as In Progres &createdBy as John Johnson, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&status=In Progress&createdBy=DLR1 Super_Admin, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:39 IST" name="teardown" finished-at="2023-05-19T18:10:39 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=FAILURE method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:39 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:10:41 IST" duration-ms="1773" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with Site as DFW10 ,Status as In Progress& Limit as 30, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=In Progress&site=PHX015&size=30, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:41 IST" name="teardown" finished-at="2023-05-19T18:10:41 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SKIP method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:41 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:10:43 IST" duration-ms="2083" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with Site as DFW10 ,Status as In Progress& Limit as 30, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=In Progress&site=PHX015&size=30, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:43 IST" name="teardown" finished-at="2023-05-19T18:10:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=FAILURE method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:43 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:10:45 IST" duration-ms="1834" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with Site as DFW10 ,Status as In Progress&offset as 20, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=In Progress&site=PHX015&page=0, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:45 IST" name="teardown" finished-at="2023-05-19T18:10:45 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SKIP method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:45 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:10:47 IST" duration-ms="2303" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with Site as DFW10 ,Status as In Progress&offset as 20, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=In Progress&site=PHX015&page=0, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:47 IST" name="teardown" finished-at="2023-05-19T18:10:47 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=FAILURE method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:47 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:10:49 IST" duration-ms="1847" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with Site DFW10 ,Status as Cancelled,Limit as 30 & offset as 20, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=size=30&status=Cancelled&page=0&site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:49 IST" name="teardown" finished-at="2023-05-19T18:10:49 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SKIP method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:49 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:10:51 IST" duration-ms="1889" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with Site DFW10 ,Status as Cancelled,Limit as 30 & offset as 20, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=size=30&status=Cancelled&page=0&site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:51 IST" name="teardown" finished-at="2023-05-19T18:10:51 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=FAILURE method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:51 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:10:53 IST" duration-ms="1877" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with Site DFW10 ,Status as Completed,Limit as 30 & offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=Completed&site=PHX015&page=0&size=30, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:53 IST" name="teardown" finished-at="2023-05-19T18:10:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SKIP method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:53 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:10:55 IST" duration-ms="1863" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with Site DFW10 ,Status as Completed,Limit as 30 & offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=Completed&site=PHX015&page=0&size=30, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:55 IST" name="teardown" finished-at="2023-05-19T18:10:55 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=FAILURE method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:55 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:10:57 IST" duration-ms="1874" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with Site as DFW10,Status as New &createdBy as John JohnSon, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&site=PHX015&createdBy=DLR1 Super_Admin, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:57 IST" name="teardown" finished-at="2023-05-19T18:10:57 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SKIP method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:57 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:10:59 IST" duration-ms="1941" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with Site as DFW10,Status as New &createdBy as John JohnSon, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&site=PHX015&createdBy=DLR1 Super_Admin, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:59 IST" name="teardown" finished-at="2023-05-19T18:10:59 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=FAILURE method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:10:59 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:02 IST" duration-ms="3516" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with Site as DFW10,Status as In Progress,Limit as 30 &offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=size=30&status=New&page=0&site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method retried="true" signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:11:02 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:04 IST" duration-ms="1815" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with Site as DFW10,Status as Cancelled,createdBy as John JohnSon,Limit as 30&Offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=size=30&status=Cancelled&page=0&site=PHX015&createdBy=DLR1 Super_Admin, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:11:02 IST" name="teardown" finished-at="2023-05-19T18:11:02 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SUCCESS method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:11:04 IST" name="teardown" finished-at="2023-05-19T18:11:04 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=SKIP method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:11:04 IST" name="verifyGetAllWithShipmentsTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:06 IST" duration-ms="1703" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Shipment Ticket details by filtering with Site as DFW10,Status as Cancelled,createdBy as John JohnSon,Limit as 30&Offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithShipmentsTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=size=30&status=Cancelled&page=0&site=PHX015&createdBy=DLR1 Super_Admin, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(GetShipmentsTicketDetails.java:101)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithShipmentsTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361]" started-at="2023-05-19T18:11:06 IST" name="teardown" finished-at="2023-05-19T18:11:06 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithShipmentsTicketFilters status=FAILURE method=GetShipmentsTicketDetails.verifyGetAllWithShipmentsTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetShipmentsTicketDetails@421e361] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetShipmentsTicketDetails -->
      <class name="com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket">
        <test-method retried="true" signature="AddAttachmentstoRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62]" started-at="2023-05-19T18:17:57 IST" name="AddAttachmentstoRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:17:58 IST" duration-ms="1193" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3992-Submit Remote Hands Request with file size 1024 MB, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=AddAttachmentstoRemoteHandsTicket, TestCaseID=GAPI-3992, errorMessageType=, standardVisitorBadgeStr=, filters=?file_name=sampleattachment.png&requestId=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Power cycle or reboot, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NoSuchMethodError">
            <message>
              <![CDATA['org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoSuchMethodError: 'org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])'
at org.apache.http.entity.mime.MultipartEntityBuilder.buildEntity(MultipartEntityBuilder.java:219)
at org.apache.http.entity.mime.MultipartEntityBuilder.build(MultipartEntityBuilder.java:240)
at org.apache.http.entity.mime.MultipartEntityBuilder$build$5.call(Unknown Source)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getEntity(RestAssuredMultiPartEntity.groovy:58)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getContentType(RestAssuredMultiPartEntity.groovy:89)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at org.codehaus.groovy.runtime.metaclass.MethodMetaProperty$GetBeanMethodMetaProperty.getProperty(MethodMetaProperty.java:76)
at org.codehaus.groovy.runtime.callsite.GetEffectivePogoPropertySite.getProperty(GetEffectivePogoPropertySite.java:85)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetProperty(AbstractCallSite.java:329)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetPropertySafe(AbstractCallSite.java:448)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.shouldApplyContentTypeFromRestAssuredConfigDelegate(RequestSpecificationImpl.groovy:2139)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:194)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2060)
at io.restassured.internal.http.HTTPBuilder.post(HTTPBuilder.java:350)
at io.restassured.internal.http.HTTPBuilder$post$2.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1194)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)
at io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.FilterContext$next.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1686)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1692)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy:180)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy)
at com.gapi.utilities.TestUtilities.postAttachmentRequest(TestUtilities.java:957)
at com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket.AddAttachmentstoRemoteHandsTicket(AddAttachmentsToTheRemoteHandsTicket.java:224)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoSuchMethodError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddAttachmentstoRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62]" started-at="2023-05-19T18:17:58 IST" name="teardown" finished-at="2023-05-19T18:17:58 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AddAttachmentstoRemoteHandsTicket status=SKIP method=AddAttachmentsToTheRemoteHandsTicket.AddAttachmentstoRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="AddAttachmentstoRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62]" started-at="2023-05-19T18:17:58 IST" name="AddAttachmentstoRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:17:59 IST" duration-ms="878" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3992-Submit Remote Hands Request with file size 1024 MB, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=AddAttachmentstoRemoteHandsTicket, TestCaseID=GAPI-3992, errorMessageType=, standardVisitorBadgeStr=, filters=?file_name=sampleattachment.png&requestId=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Power cycle or reboot, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NoSuchMethodError">
            <message>
              <![CDATA['org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoSuchMethodError: 'org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])'
at org.apache.http.entity.mime.MultipartEntityBuilder.buildEntity(MultipartEntityBuilder.java:219)
at org.apache.http.entity.mime.MultipartEntityBuilder.build(MultipartEntityBuilder.java:240)
at org.apache.http.entity.mime.MultipartEntityBuilder$build$5.call(Unknown Source)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getEntity(RestAssuredMultiPartEntity.groovy:58)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getContentType(RestAssuredMultiPartEntity.groovy:89)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at org.codehaus.groovy.runtime.metaclass.MethodMetaProperty$GetBeanMethodMetaProperty.getProperty(MethodMetaProperty.java:76)
at org.codehaus.groovy.runtime.callsite.GetEffectivePogoPropertySite.getProperty(GetEffectivePogoPropertySite.java:85)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetProperty(AbstractCallSite.java:329)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetPropertySafe(AbstractCallSite.java:448)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.shouldApplyContentTypeFromRestAssuredConfigDelegate(RequestSpecificationImpl.groovy:2139)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:194)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2060)
at io.restassured.internal.http.HTTPBuilder.post(HTTPBuilder.java:350)
at io.restassured.internal.http.HTTPBuilder$post$2.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1194)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)
at io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.FilterContext$next.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1686)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1692)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy:180)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy)
at com.gapi.utilities.TestUtilities.postAttachmentRequest(TestUtilities.java:957)
at com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket.AddAttachmentstoRemoteHandsTicket(AddAttachmentsToTheRemoteHandsTicket.java:224)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoSuchMethodError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddAttachmentstoRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62]" started-at="2023-05-19T18:17:59 IST" name="teardown" finished-at="2023-05-19T18:17:59 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AddAttachmentstoRemoteHandsTicket status=FAILURE method=AddAttachmentsToTheRemoteHandsTicket.AddAttachmentstoRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="AddAttachmentstoRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62]" started-at="2023-05-19T18:17:59 IST" name="AddAttachmentstoRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:18:00 IST" duration-ms="911" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4085-Submit Remote Hands Request with Various file types/formats, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=AddAttachmentstoRemoteHandsTicket, TestCaseID=GAPI-4085, errorMessageType=, standardVisitorBadgeStr=, filters=?file_name=sampleattachment.png&requestId=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Power cycle or reboot, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NoSuchMethodError">
            <message>
              <![CDATA['org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoSuchMethodError: 'org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])'
at org.apache.http.entity.mime.MultipartEntityBuilder.buildEntity(MultipartEntityBuilder.java:219)
at org.apache.http.entity.mime.MultipartEntityBuilder.build(MultipartEntityBuilder.java:240)
at org.apache.http.entity.mime.MultipartEntityBuilder$build$5.call(Unknown Source)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getEntity(RestAssuredMultiPartEntity.groovy:58)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getContentType(RestAssuredMultiPartEntity.groovy:89)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at org.codehaus.groovy.runtime.metaclass.MethodMetaProperty$GetBeanMethodMetaProperty.getProperty(MethodMetaProperty.java:76)
at org.codehaus.groovy.runtime.callsite.GetEffectivePogoPropertySite.getProperty(GetEffectivePogoPropertySite.java:85)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetProperty(AbstractCallSite.java:329)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetPropertySafe(AbstractCallSite.java:448)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.shouldApplyContentTypeFromRestAssuredConfigDelegate(RequestSpecificationImpl.groovy:2139)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:194)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2060)
at io.restassured.internal.http.HTTPBuilder.post(HTTPBuilder.java:350)
at io.restassured.internal.http.HTTPBuilder$post$2.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1194)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)
at io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.FilterContext$next.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1686)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1692)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy:180)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy)
at com.gapi.utilities.TestUtilities.postAttachmentRequest(TestUtilities.java:957)
at com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket.AddAttachmentstoRemoteHandsTicket(AddAttachmentsToTheRemoteHandsTicket.java:224)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoSuchMethodError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddAttachmentstoRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62]" started-at="2023-05-19T18:18:00 IST" name="teardown" finished-at="2023-05-19T18:18:00 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AddAttachmentstoRemoteHandsTicket status=SKIP method=AddAttachmentsToTheRemoteHandsTicket.AddAttachmentstoRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="AddAttachmentstoRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62]" started-at="2023-05-19T18:18:00 IST" name="AddAttachmentstoRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:18:00 IST" duration-ms="879" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4085-Submit Remote Hands Request with Various file types/formats, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=AddAttachmentstoRemoteHandsTicket, TestCaseID=GAPI-4085, errorMessageType=, standardVisitorBadgeStr=, filters=?file_name=sampleattachment.png&requestId=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Power cycle or reboot, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NoSuchMethodError">
            <message>
              <![CDATA['org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoSuchMethodError: 'org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])'
at org.apache.http.entity.mime.MultipartEntityBuilder.buildEntity(MultipartEntityBuilder.java:219)
at org.apache.http.entity.mime.MultipartEntityBuilder.build(MultipartEntityBuilder.java:240)
at org.apache.http.entity.mime.MultipartEntityBuilder$build$5.call(Unknown Source)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getEntity(RestAssuredMultiPartEntity.groovy:58)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getContentType(RestAssuredMultiPartEntity.groovy:89)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at org.codehaus.groovy.runtime.metaclass.MethodMetaProperty$GetBeanMethodMetaProperty.getProperty(MethodMetaProperty.java:76)
at org.codehaus.groovy.runtime.callsite.GetEffectivePogoPropertySite.getProperty(GetEffectivePogoPropertySite.java:85)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetProperty(AbstractCallSite.java:329)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetPropertySafe(AbstractCallSite.java:448)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.shouldApplyContentTypeFromRestAssuredConfigDelegate(RequestSpecificationImpl.groovy:2139)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:194)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2060)
at io.restassured.internal.http.HTTPBuilder.post(HTTPBuilder.java:350)
at io.restassured.internal.http.HTTPBuilder$post$2.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1194)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)
at io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.FilterContext$next.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1686)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1692)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy:180)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy)
at com.gapi.utilities.TestUtilities.postAttachmentRequest(TestUtilities.java:957)
at com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket.AddAttachmentstoRemoteHandsTicket(AddAttachmentsToTheRemoteHandsTicket.java:224)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoSuchMethodError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddAttachmentstoRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62]" started-at="2023-05-19T18:18:00 IST" name="teardown" finished-at="2023-05-19T18:18:00 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AddAttachmentstoRemoteHandsTicket status=FAILURE method=AddAttachmentsToTheRemoteHandsTicket.AddAttachmentstoRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="addAttachmentstoRemoteHandsTicketWithOutRequestIDAndfilename(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62]" started-at="2023-05-19T18:18:00 IST" name="addAttachmentstoRemoteHandsTicketWithOutRequestIDAndfilename" data-provider="testCasesData" finished-at="2023-05-19T18:18:01 IST" duration-ms="276" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4087-RH Submit Remote hand without mandatory fields RequestID and filename, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=title sample1, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=, methodName=addAttachmentstoRemoteHandsTicketWithOutRequestIDAndfilename, TestCaseID=GAPI-4087, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addAttachmentstoRemoteHandsTicketWithOutRequestIDAndfilename -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62]" started-at="2023-05-19T18:18:01 IST" name="teardown" finished-at="2023-05-19T18:18:01 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=addAttachmentstoRemoteHandsTicketWithOutRequestIDAndfilename status=SUCCESS method=AddAttachmentsToTheRemoteHandsTicket.addAttachmentstoRemoteHandsTicketWithOutRequestIDAndfilename(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="getAttachmentOfRemoteHandsTicketByID(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62]" started-at="2023-05-19T18:18:01 IST" name="getAttachmentOfRemoteHandsTicketByID" data-provider="testCasesData" finished-at="2023-05-19T18:18:02 IST" duration-ms="915" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4089-Get a single Attachment related to a Remote Hands ticket  (by attachment ID), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAttachmentOfRemoteHandsTicketByID, TestCaseID=GAPI-4089, errorMessageType=, standardVisitorBadgeStr=, filters=?file_name=sampleattachment.png&requestId=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Power cycle or reboot, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NoSuchMethodError">
            <message>
              <![CDATA['org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoSuchMethodError: 'org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])'
at org.apache.http.entity.mime.MultipartEntityBuilder.buildEntity(MultipartEntityBuilder.java:219)
at org.apache.http.entity.mime.MultipartEntityBuilder.build(MultipartEntityBuilder.java:240)
at org.apache.http.entity.mime.MultipartEntityBuilder$build$5.call(Unknown Source)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getEntity(RestAssuredMultiPartEntity.groovy:58)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getContentType(RestAssuredMultiPartEntity.groovy:89)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at org.codehaus.groovy.runtime.metaclass.MethodMetaProperty$GetBeanMethodMetaProperty.getProperty(MethodMetaProperty.java:76)
at org.codehaus.groovy.runtime.callsite.GetEffectivePogoPropertySite.getProperty(GetEffectivePogoPropertySite.java:85)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetProperty(AbstractCallSite.java:329)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetPropertySafe(AbstractCallSite.java:448)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.shouldApplyContentTypeFromRestAssuredConfigDelegate(RequestSpecificationImpl.groovy:2139)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:194)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2060)
at io.restassured.internal.http.HTTPBuilder.post(HTTPBuilder.java:350)
at io.restassured.internal.http.HTTPBuilder$post$2.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1194)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)
at io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.FilterContext$next.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1686)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1692)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy:180)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy)
at com.gapi.utilities.TestUtilities.postAttachmentRequest(TestUtilities.java:957)
at com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket.getAttachmentOfRemoteHandsTicketByID(AddAttachmentsToTheRemoteHandsTicket.java:280)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoSuchMethodError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAttachmentOfRemoteHandsTicketByID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62]" started-at="2023-05-19T18:18:02 IST" name="teardown" finished-at="2023-05-19T18:18:02 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAttachmentOfRemoteHandsTicketByID status=SKIP method=AddAttachmentsToTheRemoteHandsTicket.getAttachmentOfRemoteHandsTicketByID(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAttachmentOfRemoteHandsTicketByID(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62]" started-at="2023-05-19T18:18:02 IST" name="getAttachmentOfRemoteHandsTicketByID" data-provider="testCasesData" finished-at="2023-05-19T18:18:03 IST" duration-ms="957" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4089-Get a single Attachment related to a Remote Hands ticket  (by attachment ID), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAttachmentOfRemoteHandsTicketByID, TestCaseID=GAPI-4089, errorMessageType=, standardVisitorBadgeStr=, filters=?file_name=sampleattachment.png&requestId=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Power cycle or reboot, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NoSuchMethodError">
            <message>
              <![CDATA['org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoSuchMethodError: 'org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])'
at org.apache.http.entity.mime.MultipartEntityBuilder.buildEntity(MultipartEntityBuilder.java:219)
at org.apache.http.entity.mime.MultipartEntityBuilder.build(MultipartEntityBuilder.java:240)
at org.apache.http.entity.mime.MultipartEntityBuilder$build$5.call(Unknown Source)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getEntity(RestAssuredMultiPartEntity.groovy:58)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getContentType(RestAssuredMultiPartEntity.groovy:89)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at org.codehaus.groovy.runtime.metaclass.MethodMetaProperty$GetBeanMethodMetaProperty.getProperty(MethodMetaProperty.java:76)
at org.codehaus.groovy.runtime.callsite.GetEffectivePogoPropertySite.getProperty(GetEffectivePogoPropertySite.java:85)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetProperty(AbstractCallSite.java:329)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetPropertySafe(AbstractCallSite.java:448)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.shouldApplyContentTypeFromRestAssuredConfigDelegate(RequestSpecificationImpl.groovy:2139)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:194)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2060)
at io.restassured.internal.http.HTTPBuilder.post(HTTPBuilder.java:350)
at io.restassured.internal.http.HTTPBuilder$post$2.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1194)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)
at io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.FilterContext$next.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1686)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1692)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy:180)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy)
at com.gapi.utilities.TestUtilities.postAttachmentRequest(TestUtilities.java:957)
at com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket.getAttachmentOfRemoteHandsTicketByID(AddAttachmentsToTheRemoteHandsTicket.java:280)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoSuchMethodError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAttachmentOfRemoteHandsTicketByID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62]" started-at="2023-05-19T18:18:03 IST" name="teardown" finished-at="2023-05-19T18:18:03 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAttachmentOfRemoteHandsTicketByID status=FAILURE method=AddAttachmentsToTheRemoteHandsTicket.getAttachmentOfRemoteHandsTicketByID(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="uploadAttachmentToTheExistingRemoteHandsTicket()[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62]" started-at="2023-05-19T18:18:03 IST" name="uploadAttachmentToTheExistingRemoteHandsTicket" finished-at="2023-05-19T18:18:04 IST" duration-ms="1028" status="SKIP">
          <exception class="java.lang.NoSuchMethodError">
            <message>
              <![CDATA['org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoSuchMethodError: 'org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])'
at org.apache.http.entity.mime.MultipartEntityBuilder.buildEntity(MultipartEntityBuilder.java:219)
at org.apache.http.entity.mime.MultipartEntityBuilder.build(MultipartEntityBuilder.java:240)
at org.apache.http.entity.mime.MultipartEntityBuilder$build$5.call(Unknown Source)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getEntity(RestAssuredMultiPartEntity.groovy:58)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getContentType(RestAssuredMultiPartEntity.groovy:89)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at org.codehaus.groovy.runtime.metaclass.MethodMetaProperty$GetBeanMethodMetaProperty.getProperty(MethodMetaProperty.java:76)
at org.codehaus.groovy.runtime.callsite.GetEffectivePogoPropertySite.getProperty(GetEffectivePogoPropertySite.java:85)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetProperty(AbstractCallSite.java:329)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetPropertySafe(AbstractCallSite.java:448)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.shouldApplyContentTypeFromRestAssuredConfigDelegate(RequestSpecificationImpl.groovy:2139)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:194)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2060)
at io.restassured.internal.http.HTTPBuilder.post(HTTPBuilder.java:350)
at io.restassured.internal.http.HTTPBuilder$post$2.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1194)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)
at io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.FilterContext$next.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1686)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1692)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy:180)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy)
at com.gapi.utilities.TestUtilities.postAttachmentRequest(TestUtilities.java:957)
at com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket.uploadAttachmentToTheExistingTicket(AddAttachmentsToTheRemoteHandsTicket.java:38)
at com.gapi.utilities.TestUtilities.addAttachmentToTheRequestAndVerify(TestUtilities.java:608)
at com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket.uploadAttachmentToTheExistingRemoteHandsTicket(AddAttachmentsToTheRemoteHandsTicket.java:113)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoSuchMethodError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- uploadAttachmentToTheExistingRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62]" started-at="2023-05-19T18:18:04 IST" name="teardown" finished-at="2023-05-19T18:18:04 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=uploadAttachmentToTheExistingRemoteHandsTicket status=SKIP method=AddAttachmentsToTheRemoteHandsTicket.uploadAttachmentToTheExistingRemoteHandsTicket()[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="uploadAttachmentToTheExistingRemoteHandsTicket()[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62]" started-at="2023-05-19T18:18:04 IST" name="uploadAttachmentToTheExistingRemoteHandsTicket" finished-at="2023-05-19T18:18:05 IST" duration-ms="914" status="FAIL">
          <exception class="java.lang.NoSuchMethodError">
            <message>
              <![CDATA['org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoSuchMethodError: 'org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])'
at org.apache.http.entity.mime.MultipartEntityBuilder.buildEntity(MultipartEntityBuilder.java:219)
at org.apache.http.entity.mime.MultipartEntityBuilder.build(MultipartEntityBuilder.java:240)
at org.apache.http.entity.mime.MultipartEntityBuilder$build$5.call(Unknown Source)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getEntity(RestAssuredMultiPartEntity.groovy:58)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getContentType(RestAssuredMultiPartEntity.groovy:89)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at org.codehaus.groovy.runtime.metaclass.MethodMetaProperty$GetBeanMethodMetaProperty.getProperty(MethodMetaProperty.java:76)
at org.codehaus.groovy.runtime.callsite.GetEffectivePogoPropertySite.getProperty(GetEffectivePogoPropertySite.java:85)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetProperty(AbstractCallSite.java:329)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetPropertySafe(AbstractCallSite.java:448)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.shouldApplyContentTypeFromRestAssuredConfigDelegate(RequestSpecificationImpl.groovy:2139)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:194)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2060)
at io.restassured.internal.http.HTTPBuilder.post(HTTPBuilder.java:350)
at io.restassured.internal.http.HTTPBuilder$post$2.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1194)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)
at io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.FilterContext$next.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1686)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1692)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy:180)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy)
at com.gapi.utilities.TestUtilities.postAttachmentRequest(TestUtilities.java:957)
at com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket.uploadAttachmentToTheExistingTicket(AddAttachmentsToTheRemoteHandsTicket.java:38)
at com.gapi.utilities.TestUtilities.addAttachmentToTheRequestAndVerify(TestUtilities.java:608)
at com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket.uploadAttachmentToTheExistingRemoteHandsTicket(AddAttachmentsToTheRemoteHandsTicket.java:113)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoSuchMethodError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- uploadAttachmentToTheExistingRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62]" started-at="2023-05-19T18:18:05 IST" name="teardown" finished-at="2023-05-19T18:18:05 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=uploadAttachmentToTheExistingRemoteHandsTicket status=FAILURE method=AddAttachmentsToTheRemoteHandsTicket.uploadAttachmentToTheExistingRemoteHandsTicket()[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="uploadEmptyTextDocumentToTheValidRemoteHandsRequest()[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62]" started-at="2023-05-19T18:18:05 IST" name="uploadEmptyTextDocumentToTheValidRemoteHandsRequest" finished-at="2023-05-19T18:18:05 IST" duration-ms="854" status="SKIP">
          <exception class="java.lang.NoSuchMethodError">
            <message>
              <![CDATA['org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoSuchMethodError: 'org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])'
at org.apache.http.entity.mime.MultipartEntityBuilder.buildEntity(MultipartEntityBuilder.java:219)
at org.apache.http.entity.mime.MultipartEntityBuilder.build(MultipartEntityBuilder.java:240)
at org.apache.http.entity.mime.MultipartEntityBuilder$build$5.call(Unknown Source)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getEntity(RestAssuredMultiPartEntity.groovy:58)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getContentType(RestAssuredMultiPartEntity.groovy:89)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at org.codehaus.groovy.runtime.metaclass.MethodMetaProperty$GetBeanMethodMetaProperty.getProperty(MethodMetaProperty.java:76)
at org.codehaus.groovy.runtime.callsite.GetEffectivePogoPropertySite.getProperty(GetEffectivePogoPropertySite.java:85)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetProperty(AbstractCallSite.java:329)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetPropertySafe(AbstractCallSite.java:448)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.shouldApplyContentTypeFromRestAssuredConfigDelegate(RequestSpecificationImpl.groovy:2139)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:194)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2060)
at io.restassured.internal.http.HTTPBuilder.post(HTTPBuilder.java:350)
at io.restassured.internal.http.HTTPBuilder$post$2.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1194)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)
at io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.FilterContext$next.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1686)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1692)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy:180)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy)
at com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket.uploadEmptyTextDocumentToTheValidRemoteHandsRequest(AddAttachmentsToTheRemoteHandsTicket.java:194)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoSuchMethodError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- uploadEmptyTextDocumentToTheValidRemoteHandsRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62]" started-at="2023-05-19T18:18:05 IST" name="teardown" finished-at="2023-05-19T18:18:05 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=uploadEmptyTextDocumentToTheValidRemoteHandsRequest status=SKIP method=AddAttachmentsToTheRemoteHandsTicket.uploadEmptyTextDocumentToTheValidRemoteHandsRequest()[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="uploadEmptyTextDocumentToTheValidRemoteHandsRequest()[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62]" started-at="2023-05-19T18:18:05 IST" name="uploadEmptyTextDocumentToTheValidRemoteHandsRequest" finished-at="2023-05-19T18:18:06 IST" duration-ms="870" status="FAIL">
          <exception class="java.lang.NoSuchMethodError">
            <message>
              <![CDATA['org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoSuchMethodError: 'org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])'
at org.apache.http.entity.mime.MultipartEntityBuilder.buildEntity(MultipartEntityBuilder.java:219)
at org.apache.http.entity.mime.MultipartEntityBuilder.build(MultipartEntityBuilder.java:240)
at org.apache.http.entity.mime.MultipartEntityBuilder$build$5.call(Unknown Source)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getEntity(RestAssuredMultiPartEntity.groovy:58)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getContentType(RestAssuredMultiPartEntity.groovy:89)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at org.codehaus.groovy.runtime.metaclass.MethodMetaProperty$GetBeanMethodMetaProperty.getProperty(MethodMetaProperty.java:76)
at org.codehaus.groovy.runtime.callsite.GetEffectivePogoPropertySite.getProperty(GetEffectivePogoPropertySite.java:85)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetProperty(AbstractCallSite.java:329)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetPropertySafe(AbstractCallSite.java:448)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.shouldApplyContentTypeFromRestAssuredConfigDelegate(RequestSpecificationImpl.groovy:2139)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:194)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2060)
at io.restassured.internal.http.HTTPBuilder.post(HTTPBuilder.java:350)
at io.restassured.internal.http.HTTPBuilder$post$2.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1194)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)
at io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.FilterContext$next.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1686)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1692)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy:180)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy)
at com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket.uploadEmptyTextDocumentToTheValidRemoteHandsRequest(AddAttachmentsToTheRemoteHandsTicket.java:194)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoSuchMethodError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- uploadEmptyTextDocumentToTheValidRemoteHandsRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62]" started-at="2023-05-19T18:18:06 IST" name="teardown" finished-at="2023-05-19T18:18:06 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=uploadEmptyTextDocumentToTheValidRemoteHandsRequest status=FAILURE method=AddAttachmentsToTheRemoteHandsTicket.uploadEmptyTextDocumentToTheValidRemoteHandsRequest()[pri:0, instance:com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket@1205bd62] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket -->
      <class name="com.gapi.testCases.CancelFacilityAccessTicket">
        <test-method retried="true" signature="verifyCancelFaclityAccessTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelFacilityAccessTicket@12a94400]" started-at="2023-05-19T18:14:19 IST" name="verifyCancelFaclityAccessTicket" data-provider="testCasesData" finished-at="2023-05-19T18:14:19 IST" duration-ms="786" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Cancel Facility Access Ticket, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCancelFaclityAccessTicket, TestCaseID=Cancel Fa, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getWOIDFromResponse(TestUtilities.java:641)
at com.gapi.testCases.CancelFacilityAccessTicket.verifyCancelFaclityAccessTicket(CancelFacilityAccessTicket.java:33)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCancelFaclityAccessTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CancelFacilityAccessTicket@12a94400]" started-at="2023-05-19T18:14:19 IST" name="teardown" finished-at="2023-05-19T18:14:19 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCancelFaclityAccessTicket status=SKIP method=CancelFacilityAccessTicket.verifyCancelFaclityAccessTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelFacilityAccessTicket@12a94400] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCancelFaclityAccessTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelFacilityAccessTicket@12a94400]" started-at="2023-05-19T18:14:19 IST" name="verifyCancelFaclityAccessTicket" data-provider="testCasesData" finished-at="2023-05-19T18:14:20 IST" duration-ms="445" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Cancel Facility Access Ticket, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyCancelFaclityAccessTicket, TestCaseID=Cancel Fa, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getWOIDFromResponse(TestUtilities.java:641)
at com.gapi.testCases.CancelFacilityAccessTicket.verifyCancelFaclityAccessTicket(CancelFacilityAccessTicket.java:33)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCancelFaclityAccessTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CancelFacilityAccessTicket@12a94400]" started-at="2023-05-19T18:14:20 IST" name="teardown" finished-at="2023-05-19T18:14:20 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCancelFaclityAccessTicket status=FAILURE method=CancelFacilityAccessTicket.verifyCancelFaclityAccessTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelFacilityAccessTicket@12a94400] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetCancelledFaclityAccessTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelFacilityAccessTicket@12a94400]" started-at="2023-05-19T18:14:20 IST" name="verifyGetCancelledFaclityAccessTicket" data-provider="testCasesData" finished-at="2023-05-19T18:14:20 IST" duration-ms="461" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Get Cancelled Faclity Access Ticket, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetCancelledFaclityAccessTicket, TestCaseID=Get Cance, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getWOIDFromResponse(TestUtilities.java:641)
at com.gapi.testCases.CancelFacilityAccessTicket.verifyGetCancelledFaclityAccessTicket(CancelFacilityAccessTicket.java:76)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCancelledFaclityAccessTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CancelFacilityAccessTicket@12a94400]" started-at="2023-05-19T18:14:20 IST" name="teardown" finished-at="2023-05-19T18:14:20 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCancelledFaclityAccessTicket status=SKIP method=CancelFacilityAccessTicket.verifyGetCancelledFaclityAccessTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelFacilityAccessTicket@12a94400] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetCancelledFaclityAccessTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelFacilityAccessTicket@12a94400]" started-at="2023-05-19T18:14:20 IST" name="verifyGetCancelledFaclityAccessTicket" data-provider="testCasesData" finished-at="2023-05-19T18:14:21 IST" duration-ms="466" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Get Cancelled Faclity Access Ticket, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetCancelledFaclityAccessTicket, TestCaseID=Get Cance, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Escorted), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getWOIDFromResponse(TestUtilities.java:641)
at com.gapi.testCases.CancelFacilityAccessTicket.verifyGetCancelledFaclityAccessTicket(CancelFacilityAccessTicket.java:76)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetCancelledFaclityAccessTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CancelFacilityAccessTicket@12a94400]" started-at="2023-05-19T18:14:21 IST" name="teardown" finished-at="2023-05-19T18:14:21 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetCancelledFaclityAccessTicket status=FAILURE method=CancelFacilityAccessTicket.verifyGetCancelledFaclityAccessTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelFacilityAccessTicket@12a94400] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.CancelFacilityAccessTicket -->
      <class name="com.gapi.testCases.CancelCustomerSupportTicket">
        <test-method signature="verifyCancelCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelCustomerSupportTicket@11bb571c]" started-at="2023-05-19T18:15:53 IST" name="verifyCancelCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:15:57 IST" duration-ms="3877" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3942-GAPI-3940-GAPI-3850-GAPI-3854-Cancel Customer Support Ticket in Status - New   (with mandatory fields ID and Cancel Reason as 'Request no longer needed'), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=Request no longer needed, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCancelCustomerSupportTicket, TestCaseID=GAPI-3942, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCancelCustomerSupportTicket -->
        <test-method signature="verifyCancelCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelCustomerSupportTicket@11bb571c]" started-at="2023-05-19T18:15:57 IST" name="verifyCancelCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:16:01 IST" duration-ms="3945" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3941-GAPI-4000-GAPI-3939-GAPI-3849-Cancel Customer Support Ticket in Status - New   (with mandatory fields ID and Cancel Reason as 'Request entered in error'), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=Request entered in error, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCancelCustomerSupportTicket, TestCaseID=GAPI-3941, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCancelCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CancelCustomerSupportTicket@11bb571c]" started-at="2023-05-19T18:15:57 IST" name="teardown" finished-at="2023-05-19T18:15:57 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCancelCustomerSupportTicket status=SUCCESS method=CancelCustomerSupportTicket.verifyCancelCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelCustomerSupportTicket@11bb571c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCancelCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelCustomerSupportTicket@11bb571c]" started-at="2023-05-19T18:16:01 IST" name="verifyCancelCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:16:04 IST" duration-ms="3714" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3851-Cancel Customer Support ticket without specifying Mandatory fields ID or Cancel Reason, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCancelCustomerSupportTicket, TestCaseID=GAPI-3851, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCancelCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CancelCustomerSupportTicket@11bb571c]" started-at="2023-05-19T18:16:01 IST" name="teardown" finished-at="2023-05-19T18:16:01 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCancelCustomerSupportTicket status=SUCCESS method=CancelCustomerSupportTicket.verifyCancelCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelCustomerSupportTicket@11bb571c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CancelCustomerSupportTicket@11bb571c]" started-at="2023-05-19T18:16:04 IST" name="teardown" finished-at="2023-05-19T18:16:04 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCancelCustomerSupportTicket status=SUCCESS method=CancelCustomerSupportTicket.verifyCancelCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelCustomerSupportTicket@11bb571c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.CancelCustomerSupportTicket -->
      <class name="com.gapi.testCases.GetPermissionGroupDetails">
        <test-method signature="createPermissionGroupInfoByGroupId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetPermissionGroupDetails@2a3888c1]" started-at="2023-05-19T18:12:31 IST" name="createPermissionGroupInfoByGroupId" data-provider="testCasesData" finished-at="2023-05-19T18:12:32 IST" duration-ms="992" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5546-Validate Permission Group info using permission id, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=createPermissionGroupInfoByGroupId, TestCaseID=GAPI-5546, errorMessageType=, standardVisitorBadgeStr=, filters=Billing679, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createPermissionGroupInfoByGroupId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetPermissionGroupDetails@2a3888c1]" started-at="2023-05-19T18:12:32 IST" name="teardown" finished-at="2023-05-19T18:12:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createPermissionGroupInfoByGroupId status=SUCCESS method=GetPermissionGroupDetails.createPermissionGroupInfoByGroupId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetPermissionGroupDetails@2a3888c1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getPermissionGroupInfoByGroupId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetPermissionGroupDetails@2a3888c1]" started-at="2023-05-19T18:12:32 IST" name="getPermissionGroupInfoByGroupId" data-provider="testCasesData" finished-at="2023-05-19T18:12:33 IST" duration-ms="896" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5558-Validate if we are able to retrieve Permission Group ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getPermissionGroupInfoByGroupId, TestCaseID=GAPI-5558, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPermissionGroupInfoByGroupId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetPermissionGroupDetails@2a3888c1]" started-at="2023-05-19T18:12:33 IST" name="teardown" finished-at="2023-05-19T18:12:33 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getPermissionGroupInfoByGroupId status=SUCCESS method=GetPermissionGroupDetails.getPermissionGroupInfoByGroupId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetPermissionGroupDetails@2a3888c1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetPermissionGroupDetails -->
      <class name="com.gapi.testCases.GetAccounts">
        <test-method signature="getAccountsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAccounts@389c4eb1]" started-at="2023-05-19T18:11:10 IST" name="getAccountsInformation" data-provider="testCasesData" finished-at="2023-05-19T18:11:10 IST" duration-ms="367" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-6206-6196-Retrieve list of the accounts, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAccountsInformation, TestCaseID=GAPI-6206, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAccountsInformation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAccounts@389c4eb1]" started-at="2023-05-19T18:11:10 IST" name="teardown" finished-at="2023-05-19T18:11:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAccountsInformation status=SUCCESS method=GetAccounts.getAccountsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAccounts@389c4eb1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetAccounts -->
      <class name="com.gapi.testCases.GetCities">
        <test-method signature="getCitiesInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCities@34f6515b]" started-at="2023-05-19T18:11:19 IST" name="getCitiesInformation" data-provider="testCasesData" finished-at="2023-05-19T18:11:20 IST" duration-ms="845" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Validate if the Response has cities field in addition to the 200 code, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getCitiesInformation, TestCaseID=Validate, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWaQAM, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCitiesInformation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCities@34f6515b]" started-at="2023-05-19T18:11:20 IST" name="teardown" finished-at="2023-05-19T18:11:20 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCitiesInformation status=SUCCESS method=GetCities.getCitiesInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCities@34f6515b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCitiesInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCities@34f6515b]" started-at="2023-05-19T18:11:20 IST" name="getCitiesInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:20 IST" duration-ms="584" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5385-Retrieve Locations for Customer - Cities using account id,Region&Country, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCitiesInformationUsingDifferentFilters, TestCaseID=GAPI-5385, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWbQAM&region=North America&country=United States&city=Lithia Springs, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCitiesInformationUsingDifferentFilters -->
        <test-method signature="getCitiesInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCities@34f6515b]" started-at="2023-05-19T18:11:20 IST" name="getCitiesInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:21 IST" duration-ms="595" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5386-Retrieve Locations for Customer - Cities using account id,Market &Country, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCitiesInformationUsingDifferentFilters, TestCaseID=GAPI-5386, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWbQAM&country=United States&city=Lithia Springs&market=Atlanta, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCitiesInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCities@34f6515b]" started-at="2023-05-19T18:11:20 IST" name="teardown" finished-at="2023-05-19T18:11:20 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCitiesInformationUsingDifferentFilters status=SUCCESS method=GetCities.getCitiesInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCities@34f6515b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCities@34f6515b]" started-at="2023-05-19T18:11:21 IST" name="teardown" finished-at="2023-05-19T18:11:21 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCitiesInformationUsingDifferentFilters status=SUCCESS method=GetCities.getCitiesInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCities@34f6515b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCitiesInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCities@34f6515b]" started-at="2023-05-19T18:11:21 IST" name="getCitiesInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:22 IST" duration-ms="793" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5387-Retrieve Locations for Customer - Cities using account id,Region,Country &Market, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCitiesInformationUsingDifferentFilters, TestCaseID=GAPI-5387, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWbQAM&region=North America&country=United States&market=Atlanta, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCitiesInformationUsingDifferentFilters -->
        <test-method signature="getCitiesInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCities@34f6515b]" started-at="2023-05-19T18:11:22 IST" name="getCitiesInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:22 IST" duration-ms="607" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5384-Retrieve Locations for Customer - Cities using account id,Region &Market, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCitiesInformationUsingDifferentFilters, TestCaseID=GAPI-5384, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWbQAM&region=North America&market=Atlanta, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCitiesInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCities@34f6515b]" started-at="2023-05-19T18:11:22 IST" name="teardown" finished-at="2023-05-19T18:11:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCitiesInformationUsingDifferentFilters status=SUCCESS method=GetCities.getCitiesInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCities@34f6515b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCities@34f6515b]" started-at="2023-05-19T18:11:22 IST" name="teardown" finished-at="2023-05-19T18:11:22 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCitiesInformationUsingDifferentFilters status=SUCCESS method=GetCities.getCitiesInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCities@34f6515b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCitiesInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCities@34f6515b]" started-at="2023-05-19T18:11:22 IST" name="getCitiesInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:23 IST" duration-ms="572" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5383-Retrieve Locations for Customer - Cities using account id &Country, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCitiesInformationUsingDifferentFilters, TestCaseID=GAPI-5383, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWbQAM&country=United States, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCitiesInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCities@34f6515b]" started-at="2023-05-19T18:11:23 IST" name="teardown" finished-at="2023-05-19T18:11:23 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCitiesInformationUsingDifferentFilters status=SUCCESS method=GetCities.getCitiesInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCities@34f6515b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCitiesInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCities@34f6515b]" started-at="2023-05-19T18:11:23 IST" name="getCitiesInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:24 IST" duration-ms="555" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5382-Retrieve Locations for Customer - Cities using account id &Region, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCitiesInformationUsingDifferentFilters, TestCaseID=GAPI-5382, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWbQAM&region=North America, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCitiesInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCities@34f6515b]" started-at="2023-05-19T18:11:24 IST" name="teardown" finished-at="2023-05-19T18:11:24 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCitiesInformationUsingDifferentFilters status=SUCCESS method=GetCities.getCitiesInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCities@34f6515b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetCities -->
      <class name="com.gapi.testCases.GetReportsRequest">
        <test-method signature="getAllSecurityPlannedReportsMaintenanceSortBy(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:02 IST" name="getAllSecurityPlannedReportsMaintenanceSortBy" data-provider="testCasesData" finished-at="2023-05-19T18:12:03 IST" duration-ms="860" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5609-Get All SecurityPlanned Site  Maintenance Reports - Sort By- Site, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=85ed98e51bdea8d46eada9bfbd4bcb13, readFlag=, errorMessage=, methodName=getAllSecurityPlannedReportsMaintenanceSortBy, TestCaseID=GAPI-5609, errorMessageType=, standardVisitorBadgeStr=, filters=?sort=site,desc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSecurityPlannedReportsMaintenanceSortBy -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:03 IST" name="teardown" finished-at="2023-05-19T18:12:03 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSecurityPlannedReportsMaintenanceSortBy status=SUCCESS method=GetReportsRequest.getAllSecurityPlannedReportsMaintenanceSortBy(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSecurityPlannedReportsMaintenanceSortBy(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:03 IST" name="getAllSecurityPlannedReportsMaintenanceSortBy" data-provider="testCasesData" finished-at="2023-05-19T18:12:04 IST" duration-ms="895" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5610-GAPI-5602-Get All SecurityPlanned Site  Maintenance Reports -Sort By - Location, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=85ed98e51bdea8d46eada9bfbd4bcb13, readFlag=, errorMessage=, methodName=getAllSecurityPlannedReportsMaintenanceSortBy, TestCaseID=GAPI-5610, errorMessageType=, standardVisitorBadgeStr=, filters=?sort=location,desc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSecurityPlannedReportsMaintenanceSortBy -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:04 IST" name="teardown" finished-at="2023-05-19T18:12:04 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSecurityPlannedReportsMaintenanceSortBy status=SUCCESS method=GetReportsRequest.getAllSecurityPlannedReportsMaintenanceSortBy(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSecurityPlannedReportsMaintenanceSortBy(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:04 IST" name="getAllSecurityPlannedReportsMaintenanceSortBy" data-provider="testCasesData" finished-at="2023-05-19T18:12:04 IST" duration-ms="856" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5612-Get All SecurityPlanned Site  Maintenance Reports- Sort By - Report Name, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=85ed98e51bdea8d46eada9bfbd4bcb13, readFlag=, errorMessage=, methodName=getAllSecurityPlannedReportsMaintenanceSortBy, TestCaseID=GAPI-5612, errorMessageType=, standardVisitorBadgeStr=, filters=?sort=shortDescription,asc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSecurityPlannedReportsMaintenanceSortBy -->
        <test-method signature="getAllSecurityPlannedReportsMaintenanceSortBy(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:04 IST" name="getAllSecurityPlannedReportsMaintenanceSortBy" data-provider="testCasesData" finished-at="2023-05-19T18:12:05 IST" duration-ms="793" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5613-Get All SecurityPlanned Site  Maintenance Reports- Sort By - Report Start Date, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=85ed98e51bdea8d46eada9bfbd4bcb13, readFlag=, errorMessage=, methodName=getAllSecurityPlannedReportsMaintenanceSortBy, TestCaseID=GAPI-5613, errorMessageType=, standardVisitorBadgeStr=, filters=?sort=startdate,desc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSecurityPlannedReportsMaintenanceSortBy -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:04 IST" name="teardown" finished-at="2023-05-19T18:12:04 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSecurityPlannedReportsMaintenanceSortBy status=SUCCESS method=GetReportsRequest.getAllSecurityPlannedReportsMaintenanceSortBy(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:05 IST" name="teardown" finished-at="2023-05-19T18:12:05 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSecurityPlannedReportsMaintenanceSortBy status=SUCCESS method=GetReportsRequest.getAllSecurityPlannedReportsMaintenanceSortBy(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllSecurityPlannedReportsMaintenanceSortBy(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:05 IST" name="getAllSecurityPlannedReportsMaintenanceSortBy" data-provider="testCasesData" finished-at="2023-05-19T18:12:06 IST" duration-ms="860" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5614-Get All SecurityPlanned Site  Maintenance Reports- Sort By - Report End Date, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=85ed98e51bdea8d46eada9bfbd4bcb13, readFlag=, errorMessage=, methodName=getAllSecurityPlannedReportsMaintenanceSortBy, TestCaseID=GAPI-5614, errorMessageType=, standardVisitorBadgeStr=, filters=?sort=enddate,asc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllSecurityPlannedReportsMaintenanceSortBy -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:06 IST" name="teardown" finished-at="2023-05-19T18:12:06 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllSecurityPlannedReportsMaintenanceSortBy status=SUCCESS method=GetReportsRequest.getAllSecurityPlannedReportsMaintenanceSortBy(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getDCIMReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:06 IST" name="getDCIMReportsSortedWithDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:12:07 IST" duration-ms="1163" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5598-Sort the DCIM Report by Start Date, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-51@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=91aa7e54132e7600a501b7a66144b036, readFlag=, errorMessage=, methodName=getDCIMReportsSortedWithDifferentFilters, TestCaseID=GAPI-5598, errorMessageType=, standardVisitorBadgeStr=, filters=?startDate,asc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getDCIMReportsSortedWithDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:07 IST" name="teardown" finished-at="2023-05-19T18:12:07 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getDCIMReportsSortedWithDifferentFilters status=SUCCESS method=GetReportsRequest.getDCIMReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getDCIMReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:07 IST" name="getDCIMReportsSortedWithDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:12:08 IST" duration-ms="1081" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5597-Sort the DCIM Report by Name, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-51@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=91aa7e54132e7600a501b7a66144b036, readFlag=, errorMessage=, methodName=getDCIMReportsSortedWithDifferentFilters, TestCaseID=GAPI-5597, errorMessageType=, standardVisitorBadgeStr=, filters=?name,asc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getDCIMReportsSortedWithDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:08 IST" name="teardown" finished-at="2023-05-19T18:12:08 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getDCIMReportsSortedWithDifferentFilters status=SUCCESS method=GetReportsRequest.getDCIMReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getDCIMReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:08 IST" name="getDCIMReportsSortedWithDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:12:10 IST" duration-ms="1159" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5596-Sort the DCIM Report by Type, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-51@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=91aa7e54132e7600a501b7a66144b036, readFlag=, errorMessage=, methodName=getDCIMReportsSortedWithDifferentFilters, TestCaseID=GAPI-5596, errorMessageType=, standardVisitorBadgeStr=, filters=?type,asc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getDCIMReportsSortedWithDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:10 IST" name="teardown" finished-at="2023-05-19T18:12:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getDCIMReportsSortedWithDifferentFilters status=SUCCESS method=GetReportsRequest.getDCIMReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getDCIMReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:10 IST" name="getDCIMReportsSortedWithDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:12:10 IST" duration-ms="891" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5595-Sort the DCIM Report by Location, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-51@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=91aa7e54132e7600a501b7a66144b036, readFlag=, errorMessage=, methodName=getDCIMReportsSortedWithDifferentFilters, TestCaseID=GAPI-5595, errorMessageType=, standardVisitorBadgeStr=, filters=?location,asc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getDCIMReportsSortedWithDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:10 IST" name="teardown" finished-at="2023-05-19T18:12:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getDCIMReportsSortedWithDifferentFilters status=SUCCESS method=GetReportsRequest.getDCIMReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getDCIMReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:10 IST" name="getDCIMReportsSortedWithDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:12:12 IST" duration-ms="1147" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5594-Sort the DCIM Report by Site, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-51@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=91aa7e54132e7600a501b7a66144b036, readFlag=, errorMessage=, methodName=getDCIMReportsSortedWithDifferentFilters, TestCaseID=GAPI-5594, errorMessageType=, standardVisitorBadgeStr=, filters=?site,asc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getDCIMReportsSortedWithDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:12 IST" name="teardown" finished-at="2023-05-19T18:12:12 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getDCIMReportsSortedWithDifferentFilters status=SUCCESS method=GetReportsRequest.getDCIMReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="getDownloadReportByDCIMID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:12 IST" name="getDownloadReportByDCIMID" data-provider="testCasesData" finished-at="2023-05-19T18:12:14 IST" duration-ms="2163" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5616-Download Report by DCIM ID, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-51@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=91aa7e54132e7600a501b7a66144b036, readFlag=, errorMessage=, methodName=getDownloadReportByDCIMID, TestCaseID=GAPI-5616, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [401]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [401]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.GetReportsRequest.getDownloadReportByDCIMID(GetReportsRequest.java:236)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getDownloadReportByDCIMID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:14 IST" name="teardown" finished-at="2023-05-19T18:12:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getDownloadReportByDCIMID status=SKIP method=GetReportsRequest.getDownloadReportByDCIMID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getDownloadReportByDCIMID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:14 IST" name="getDownloadReportByDCIMID" data-provider="testCasesData" finished-at="2023-05-19T18:12:18 IST" duration-ms="4190" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5616-Download Report by DCIM ID, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-51@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=91aa7e54132e7600a501b7a66144b036, readFlag=, errorMessage=, methodName=getDownloadReportByDCIMID, TestCaseID=GAPI-5616, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getDownloadReportByDCIMID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:18 IST" name="teardown" finished-at="2023-05-19T18:12:18 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getDownloadReportByDCIMID status=SUCCESS method=GetReportsRequest.getDownloadReportByDCIMID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getDownloadReportBySecurityID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:18 IST" name="getDownloadReportBySecurityID" data-provider="testCasesData" finished-at="2023-05-19T18:12:21 IST" duration-ms="3111" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5618-Download Report by Security ID, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-51@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=91aa7e54132e7600a501b7a66144b036, readFlag=, errorMessage=, methodName=getDownloadReportBySecurityID, TestCaseID=GAPI-5618, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getDownloadReportBySecurityID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:21 IST" name="teardown" finished-at="2023-05-19T18:12:21 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getDownloadReportBySecurityID status=SUCCESS method=GetReportsRequest.getDownloadReportBySecurityID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getReportsDetails()[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:21 IST" name="getReportsDetails" finished-at="2023-05-19T18:12:22 IST" duration-ms="1237" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getReportsDetails -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:22 IST" name="teardown" finished-at="2023-05-19T18:12:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getReportsDetails status=SUCCESS method=GetReportsRequest.getReportsDetails()[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getReportsDetailsSortBySite(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:22 IST" name="getReportsDetailsSortBySite" data-provider="testCasesData" finished-at="2023-05-19T18:12:22 IST" duration-ms="141" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5601-Get All Security Reports - Sort By- Site, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-uat3@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=91aa7e54132e7600a501b7a66144b036, readFlag=, errorMessage=, methodName=getReportsDetailsSortBySite, TestCaseID=GAPI-5601, errorMessageType=, standardVisitorBadgeStr=, filters=?sort=site,desc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getReportsDetailsSortBySite -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:22 IST" name="teardown" finished-at="2023-05-19T18:12:22 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getReportsDetailsSortBySite status=SUCCESS method=GetReportsRequest.getReportsDetailsSortBySite(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getReportsDetailsusingFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:22 IST" name="getReportsDetailsusingFilters" data-provider="testCasesData" finished-at="2023-05-19T18:12:23 IST" duration-ms="834" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5592-Report List - DCIM, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-51@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=91aa7e54132e7600a501b7a66144b036, readFlag=, errorMessage=, methodName=getReportsDetailsusingFilters, TestCaseID=GAPI-5592, errorMessageType=, standardVisitorBadgeStr=, filters=?reportType=DCIM, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getReportsDetailsusingFilters -->
        <test-method retried="true" signature="getReportsDetailsusingFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:23 IST" name="getReportsDetailsusingFilters" data-provider="testCasesData" finished-at="2023-05-19T18:12:24 IST" duration-ms="956" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5593-Report List - Security, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-51@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=91aa7e54132e7600a501b7a66144b036, readFlag=, errorMessage=, methodName=getReportsDetailsusingFilters, TestCaseID=GAPI-5593, errorMessageType=, standardVisitorBadgeStr=, filters=?reportType=Security, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.GetReportsRequest.getReportsDetailsusingFilters(GetReportsRequest.java:168)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getReportsDetailsusingFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:23 IST" name="teardown" finished-at="2023-05-19T18:12:23 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getReportsDetailsusingFilters status=SUCCESS method=GetReportsRequest.getReportsDetailsusingFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:24 IST" name="teardown" finished-at="2023-05-19T18:12:24 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getReportsDetailsusingFilters status=SKIP method=GetReportsRequest.getReportsDetailsusingFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getReportsDetailsusingFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:24 IST" name="getReportsDetailsusingFilters" data-provider="testCasesData" finished-at="2023-05-19T18:12:25 IST" duration-ms="888" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5593-Report List - Security, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-51@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=91aa7e54132e7600a501b7a66144b036, readFlag=, errorMessage=, methodName=getReportsDetailsusingFilters, TestCaseID=GAPI-5593, errorMessageType=, standardVisitorBadgeStr=, filters=?reportType=Security, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getReportsDetailsusingFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:25 IST" name="teardown" finished-at="2023-05-19T18:12:25 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getReportsDetailsusingFilters status=SUCCESS method=GetReportsRequest.getReportsDetailsusingFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getReportsWorkOrdersDetails()[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:25 IST" name="getReportsWorkOrdersDetails" finished-at="2023-05-19T18:12:26 IST" duration-ms="1240" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getReportsWorkOrdersDetails -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:26 IST" name="teardown" finished-at="2023-05-19T18:12:26 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getReportsWorkOrdersDetails status=SUCCESS method=GetReportsRequest.getReportsWorkOrdersDetails()[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="invalidReportByDCIMID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:26 IST" name="invalidReportByDCIMID" data-provider="testCasesData" finished-at="2023-05-19T18:12:27 IST" duration-ms="389" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5617-Download Report - DCIM By invalid ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Internal Server Error, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=500.0, ci=, readFlag=, errorMessage=, methodName=invalidReportByDCIMID, TestCaseID=GAPI-5617, errorMessageType=, standardVisitorBadgeStr=, filters=?sort=enddate,asc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidReportByDCIMID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:27 IST" name="teardown" finished-at="2023-05-19T18:12:27 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=invalidReportByDCIMID status=SUCCESS method=GetReportsRequest.invalidReportByDCIMID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="invalidReportBySecurityID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:27 IST" name="invalidReportBySecurityID" data-provider="testCasesData" finished-at="2023-05-19T18:12:27 IST" duration-ms="394" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5619-Download Report - Security By invalid ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Internal Server Error, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=500.0, ci=, readFlag=, errorMessage=, methodName=invalidReportBySecurityID, TestCaseID=GAPI-5619, errorMessageType=, standardVisitorBadgeStr=, filters=?sort=enddate,asc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidReportBySecurityID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:27 IST" name="teardown" finished-at="2023-05-19T18:12:27 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=invalidReportBySecurityID status=SUCCESS method=GetReportsRequest.invalidReportBySecurityID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="securityReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:27 IST" name="securityReportsSortedWithDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:12:28 IST" duration-ms="720" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5607-Get All Security Reports- Sort By - ReportID, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-uat3@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=979fde4013dfe300edd63c928144b05d, readFlag=, errorMessage=, methodName=securityReportsSortedWithDifferentFilters, TestCaseID=GAPI-5607, errorMessageType=, standardVisitorBadgeStr=, filters=?reportType=Security&reportID=CUS1750153, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- securityReportsSortedWithDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:28 IST" name="teardown" finished-at="2023-05-19T18:12:28 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=securityReportsSortedWithDifferentFilters status=SUCCESS method=GetReportsRequest.securityReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="securityReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:28 IST" name="securityReportsSortedWithDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:12:29 IST" duration-ms="727" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5606-Get All Security Reports- Sort By - Report End Date, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-uat3@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=979fde4013dfe300edd63c928144b05d, readFlag=, errorMessage=, methodName=securityReportsSortedWithDifferentFilters, TestCaseID=GAPI-5606, errorMessageType=, standardVisitorBadgeStr=, filters=?reportType=Security&EndDate.desc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- securityReportsSortedWithDifferentFilters -->
        <test-method signature="securityReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:29 IST" name="securityReportsSortedWithDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:12:29 IST" duration-ms="723" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5605-Get All Security Reports- Sort By - Report Start Date, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-uat3@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=979fde4013dfe300edd63c928144b05d, readFlag=, errorMessage=, methodName=securityReportsSortedWithDifferentFilters, TestCaseID=GAPI-5605, errorMessageType=, standardVisitorBadgeStr=, filters=?reportType=Security&StartDate.asc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- securityReportsSortedWithDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:29 IST" name="teardown" finished-at="2023-05-19T18:12:29 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=securityReportsSortedWithDifferentFilters status=SUCCESS method=GetReportsRequest.securityReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="securityReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:29 IST" name="securityReportsSortedWithDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:12:30 IST" duration-ms="743" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5604-Get All Security Reports- Sort By - Report Name, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-uat3@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=979fde4013dfe300edd63c928144b05d, readFlag=, errorMessage=, methodName=securityReportsSortedWithDifferentFilters, TestCaseID=GAPI-5604, errorMessageType=, standardVisitorBadgeStr=, filters=?reportType=Security&name.asc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- securityReportsSortedWithDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:29 IST" name="teardown" finished-at="2023-05-19T18:12:29 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=securityReportsSortedWithDifferentFilters status=SUCCESS method=GetReportsRequest.securityReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:30 IST" name="teardown" finished-at="2023-05-19T18:12:30 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=securityReportsSortedWithDifferentFilters status=SUCCESS method=GetReportsRequest.securityReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="securityReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:30 IST" name="securityReportsSortedWithDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:12:31 IST" duration-ms="735" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5603-Get All Security Reports- Sort By - Report Type, search_query=, serviceImpactedDescription=, yardi_id=starbuck, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=security, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=gpuat22-uat3@yahoo.com, name=, notificationRecipients=, position=, page=0, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=979fde4013dfe300edd63c928144b05d, readFlag=, errorMessage=, methodName=securityReportsSortedWithDifferentFilters, TestCaseID=GAPI-5603, errorMessageType=, standardVisitorBadgeStr=, filters=?reportType=Security&type.asc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=df5a2a59139d2640afc331f18144b06b, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- securityReportsSortedWithDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11]" started-at="2023-05-19T18:12:31 IST" name="teardown" finished-at="2023-05-19T18:12:31 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=securityReportsSortedWithDifferentFilters status=SUCCESS method=GetReportsRequest.securityReportsSortedWithDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetReportsRequest@58594a11] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetReportsRequest -->
      <class name="com.gapi.testCases.EditCustomerSupportTicket">
        <test-method signature="verifyEditCustomerReferenceOfAnExistingCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditCustomerSupportTicket@2049a9c1]" started-at="2023-05-19T18:15:17 IST" name="verifyEditCustomerReferenceOfAnExistingCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:15:22 IST" duration-ms="5230" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3857-Edit the CustomerReference of an Existing Customer Support Ticket in New Status, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyEditCustomerReferenceOfAnExistingCustomerSupportTicket, TestCaseID=GAPI-3857, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditCustomerReferenceOfAnExistingCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditCustomerSupportTicket@2049a9c1]" started-at="2023-05-19T18:15:22 IST" name="teardown" finished-at="2023-05-19T18:15:22 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditCustomerReferenceOfAnExistingCustomerSupportTicket status=SUCCESS method=EditCustomerSupportTicket.verifyEditCustomerReferenceOfAnExistingCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditCustomerSupportTicket@2049a9c1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyEditDescriptionOfAnExistingCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditCustomerSupportTicket@2049a9c1]" started-at="2023-05-19T18:15:22 IST" name="verifyEditDescriptionOfAnExistingCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:15:27 IST" duration-ms="5066" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3856-Edit the Description of an Existing Customer Support Ticket in New Status, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyEditDescriptionOfAnExistingCustomerSupportTicket, TestCaseID=GAPI-3856, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditDescriptionOfAnExistingCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditCustomerSupportTicket@2049a9c1]" started-at="2023-05-19T18:15:27 IST" name="teardown" finished-at="2023-05-19T18:15:27 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditDescriptionOfAnExistingCustomerSupportTicket status=SUCCESS method=EditCustomerSupportTicket.verifyEditDescriptionOfAnExistingCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditCustomerSupportTicket@2049a9c1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyEditNotificationRecipientsOfAnExistingCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditCustomerSupportTicket@2049a9c1]" started-at="2023-05-19T18:15:27 IST" name="verifyEditNotificationRecipientsOfAnExistingCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:15:32 IST" duration-ms="4786" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3858-Edit the Notification Recipients of an Existing Customer Support Ticket in New Status, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyEditNotificationRecipientsOfAnExistingCustomerSupportTicket, TestCaseID=GAPI-3858, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditNotificationRecipientsOfAnExistingCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditCustomerSupportTicket@2049a9c1]" started-at="2023-05-19T18:15:32 IST" name="teardown" finished-at="2023-05-19T18:15:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditNotificationRecipientsOfAnExistingCustomerSupportTicket status=SUCCESS method=EditCustomerSupportTicket.verifyEditNotificationRecipientsOfAnExistingCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditCustomerSupportTicket@2049a9c1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyEditTitleOfAnExistingCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditCustomerSupportTicket@2049a9c1]" started-at="2023-05-19T18:15:32 IST" name="verifyEditTitleOfAnExistingCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:15:38 IST" duration-ms="5622" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3855-Edit the title of an Existing Customer Support Ticket in New Status, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyEditTitleOfAnExistingCustomerSupportTicket, TestCaseID=GAPI-3855, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditTitleOfAnExistingCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditCustomerSupportTicket@2049a9c1]" started-at="2023-05-19T18:15:38 IST" name="teardown" finished-at="2023-05-19T18:15:38 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditTitleOfAnExistingCustomerSupportTicket status=SUCCESS method=EditCustomerSupportTicket.verifyEditTitleOfAnExistingCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditCustomerSupportTicket@2049a9c1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.EditCustomerSupportTicket -->
      <class name="com.gapi.testCases.GetNotificationDetails">
        <test-method retried="true" signature="getAllNotificationDetailsInfo()[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:13:38 IST" name="getAllNotificationDetailsInfo" finished-at="2023-05-19T18:13:41 IST" duration-ms="2677" status="SKIP">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getNotificationIDFromResponse(TestUtilities.java:631)
at com.gapi.testCases.GetNotificationDetails.getAllNotificationDetailsInfo(GetNotificationDetails.java:61)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllNotificationDetailsInfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:13:41 IST" name="teardown" finished-at="2023-05-19T18:13:41 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllNotificationDetailsInfo status=SKIP method=GetNotificationDetails.getAllNotificationDetailsInfo()[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllNotificationDetailsInfo()[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:13:41 IST" name="getAllNotificationDetailsInfo" finished-at="2023-05-19T18:13:43 IST" duration-ms="2437" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getNotificationIDFromResponse(TestUtilities.java:631)
at com.gapi.testCases.GetNotificationDetails.getAllNotificationDetailsInfo(GetNotificationDetails.java:61)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllNotificationDetailsInfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:13:43 IST" name="teardown" finished-at="2023-05-19T18:13:43 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllNotificationDetailsInfo status=FAILURE method=GetNotificationDetails.getAllNotificationDetailsInfo()[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="getNotificationDetailsById()[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:13:43 IST" name="getNotificationDetailsById" finished-at="2023-05-19T18:13:45 IST" duration-ms="2350" status="SKIP">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getNotificationIDFromResponse(TestUtilities.java:631)
at com.gapi.testCases.GetNotificationDetails.getNotificationDetailsById(GetNotificationDetails.java:82)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getNotificationDetailsById -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:13:45 IST" name="teardown" finished-at="2023-05-19T18:13:45 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getNotificationDetailsById status=SKIP method=GetNotificationDetails.getNotificationDetailsById()[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getNotificationDetailsById()[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:13:45 IST" name="getNotificationDetailsById" finished-at="2023-05-19T18:13:48 IST" duration-ms="2747" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getNotificationIDFromResponse(TestUtilities.java:631)
at com.gapi.testCases.GetNotificationDetails.getNotificationDetailsById(GetNotificationDetails.java:82)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getNotificationDetailsById -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:13:48 IST" name="teardown" finished-at="2023-05-19T18:13:48 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getNotificationDetailsById status=FAILURE method=GetNotificationDetails.getNotificationDetailsById()[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="getNotificationDetailsByNegativeToken(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:13:48 IST" name="getNotificationDetailsByNegativeToken" data-provider="testCasesData" finished-at="2023-05-19T18:13:51 IST" duration-ms="2370" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5628-N-Planned Site Maintenance - Retrieve without mandatory Headers( Token)_ Negative, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Unauthorized, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=401, ci=, readFlag=, errorMessage=Unauthorized. Access token is missing or invalid., methodName=getNotificationDetailsByNegativeToken, TestCaseID=GAPI-5628, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getNotificationIDFromResponse(TestUtilities.java:631)
at com.gapi.testCases.GetNotificationDetails.getNotificationDetailsByNegativeToken(GetNotificationDetails.java:194)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getNotificationDetailsByNegativeToken -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:13:51 IST" name="teardown" finished-at="2023-05-19T18:13:51 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getNotificationDetailsByNegativeToken status=SKIP method=GetNotificationDetails.getNotificationDetailsByNegativeToken(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getNotificationDetailsByNegativeToken(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:13:51 IST" name="getNotificationDetailsByNegativeToken" data-provider="testCasesData" finished-at="2023-05-19T18:13:53 IST" duration-ms="2360" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5628-N-Planned Site Maintenance - Retrieve without mandatory Headers( Token)_ Negative, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Unauthorized, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=401, ci=, readFlag=, errorMessage=Unauthorized. Access token is missing or invalid., methodName=getNotificationDetailsByNegativeToken, TestCaseID=GAPI-5628, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getNotificationIDFromResponse(TestUtilities.java:631)
at com.gapi.testCases.GetNotificationDetails.getNotificationDetailsByNegativeToken(GetNotificationDetails.java:194)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getNotificationDetailsByNegativeToken -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:13:53 IST" name="teardown" finished-at="2023-05-19T18:13:53 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getNotificationDetailsByNegativeToken status=FAILURE method=GetNotificationDetails.getNotificationDetailsByNegativeToken(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="updateAttributesOfNotification(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:13:53 IST" name="updateAttributesOfNotification" data-provider="testCasesData" finished-at="2023-05-19T18:13:55 IST" duration-ms="2400" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5651-Update a All attribute with wrong values of an existing Notification using NotificationId, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag="xyz", customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag="abc", errorMessage=, methodName=updateAttributesOfNotification, TestCaseID=GAPI-5651, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getNotificationIDFromResponse(TestUtilities.java:631)
at com.gapi.testCases.GetNotificationDetails.updateAttributesOfNotification(GetNotificationDetails.java:245)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateAttributesOfNotification -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:13:55 IST" name="teardown" finished-at="2023-05-19T18:13:55 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateAttributesOfNotification status=SKIP method=GetNotificationDetails.updateAttributesOfNotification(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="updateAttributesOfNotification(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:13:55 IST" name="updateAttributesOfNotification" data-provider="testCasesData" finished-at="2023-05-19T18:13:58 IST" duration-ms="2332" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5651-Update a All attribute with wrong values of an existing Notification using NotificationId, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag="xyz", customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag="abc", errorMessage=, methodName=updateAttributesOfNotification, TestCaseID=GAPI-5651, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getNotificationIDFromResponse(TestUtilities.java:631)
at com.gapi.testCases.GetNotificationDetails.updateAttributesOfNotification(GetNotificationDetails.java:245)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateAttributesOfNotification -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:13:58 IST" name="teardown" finished-at="2023-05-19T18:13:58 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateAttributesOfNotification status=FAILURE method=GetNotificationDetails.updateAttributesOfNotification(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="updateNotificationById(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:13:58 IST" name="updateNotificationById" data-provider="testCasesData" finished-at="2023-05-19T18:14:00 IST" duration-ms="2340" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5649-5638-Update a All attribute of an existing Notification using valid NotificationId, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=true, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=true, errorMessage=, methodName=updateNotificationById, TestCaseID=GAPI-5649, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getNotificationIDFromResponse(TestUtilities.java:631)
at com.gapi.testCases.GetNotificationDetails.updateNotificationById(GetNotificationDetails.java:114)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateNotificationById -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:14:00 IST" name="teardown" finished-at="2023-05-19T18:14:00 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateNotificationById status=SKIP method=GetNotificationDetails.updateNotificationById(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="updateNotificationById(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:14:00 IST" name="updateNotificationById" data-provider="testCasesData" finished-at="2023-05-19T18:14:02 IST" duration-ms="2384" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5649-5638-Update a All attribute of an existing Notification using valid NotificationId, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=true, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=true, errorMessage=, methodName=updateNotificationById, TestCaseID=GAPI-5649, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getNotificationIDFromResponse(TestUtilities.java:631)
at com.gapi.testCases.GetNotificationDetails.updateNotificationById(GetNotificationDetails.java:114)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateNotificationById -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:14:02 IST" name="teardown" finished-at="2023-05-19T18:14:02 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateNotificationById status=FAILURE method=GetNotificationDetails.updateNotificationById(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="updateNotificationById(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:14:02 IST" name="updateNotificationById" data-provider="testCasesData" finished-at="2023-05-19T18:14:05 IST" duration-ms="2337" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5647-Update a DeleteFlag attribute of an existing Notification using valid NotificationId, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=true, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=false, errorMessage=, methodName=updateNotificationById, TestCaseID=GAPI-5647, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getNotificationIDFromResponse(TestUtilities.java:631)
at com.gapi.testCases.GetNotificationDetails.updateNotificationById(GetNotificationDetails.java:114)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateNotificationById -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:14:05 IST" name="teardown" finished-at="2023-05-19T18:14:05 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateNotificationById status=SKIP method=GetNotificationDetails.updateNotificationById(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="updateNotificationById(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:14:05 IST" name="updateNotificationById" data-provider="testCasesData" finished-at="2023-05-19T18:14:07 IST" duration-ms="2363" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5647-Update a DeleteFlag attribute of an existing Notification using valid NotificationId, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=true, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=false, errorMessage=, methodName=updateNotificationById, TestCaseID=GAPI-5647, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getNotificationIDFromResponse(TestUtilities.java:631)
at com.gapi.testCases.GetNotificationDetails.updateNotificationById(GetNotificationDetails.java:114)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateNotificationById -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:14:07 IST" name="teardown" finished-at="2023-05-19T18:14:07 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateNotificationById status=FAILURE method=GetNotificationDetails.updateNotificationById(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="updateNotificationById(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:14:07 IST" name="updateNotificationById" data-provider="testCasesData" finished-at="2023-05-19T18:14:09 IST" duration-ms="2349" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5646-Update a ReadFlag attribute of an existing Notification using valid NotificationId, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=false, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=true, errorMessage=, methodName=updateNotificationById, TestCaseID=GAPI-5646, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getNotificationIDFromResponse(TestUtilities.java:631)
at com.gapi.testCases.GetNotificationDetails.updateNotificationById(GetNotificationDetails.java:114)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateNotificationById -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:14:09 IST" name="teardown" finished-at="2023-05-19T18:14:09 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateNotificationById status=SKIP method=GetNotificationDetails.updateNotificationById(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="updateNotificationById(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:14:09 IST" name="updateNotificationById" data-provider="testCasesData" finished-at="2023-05-19T18:14:12 IST" duration-ms="2687" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5646-Update a ReadFlag attribute of an existing Notification using valid NotificationId, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=false, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=true, errorMessage=, methodName=updateNotificationById, TestCaseID=GAPI-5646, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.utilities.TestUtilities.getNotificationIDFromResponse(TestUtilities.java:631)
at com.gapi.testCases.GetNotificationDetails.updateNotificationById(GetNotificationDetails.java:114)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateNotificationById -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:14:12 IST" name="teardown" finished-at="2023-05-19T18:14:12 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateNotificationById status=FAILURE method=GetNotificationDetails.updateNotificationById(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="updateNotificationByInvalidId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:14:12 IST" name="updateNotificationByInvalidId" data-provider="testCasesData" finished-at="2023-05-19T18:14:12 IST" duration-ms="288" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5650-Update a All attribute of an existing Notification using Invalid NotificationId, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=true, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=true, errorMessage=, methodName=updateNotificationByInvalidId, TestCaseID=GAPI-5650, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [405]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [405]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.GetNotificationDetails.updateNotificationByInvalidId(GetNotificationDetails.java:178)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateNotificationByInvalidId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:14:12 IST" name="teardown" finished-at="2023-05-19T18:14:12 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateNotificationByInvalidId status=SKIP method=GetNotificationDetails.updateNotificationByInvalidId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="updateNotificationByInvalidId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:14:12 IST" name="updateNotificationByInvalidId" data-provider="testCasesData" finished-at="2023-05-19T18:14:13 IST" duration-ms="261" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5650-Update a All attribute of an existing Notification using Invalid NotificationId, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=true, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=true, errorMessage=, methodName=updateNotificationByInvalidId, TestCaseID=GAPI-5650, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [405]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [405]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.GetNotificationDetails.updateNotificationByInvalidId(GetNotificationDetails.java:178)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateNotificationByInvalidId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:14:13 IST" name="teardown" finished-at="2023-05-19T18:14:13 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateNotificationByInvalidId status=FAILURE method=GetNotificationDetails.updateNotificationByInvalidId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetNotificationInfoByInvalidId()[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:14:13 IST" name="verifyGetNotificationInfoByInvalidId" finished-at="2023-05-19T18:14:13 IST" duration-ms="500" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetNotificationInfoByInvalidId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df]" started-at="2023-05-19T18:14:13 IST" name="teardown" finished-at="2023-05-19T18:14:13 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetNotificationInfoByInvalidId status=SUCCESS method=GetNotificationDetails.verifyGetNotificationInfoByInvalidId()[pri:0, instance:com.gapi.testCases.GetNotificationDetails@1b8a29df] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetNotificationDetails -->
      <class name="com.gapi.testCases.GetCustomerSupportTicketDetails">
        <test-method signature="getCategoryListForCustomerSupportRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:06:34 IST" name="getCategoryListForCustomerSupportRequestType" data-provider="testCasesData" finished-at="2023-05-19T18:06:34 IST" duration-ms="285" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3823 Retrieve all Customer Support Request -  filter - Category -Fire/Safety, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=requestType=Facilities Request, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCategoryListForCustomerSupportRequestType, TestCaseID=GAPI-3823, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCategoryListForCustomerSupportRequestType -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:06:34 IST" name="teardown" finished-at="2023-05-19T18:06:34 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCategoryListForCustomerSupportRequestType status=SUCCESS method=GetCustomerSupportTicketDetails.getCategoryListForCustomerSupportRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCategoryListForCustomerSupportRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:06:34 IST" name="getCategoryListForCustomerSupportRequestType" data-provider="testCasesData" finished-at="2023-05-19T18:06:35 IST" duration-ms="315" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Retrieve Category list for Amenities Request Type, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=requestType=Amenities, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCategoryListForCustomerSupportRequestType, TestCaseID=Verify Re, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCategoryListForCustomerSupportRequestType -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:06:35 IST" name="teardown" finished-at="2023-05-19T18:06:35 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCategoryListForCustomerSupportRequestType status=SUCCESS method=GetCustomerSupportTicketDetails.getCategoryListForCustomerSupportRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCategoryListForCustomerSupportRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:06:35 IST" name="getCategoryListForCustomerSupportRequestType" data-provider="testCasesData" finished-at="2023-05-19T18:06:35 IST" duration-ms="292" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3815-Verify Retrieve Category list for Accounts Receivable Request Type, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=requestType=Accounts Receivable, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCategoryListForCustomerSupportRequestType, TestCaseID=GAPI-3815, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCategoryListForCustomerSupportRequestType -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:06:35 IST" name="teardown" finished-at="2023-05-19T18:06:35 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCategoryListForCustomerSupportRequestType status=SUCCESS method=GetCustomerSupportTicketDetails.getCategoryListForCustomerSupportRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCategoryListForCustomerSupportRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:06:35 IST" name="getCategoryListForCustomerSupportRequestType" data-provider="testCasesData" finished-at="2023-05-19T18:06:35 IST" duration-ms="325" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3814-Verify Retrieve Category list for Account Management Request Type, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=requestType=Account Management, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCategoryListForCustomerSupportRequestType, TestCaseID=GAPI-3814, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCategoryListForCustomerSupportRequestType -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:06:35 IST" name="teardown" finished-at="2023-05-19T18:06:35 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCategoryListForCustomerSupportRequestType status=SUCCESS method=GetCustomerSupportTicketDetails.getCategoryListForCustomerSupportRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCategoryListForCustomerSupportRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:06:35 IST" name="getCategoryListForCustomerSupportRequestType" data-provider="testCasesData" finished-at="2023-05-19T18:06:36 IST" duration-ms="257" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Retrieve Category list for Invalid RequestType , search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=requestType=abc, expectedStatusCode=400, ci=, readFlag=, errorMessage=Query parameter 'requestType' has an unexpected value., methodName=getCategoryListForCustomerSupportRequestType, TestCaseID=Verify Re, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCategoryListForCustomerSupportRequestType -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:06:36 IST" name="teardown" finished-at="2023-05-19T18:06:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCategoryListForCustomerSupportRequestType status=SUCCESS method=GetCustomerSupportTicketDetails.getCategoryListForCustomerSupportRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCustomerSupportTicketInfoByInvalidId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:06:36 IST" name="verifyCustomerSupportTicketInfoByInvalidId" data-provider="testCasesData" finished-at="2023-05-19T18:06:36 IST" duration-ms="424" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3832-Retrieve Customer Support Request details by - Invalid Request ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=404, ci=, readFlag=, errorMessage=, methodName=verifyCustomerSupportTicketInfoByInvalidId, TestCaseID=GAPI-3832, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCustomerSupportTicketInfoByInvalidId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:06:36 IST" name="teardown" finished-at="2023-05-19T18:06:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCustomerSupportTicketInfoByInvalidId status=SUCCESS method=GetCustomerSupportTicketDetails.verifyCustomerSupportTicketInfoByInvalidId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:06:36 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:06:39 IST" duration-ms="3311" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3808-Verify Retrieve the CustomerSupportTickets by filtering with  Site name, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=GAPI-3808, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:06:39 IST" name="teardown" finished-at="2023-05-19T18:06:39 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:06:39 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:06:43 IST" duration-ms="3429" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3810-Verify Get-All- Retrieve the CustomerSupportTicket by filtering with Status as New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=GAPI-3810, errorMessageType=, standardVisitorBadgeStr=, filters=status=New, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:06:43 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:06:45 IST" duration-ms="1838" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3811-Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Status as InProgress, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=GAPI-3811, errorMessageType=, standardVisitorBadgeStr=, filters=status=In Progress, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:06:43 IST" name="teardown" finished-at="2023-05-19T18:06:43 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:06:45 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:06:48 IST" duration-ms="3659" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3813-Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Status as Completed, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=GAPI-3813, errorMessageType=, standardVisitorBadgeStr=, filters=status=Completed, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:06:45 IST" name="teardown" finished-at="2023-05-19T18:06:45 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:06:48 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:06:50 IST" duration-ms="1909" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3812-Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Status as Cancelled, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=GAPI-3812, errorMessageType=, standardVisitorBadgeStr=, filters=status=Cancelled, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:06:48 IST" name="teardown" finished-at="2023-05-19T18:06:48 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:06:50 IST" name="teardown" finished-at="2023-05-19T18:06:50 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:06:50 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:06:54 IST" duration-ms="3426" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3863-Verify Get-All- Retrieve the CustomerSupportTickets by filtering with requestType as Account Management, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=GAPI-3863, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Account Management, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:06:54 IST" name="teardown" finished-at="2023-05-19T18:06:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:06:54 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:06:57 IST" duration-ms="3168" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3864-Verify Get-All- Retrieve the CustomerSupportTickets by filtering with requestType as Accounts Receivable, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=GAPI-3864, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Accounts Receivable, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:06:57 IST" name="teardown" finished-at="2023-05-19T18:06:57 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:06:57 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:07:00 IST" duration-ms="3360" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3865-Verify Get-All- Retrieve the CustomerSupportTickets by filtering with requestType as Facilities Request, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=GAPI-3865, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Facilities Request, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:00 IST" name="teardown" finished-at="2023-05-19T18:07:00 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:00 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:07:04 IST" duration-ms="3414" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3817-Verify Get-All- Retrieve the CustomerSupportTickets by filtering with requestType as Amenities, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=GAPI-3817, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Amenities, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:04 IST" name="teardown" finished-at="2023-05-19T18:07:04 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:04 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:07:05 IST" duration-ms="1683" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3818-Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Category as User Account Inquiry, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=GAPI-3818, errorMessageType=, standardVisitorBadgeStr=, filters=category=User Account Inquiry, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:05 IST" name="teardown" finished-at="2023-05-19T18:07:05 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:05 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:07:07 IST" duration-ms="1791" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3819-GAPI-3828-Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Category as General Billing Inquiry, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=GAPI-3819, errorMessageType=, standardVisitorBadgeStr=, filters=category=General Billing Inquiry, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:07 IST" name="teardown" finished-at="2023-05-19T18:07:07 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:07 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:07:10 IST" duration-ms="2963" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Category as Elevator, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=category=Elevator, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:10 IST" name="teardown" finished-at="2023-05-19T18:07:10 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:10 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:07:13 IST" duration-ms="3346" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3822-Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Category as Electrical, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=GAPI-3822, errorMessageType=, standardVisitorBadgeStr=, filters=category=Electrical, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:13 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:07:16 IST" duration-ms="2417" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3820-Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Category as Cooling-Datacenter, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=GAPI-3820, errorMessageType=, standardVisitorBadgeStr=, filters=category=Cooling - Datacenter, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:13 IST" name="teardown" finished-at="2023-05-19T18:07:13 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:16 IST" name="teardown" finished-at="2023-05-19T18:07:16 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:16 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:07:18 IST" duration-ms="2403" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3821-Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Category as Cooling-Office, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=GAPI-3821, errorMessageType=, standardVisitorBadgeStr=, filters=category=Cooling - Office, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:18 IST" name="teardown" finished-at="2023-05-19T18:07:18 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:18 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:07:22 IST" duration-ms="3463" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with site as DFW10 and Status as New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&status=New, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:22 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:07:25 IST" duration-ms="3441" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with  Site as DFW10 and requestType as Facilities Request, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&requestType=Facilities Request, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:22 IST" name="teardown" finished-at="2023-05-19T18:07:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:25 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:07:27 IST" duration-ms="1699" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with  Site as DFW10 & Category as General Billing Inquiry, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&category=General Billing Inquiry, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:25 IST" name="teardown" finished-at="2023-05-19T18:07:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:27 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:07:30 IST" duration-ms="3267" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with  Site as DFW10 & Limit as 30, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&size=20, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:27 IST" name="teardown" finished-at="2023-05-19T18:07:27 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:30 IST" name="teardown" finished-at="2023-05-19T18:07:30 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:30 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:07:34 IST" duration-ms="3482" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3830-GAPI-3872-Verify Get-All- Retrieve the CustomerSupportTickets by filtering with  Site  as DFW10& offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=GAPI-3830, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&page=0, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:34 IST" name="teardown" finished-at="2023-05-19T18:07:34 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:34 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:07:37 IST" duration-ms="3416" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with  Status as NEW  & requestType Account Management, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&requestType=Account Management, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:37 IST" name="teardown" finished-at="2023-05-19T18:07:37 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:37 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:07:40 IST" duration-ms="2852" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3825-Verify Get-All- Retrieve the CustomerSupportTickets by filtering with  Status as New & Category as  Elevator, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=GAPI-3825, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&category=Elevator, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:40 IST" name="teardown" finished-at="2023-05-19T18:07:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:40 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:07:44 IST" duration-ms="3739" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3829-Retrieve all Customer Support Request - filter - Size(Min 25 to Max 1000), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=GAPI-3829, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&size=30, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(GetCustomerSupportTicketDetails.java:212)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:44 IST" name="teardown" finished-at="2023-05-19T18:07:44 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SKIP method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:44 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:07:47 IST" duration-ms="3863" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3829-Retrieve all Customer Support Request - filter - Size(Min 25 to Max 1000), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=GAPI-3829, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&size=30, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(GetCustomerSupportTicketDetails.java:212)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:47 IST" name="teardown" finished-at="2023-05-19T18:07:47 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=FAILURE method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:47 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:07:51 IST" duration-ms="3441" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with  Status as New and Page as 20, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&page=0, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:51 IST" name="teardown" finished-at="2023-05-19T18:07:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:51 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:07:53 IST" duration-ms="1918" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with  Status as In Progress,size=25 and Page as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=In Progress&size=25&page=0, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:53 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:07:57 IST" duration-ms="3710" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with requestType as Amenities and Limit as 30, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Amenities&size=30, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:53 IST" name="teardown" finished-at="2023-05-19T18:07:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:57 IST" name="teardown" finished-at="2023-05-19T18:07:57 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:07:57 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:08:00 IST" duration-ms="3145" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with requestType as Facilities Request and Offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Facilities Request&page=10, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetCustomerSupportTicketDetails.verifyCategoryValue(GetCustomerSupportTicketDetails.java:231)
at com.gapi.testCases.GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(GetCustomerSupportTicketDetails.java:214)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:08:00 IST" name="teardown" finished-at="2023-05-19T18:08:00 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SKIP method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:08:00 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:08:03 IST" duration-ms="3140" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with requestType as Facilities Request and Offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Facilities Request&page=10, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at com.gapi.testCases.GetCustomerSupportTicketDetails.verifyCategoryValue(GetCustomerSupportTicketDetails.java:231)
at com.gapi.testCases.GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(GetCustomerSupportTicketDetails.java:214)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:08:03 IST" name="teardown" finished-at="2023-05-19T18:08:03 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=FAILURE method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:08:03 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:08:05 IST" duration-ms="1731" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Category as User Account Inquiry& Limit as 30, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=category=User Account Inquiry&size=15, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:08:05 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:08:07 IST" duration-ms="2353" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Category as Cooling-Datacenter & Offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=category=Cooling - Datacenter&page=0, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:08:05 IST" name="teardown" finished-at="2023-05-19T18:08:05 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:08:07 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:08:10 IST" duration-ms="3501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Site as DFW10 ,Status as New &requestType as Facilities Request, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&status=New&requestType=Facilities Request, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:08:07 IST" name="teardown" finished-at="2023-05-19T18:08:07 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:08:10 IST" name="teardown" finished-at="2023-05-19T18:08:10 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:08:10 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:08:14 IST" duration-ms="3350" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3827-Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Site as DFW10 ,Status as New&Category as Parking, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=GAPI-3827, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&site=PHX015&category=Parking, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:08:14 IST" name="teardown" finished-at="2023-05-19T18:08:14 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:08:14 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:08:16 IST" duration-ms="1922" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Site DFW10 ,Status as New, requestType as Amenities,Limit as 30 & offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=size=30&status=New&page=20&site=PHX015&requestType=Amenities, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:08:16 IST" name="teardown" finished-at="2023-05-19T18:08:16 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:08:16 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:08:19 IST" duration-ms="3153" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Site as DFW10,Status as New,requestType as Accounts Receivable&category as General Billing Inquiry, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&site=PHX015&category=General Billing Inquiry&requestType=Accounts Receivable, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:08:19 IST" name="teardown" finished-at="2023-05-19T18:08:19 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:08:19 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:08:21 IST" duration-ms="1910" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Site as DFW10,Status as New,requestType as Account Management, Category as User Account Inquiry,Limit as 30 &offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Account Management&category=User Account Inquiry&size=2&status=New&page=0&site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:08:21 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:08:23 IST" duration-ms="1965" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the CustomerSupportTickets by filtering with Site as DFW10,Status as New,requestType as Account Management, Category as Loading Dock,Limit as 30 &offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Amenities&category=Loading Dock&size=2&status=New&page=0&site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:08:21 IST" name="teardown" finished-at="2023-05-19T18:08:21 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:08:23 IST" name="verifyGetAllWithCustomerSupportTicketFilters" data-provider="testCasesData" finished-at="2023-05-19T18:08:25 IST" duration-ms="1997" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3824-Retrieve all Customer Support Request -  filter - Category -Planned Maintenance Inquiry,Limit as 30 &offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithCustomerSupportTicketFilters, TestCaseID=GAPI-3824, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Facilities Request&category=Planned Maintenance&size=2&status=New&page=0&site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithCustomerSupportTicketFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:08:23 IST" name="teardown" finished-at="2023-05-19T18:08:23 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0]" started-at="2023-05-19T18:08:25 IST" name="teardown" finished-at="2023-05-19T18:08:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithCustomerSupportTicketFilters status=SUCCESS method=GetCustomerSupportTicketDetails.verifyGetAllWithCustomerSupportTicketFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCustomerSupportTicketDetails@6e01f9b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetCustomerSupportTicketDetails -->
      <class name="com.gapi.testCases.TerminatePermanentBadgeRequest">
        <test-method retried="true" signature="verifyAttributeTerminatePermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8]" started-at="2023-05-19T18:13:25 IST" name="verifyAttributeTerminatePermanentBadgeRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:26 IST" duration-ms="572" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-9006-Terminate a Perm badge request and verify the weather the category attribute value as (Terminate All Access) from Service Ticket Get call response, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyAttributeTerminatePermanentBadgeRequest, TestCaseID=GAPI-9006, errorMessageType=, standardVisitorBadgeStr=, filters=category, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Terminate All Access, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONObject(JSONObject.java:732)
at com.gapi.utilities.TestUtilities.getWONumberIdFromResponse(TestUtilities.java:143)
at com.gapi.testCases.TerminatePermanentBadgeRequest.verifyAttributeTerminatePermanentBadgeRequest(TerminatePermanentBadgeRequest.java:95)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAttributeTerminatePermanentBadgeRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8]" started-at="2023-05-19T18:13:26 IST" name="teardown" finished-at="2023-05-19T18:13:26 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAttributeTerminatePermanentBadgeRequest status=SKIP method=TerminatePermanentBadgeRequest.verifyAttributeTerminatePermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyAttributeTerminatePermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8]" started-at="2023-05-19T18:13:26 IST" name="verifyAttributeTerminatePermanentBadgeRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:26 IST" duration-ms="417" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-9006-Terminate a Perm badge request and verify the weather the category attribute value as (Terminate All Access) from Service Ticket Get call response, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyAttributeTerminatePermanentBadgeRequest, TestCaseID=GAPI-9006, errorMessageType=, standardVisitorBadgeStr=, filters=category, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Terminate All Access, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONObject(JSONObject.java:732)
at com.gapi.utilities.TestUtilities.getWONumberIdFromResponse(TestUtilities.java:143)
at com.gapi.testCases.TerminatePermanentBadgeRequest.verifyAttributeTerminatePermanentBadgeRequest(TerminatePermanentBadgeRequest.java:95)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAttributeTerminatePermanentBadgeRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8]" started-at="2023-05-19T18:13:26 IST" name="teardown" finished-at="2023-05-19T18:13:26 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAttributeTerminatePermanentBadgeRequest status=FAILURE method=TerminatePermanentBadgeRequest.verifyAttributeTerminatePermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyAttributeTerminatePermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8]" started-at="2023-05-19T18:13:26 IST" name="verifyAttributeTerminatePermanentBadgeRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:26 IST" duration-ms="404" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-9008-Terminate a Perm badge request and verify the weather the Description attribute value as (Request for Terminate Permanent badge) from Service Ticket Get call response, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Request for Terminate Permanent badge, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyAttributeTerminatePermanentBadgeRequest, TestCaseID=GAPI-9008, errorMessageType=, standardVisitorBadgeStr=, filters=description, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONObject(JSONObject.java:732)
at com.gapi.utilities.TestUtilities.getWONumberIdFromResponse(TestUtilities.java:143)
at com.gapi.testCases.TerminatePermanentBadgeRequest.verifyAttributeTerminatePermanentBadgeRequest(TerminatePermanentBadgeRequest.java:95)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAttributeTerminatePermanentBadgeRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8]" started-at="2023-05-19T18:13:26 IST" name="teardown" finished-at="2023-05-19T18:13:26 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAttributeTerminatePermanentBadgeRequest status=SKIP method=TerminatePermanentBadgeRequest.verifyAttributeTerminatePermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyAttributeTerminatePermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8]" started-at="2023-05-19T18:13:26 IST" name="verifyAttributeTerminatePermanentBadgeRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:27 IST" duration-ms="401" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-9008-Terminate a Perm badge request and verify the weather the Description attribute value as (Request for Terminate Permanent badge) from Service Ticket Get call response, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Request for Terminate Permanent badge, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyAttributeTerminatePermanentBadgeRequest, TestCaseID=GAPI-9008, errorMessageType=, standardVisitorBadgeStr=, filters=description, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONObject(JSONObject.java:732)
at com.gapi.utilities.TestUtilities.getWONumberIdFromResponse(TestUtilities.java:143)
at com.gapi.testCases.TerminatePermanentBadgeRequest.verifyAttributeTerminatePermanentBadgeRequest(TerminatePermanentBadgeRequest.java:95)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAttributeTerminatePermanentBadgeRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8]" started-at="2023-05-19T18:13:27 IST" name="teardown" finished-at="2023-05-19T18:13:27 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAttributeTerminatePermanentBadgeRequest status=FAILURE method=TerminatePermanentBadgeRequest.verifyAttributeTerminatePermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyTerminatePermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8]" started-at="2023-05-19T18:13:27 IST" name="verifyTerminatePermanentBadgeRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:27 IST" duration-ms="387" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-6263-GAPI-6844-Validate Perm Badge Ticket Terminate, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyTerminatePermanentBadgeRequest, TestCaseID=GAPI-6263, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.TerminatePermanentBadgeRequest.verifyTerminatePermanentBadgeRequest(TerminatePermanentBadgeRequest.java:51)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyTerminatePermanentBadgeRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8]" started-at="2023-05-19T18:13:27 IST" name="teardown" finished-at="2023-05-19T18:13:27 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyTerminatePermanentBadgeRequest status=SKIP method=TerminatePermanentBadgeRequest.verifyTerminatePermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyTerminatePermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8]" started-at="2023-05-19T18:13:27 IST" name="verifyTerminatePermanentBadgeRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:28 IST" duration-ms="392" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-6263-GAPI-6844-Validate Perm Badge Ticket Terminate, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyTerminatePermanentBadgeRequest, TestCaseID=GAPI-6263, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.TerminatePermanentBadgeRequest.verifyTerminatePermanentBadgeRequest(TerminatePermanentBadgeRequest.java:51)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyTerminatePermanentBadgeRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8]" started-at="2023-05-19T18:13:28 IST" name="teardown" finished-at="2023-05-19T18:13:28 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyTerminatePermanentBadgeRequest status=FAILURE method=TerminatePermanentBadgeRequest.verifyTerminatePermanentBadgeRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyTerminatePermanentBadgeRequestGetServiceTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8]" started-at="2023-05-19T18:13:28 IST" name="verifyTerminatePermanentBadgeRequestGetServiceTicket" data-provider="testCasesData" finished-at="2023-05-19T18:13:28 IST" duration-ms="411" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-8990-FA-Permanent Badge - Terminate -Get Service ticket, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Request for Terminate Permanent badge, permissionGroups=, workDescription=, executionFlag=Y, title=Request for Terminate Permanent badge, visitorHostCompany=, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyTerminatePermanentBadgeRequestGetServiceTicket, TestCaseID=GAPI-8990, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.TerminatePermanentBadgeRequest.verifyTerminatePermanentBadgeRequestGetServiceTicket(TerminatePermanentBadgeRequest.java:158)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyTerminatePermanentBadgeRequestGetServiceTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8]" started-at="2023-05-19T18:13:28 IST" name="teardown" finished-at="2023-05-19T18:13:28 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyTerminatePermanentBadgeRequestGetServiceTicket status=SKIP method=TerminatePermanentBadgeRequest.verifyTerminatePermanentBadgeRequestGetServiceTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyTerminatePermanentBadgeRequestGetServiceTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8]" started-at="2023-05-19T18:13:28 IST" name="verifyTerminatePermanentBadgeRequestGetServiceTicket" data-provider="testCasesData" finished-at="2023-05-19T18:13:29 IST" duration-ms="481" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-8990-FA-Permanent Badge - Terminate -Get Service ticket, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Request for Terminate Permanent badge, permissionGroups=, workDescription=, executionFlag=Y, title=Request for Terminate Permanent badge, visitorHostCompany=, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyTerminatePermanentBadgeRequestGetServiceTicket, TestCaseID=GAPI-8990, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [401]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [401]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.TerminatePermanentBadgeRequest.verifyTerminatePermanentBadgeRequestGetServiceTicket(TerminatePermanentBadgeRequest.java:158)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyTerminatePermanentBadgeRequestGetServiceTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8]" started-at="2023-05-19T18:13:29 IST" name="teardown" finished-at="2023-05-19T18:13:29 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyTerminatePermanentBadgeRequestGetServiceTicket status=FAILURE method=TerminatePermanentBadgeRequest.verifyTerminatePermanentBadgeRequestGetServiceTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyTerminatePermanentBadgeRequestSubjectEnhancement(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8]" started-at="2023-05-19T18:13:29 IST" name="verifyTerminatePermanentBadgeRequestSubjectEnhancement" data-provider="testCasesData" finished-at="2023-05-19T18:13:29 IST" duration-ms="399" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=Request for Terminate Permanent badge, TestCaseName=GAPI-8987-FA-Permanent Badge - Terminate -Subject Enhancement, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Request for Terminate Permanent badge, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyTerminatePermanentBadgeRequestSubjectEnhancement, TestCaseID=GAPI-8987, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.TerminatePermanentBadgeRequest.verifyTerminatePermanentBadgeRequestSubjectEnhancement(TerminatePermanentBadgeRequest.java:211)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyTerminatePermanentBadgeRequestSubjectEnhancement -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8]" started-at="2023-05-19T18:13:29 IST" name="teardown" finished-at="2023-05-19T18:13:29 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyTerminatePermanentBadgeRequestSubjectEnhancement status=SKIP method=TerminatePermanentBadgeRequest.verifyTerminatePermanentBadgeRequestSubjectEnhancement(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyTerminatePermanentBadgeRequestSubjectEnhancement(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8]" started-at="2023-05-19T18:13:29 IST" name="verifyTerminatePermanentBadgeRequestSubjectEnhancement" data-provider="testCasesData" finished-at="2023-05-19T18:13:29 IST" duration-ms="489" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=Request for Terminate Permanent badge, TestCaseName=GAPI-8987-FA-Permanent Badge - Terminate -Subject Enhancement, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Request for Terminate Permanent badge, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=44922.0, assetId=, company=Zayo Group, LLC, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyTerminatePermanentBadgeRequestSubjectEnhancement, TestCaseID=GAPI-8987, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [401]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [401]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.TerminatePermanentBadgeRequest.verifyTerminatePermanentBadgeRequestSubjectEnhancement(TerminatePermanentBadgeRequest.java:211)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyTerminatePermanentBadgeRequestSubjectEnhancement -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8]" started-at="2023-05-19T18:13:29 IST" name="teardown" finished-at="2023-05-19T18:13:29 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyTerminatePermanentBadgeRequestSubjectEnhancement status=FAILURE method=TerminatePermanentBadgeRequest.verifyTerminatePermanentBadgeRequestSubjectEnhancement(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminatePermanentBadgeRequest@398dada8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.TerminatePermanentBadgeRequest -->
      <class name="com.gapi.testCases.GetRemoteHandsTicketDetails">
        <test-method retried="true" signature="getAllRemoteHandsTicketsInfo()[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:38 IST" name="getAllRemoteHandsTicketsInfo" finished-at="2023-05-19T18:02:38 IST" duration-ms="325" status="SKIP">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [201] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [201] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.GetRemoteHandsTicketDetails.getAllRemoteHandsTicketsInfo(GetRemoteHandsTicketDetails.java:78)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllRemoteHandsTicketsInfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:38 IST" name="teardown" finished-at="2023-05-19T18:02:38 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllRemoteHandsTicketsInfo status=SKIP method=GetRemoteHandsTicketDetails.getAllRemoteHandsTicketsInfo()[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllRemoteHandsTicketsInfo()[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:38 IST" name="getAllRemoteHandsTicketsInfo" finished-at="2023-05-19T18:02:38 IST" duration-ms="283" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [201] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [201] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.GetRemoteHandsTicketDetails.getAllRemoteHandsTicketsInfo(GetRemoteHandsTicketDetails.java:78)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllRemoteHandsTicketsInfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:38 IST" name="teardown" finished-at="2023-05-19T18:02:38 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllRemoteHandsTicketsInfo status=FAILURE method=GetRemoteHandsTicketDetails.getAllRemoteHandsTicketsInfo()[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCategoryListForRemoteHandsRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:38 IST" name="getCategoryListForRemoteHandsRequestType" data-provider="testCasesData" finished-at="2023-05-19T18:02:39 IST" duration-ms="290" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3945-Verify Retrieve Category list for Planned Work Request Type, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=requestType=Planned Work, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCategoryListForRemoteHandsRequestType, TestCaseID=GAPI-3945, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCategoryListForRemoteHandsRequestType -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:39 IST" name="teardown" finished-at="2023-05-19T18:02:39 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCategoryListForRemoteHandsRequestType status=SUCCESS method=GetRemoteHandsTicketDetails.getCategoryListForRemoteHandsRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCategoryListForRemoteHandsRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:39 IST" name="getCategoryListForRemoteHandsRequestType" data-provider="testCasesData" finished-at="2023-05-19T18:02:39 IST" duration-ms="288" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3948-Verify Retrieve Category list for Urgent Work Request Type, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=requestType=Urgent Work, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCategoryListForRemoteHandsRequestType, TestCaseID=GAPI-3948, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCategoryListForRemoteHandsRequestType -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:39 IST" name="teardown" finished-at="2023-05-19T18:02:39 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCategoryListForRemoteHandsRequestType status=SUCCESS method=GetRemoteHandsTicketDetails.getCategoryListForRemoteHandsRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCategoryListForRemoteHandsRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:39 IST" name="getCategoryListForRemoteHandsRequestType" data-provider="testCasesData" finished-at="2023-05-19T18:02:39 IST" duration-ms="262" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3946-Verify Retrieve Category list for Invalid RequestType , search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=requestType=Urgent Wor, expectedStatusCode=400, ci=, readFlag=, errorMessage=Request is invalid., methodName=getCategoryListForRemoteHandsRequestType, TestCaseID=GAPI-3946, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCategoryListForRemoteHandsRequestType -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:39 IST" name="teardown" finished-at="2023-05-19T18:02:39 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCategoryListForRemoteHandsRequestType status=SUCCESS method=GetRemoteHandsTicketDetails.getCategoryListForRemoteHandsRequestType(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:39 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:02:41 IST" duration-ms="1780" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3954-Verify Retrieve the Remote hands details by filtering with Site name, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=GAPI-3954, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["category"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["category"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getString(JSONObject.java:806)
at com.gapi.testCases.GetRemoteHandsTicketDetails.verifyGetAllWithFilters(GetRemoteHandsTicketDetails.java:256)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:41 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:02:43 IST" duration-ms="1861" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3954-Verify Retrieve the Remote hands details by filtering with Site name, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=GAPI-3954, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["category"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["category"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getString(JSONObject.java:806)
at com.gapi.testCases.GetRemoteHandsTicketDetails.verifyGetAllWithFilters(GetRemoteHandsTicketDetails.java:256)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:41 IST" name="teardown" finished-at="2023-05-19T18:02:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SKIP method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:43 IST" name="teardown" finished-at="2023-05-19T18:02:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=FAILURE method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:43 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:02:45 IST" duration-ms="1748" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3949-Verify Get-All- Retrieve the Remote hands details by filtering with Status as New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=GAPI-3949, errorMessageType=, standardVisitorBadgeStr=, filters=status=New, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["category"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["category"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getString(JSONObject.java:806)
at com.gapi.testCases.GetRemoteHandsTicketDetails.verifyGetAllWithFilters(GetRemoteHandsTicketDetails.java:256)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:45 IST" name="teardown" finished-at="2023-05-19T18:02:45 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SKIP method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:45 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:02:46 IST" duration-ms="1783" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3949-Verify Get-All- Retrieve the Remote hands details by filtering with Status as New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=GAPI-3949, errorMessageType=, standardVisitorBadgeStr=, filters=status=New, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["category"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["category"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getString(JSONObject.java:806)
at com.gapi.testCases.GetRemoteHandsTicketDetails.verifyGetAllWithFilters(GetRemoteHandsTicketDetails.java:256)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:46 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:02:47 IST" duration-ms="533" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3950-Verify Get-All- Retrieve the Remote hands details by filtering with Status as InProgress, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=GAPI-3950, errorMessageType=, standardVisitorBadgeStr=, filters=status=In Progress, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:46 IST" name="teardown" finished-at="2023-05-19T18:02:46 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=FAILURE method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:47 IST" name="teardown" finished-at="2023-05-19T18:02:47 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:47 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:02:49 IST" duration-ms="1891" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3951-Verify Get-All- Retrieve the Remote hands details by filtering with Status as Completed, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=GAPI-3951, errorMessageType=, standardVisitorBadgeStr=, filters=status=Completed, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["category"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["category"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getString(JSONObject.java:806)
at com.gapi.testCases.GetRemoteHandsTicketDetails.verifyGetAllWithFilters(GetRemoteHandsTicketDetails.java:256)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:49 IST" name="teardown" finished-at="2023-05-19T18:02:49 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SKIP method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:49 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:02:51 IST" duration-ms="1821" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3951-Verify Get-All- Retrieve the Remote hands details by filtering with Status as Completed, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=GAPI-3951, errorMessageType=, standardVisitorBadgeStr=, filters=status=Completed, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["category"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["category"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getString(JSONObject.java:806)
at com.gapi.testCases.GetRemoteHandsTicketDetails.verifyGetAllWithFilters(GetRemoteHandsTicketDetails.java:256)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:51 IST" name="teardown" finished-at="2023-05-19T18:02:51 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=FAILURE method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:51 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:02:51 IST" duration-ms="554" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3952-Verify Get-All- Retrieve the Remote hands details by filtering with Status as Cancelled, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=GAPI-3952, errorMessageType=, standardVisitorBadgeStr=, filters=status=Cancellation Requested, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Cancellation Requested] but found [Cancelled]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Cancellation Requested] but found [Cancelled]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.GetRemoteHandsTicketDetails.verifyGetAllWithFilters(GetRemoteHandsTicketDetails.java:252)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:51 IST" name="teardown" finished-at="2023-05-19T18:02:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SKIP method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:51 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:02:52 IST" duration-ms="540" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3952-Verify Get-All- Retrieve the Remote hands details by filtering with Status as Cancelled, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=GAPI-3952, errorMessageType=, standardVisitorBadgeStr=, filters=status=Cancellation Requested, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Cancellation Requested] but found [Cancelled]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Cancellation Requested] but found [Cancelled]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.GetRemoteHandsTicketDetails.verifyGetAllWithFilters(GetRemoteHandsTicketDetails.java:252)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:52 IST" name="teardown" finished-at="2023-05-19T18:02:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=FAILURE method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:52 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:02:52 IST" duration-ms="525" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3953-Retrieve Remote Hands Requests by Status - Cancellation Requested, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=GAPI-3953, errorMessageType=, standardVisitorBadgeStr=, filters=status=Cancellation Requested, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Cancellation Requested] but found [Cancelled]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Cancellation Requested] but found [Cancelled]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.GetRemoteHandsTicketDetails.verifyGetAllWithFilters(GetRemoteHandsTicketDetails.java:252)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:52 IST" name="teardown" finished-at="2023-05-19T18:02:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SKIP method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:52 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:02:53 IST" duration-ms="511" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3953-Retrieve Remote Hands Requests by Status - Cancellation Requested, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=GAPI-3953, errorMessageType=, standardVisitorBadgeStr=, filters=status=Cancellation Requested, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Cancellation Requested] but found [Cancelled]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Cancellation Requested] but found [Cancelled]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.GetRemoteHandsTicketDetails.verifyGetAllWithFilters(GetRemoteHandsTicketDetails.java:252)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:53 IST" name="teardown" finished-at="2023-05-19T18:02:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=FAILURE method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:53 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:02:55 IST" duration-ms="1745" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3955-Verify Get-All- Retrieve the remote hands details by filtering with requestType as Planned Work, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=GAPI-3955, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&requestType=Planned Work, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:55 IST" name="teardown" finished-at="2023-05-19T18:02:55 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:55 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:02:56 IST" duration-ms="1924" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3956-Verify Get-All- Retrieve the remote hands details by filtering with requestType as Urgent Work, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=GAPI-3956, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&requestType=Urgent Work, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:56 IST" name="teardown" finished-at="2023-05-19T18:02:56 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:56 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:02:58 IST" duration-ms="1728" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3957-Verify Get-All- Retrieve the remote hands details by filtering with Category as Existing cross connect or connectivity testing, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=GAPI-3957, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&category=Existing cross connect or connectivity testing, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:58 IST" name="teardown" finished-at="2023-05-19T18:02:58 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:02:58 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:00 IST" duration-ms="1841" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3960-Verify the Remote Hands list is defaulted to Sort by CreatedOn Date in DESC order, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=GAPI-3960, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&size=25, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["category"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["category"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getString(JSONObject.java:806)
at com.gapi.testCases.GetRemoteHandsTicketDetails.verifyGetAllWithFilters(GetRemoteHandsTicketDetails.java:282)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:00 IST" name="teardown" finished-at="2023-05-19T18:03:00 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SKIP method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:00 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:02 IST" duration-ms="1956" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3960-Verify the Remote Hands list is defaulted to Sort by CreatedOn Date in DESC order, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=GAPI-3960, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&size=25, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["category"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["category"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getString(JSONObject.java:806)
at com.gapi.testCases.GetRemoteHandsTicketDetails.verifyGetAllWithFilters(GetRemoteHandsTicketDetails.java:282)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method retried="true" signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:02 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:04 IST" duration-ms="1923" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the remote hands details by filtering with Offset values as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&page=0, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["category"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["category"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getString(JSONObject.java:806)
at com.gapi.testCases.GetRemoteHandsTicketDetails.verifyGetAllWithFilters(GetRemoteHandsTicketDetails.java:282)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:02 IST" name="teardown" finished-at="2023-05-19T18:03:02 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=FAILURE method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:04 IST" name="teardown" finished-at="2023-05-19T18:03:04 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SKIP method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:04 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:06 IST" duration-ms="2076" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the remote hands details by filtering with Offset values as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&page=0, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["category"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["category"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getString(JSONObject.java:806)
at com.gapi.testCases.GetRemoteHandsTicketDetails.verifyGetAllWithFilters(GetRemoteHandsTicketDetails.java:282)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:06 IST" name="teardown" finished-at="2023-05-19T18:03:06 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=FAILURE method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:06 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:08 IST" duration-ms="2347" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the remote hands details by filtering with site as PHX015 and Status as New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&status=New, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["category"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["category"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getString(JSONObject.java:806)
at com.gapi.testCases.GetRemoteHandsTicketDetails.verifyGetAllWithFilters(GetRemoteHandsTicketDetails.java:256)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:08 IST" name="teardown" finished-at="2023-05-19T18:03:08 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SKIP method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:08 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:10 IST" duration-ms="2117" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the remote hands details by filtering with site as PHX015 and Status as New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&status=New, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["category"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["category"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getString(JSONObject.java:806)
at com.gapi.testCases.GetRemoteHandsTicketDetails.verifyGetAllWithFilters(GetRemoteHandsTicketDetails.java:256)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:10 IST" name="teardown" finished-at="2023-05-19T18:03:10 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=FAILURE method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:10 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:13 IST" duration-ms="2036" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3958-RH- Retrieve Remote Hands Requests by Created By, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=GAPI-3958, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&category=Auditing, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:13 IST" name="teardown" finished-at="2023-05-19T18:03:13 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:13 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:14 IST" duration-ms="1941" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with  Site as PHX015 and requestType as Planned Work, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&requestType=Planned Work, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:14 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:16 IST" duration-ms="1233" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with  Site as PHX015 & Category as Equipment troubleshoot or replacement, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&category=Equipment troubleshoot or replacement, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:14 IST" name="teardown" finished-at="2023-05-19T18:03:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:16 IST" name="teardown" finished-at="2023-05-19T18:03:16 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:16 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:17 IST" duration-ms="810" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with  Site as PHX015 & Limit as 30, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&size=6, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["category"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["category"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getString(JSONObject.java:806)
at com.gapi.testCases.GetRemoteHandsTicketDetails.verifyGetAllWithFilters(GetRemoteHandsTicketDetails.java:282)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:17 IST" name="teardown" finished-at="2023-05-19T18:03:17 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SKIP method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:17 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:17 IST" duration-ms="781" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with  Site as PHX015 & Limit as 30, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&size=6, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["category"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["category"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getString(JSONObject.java:806)
at com.gapi.testCases.GetRemoteHandsTicketDetails.verifyGetAllWithFilters(GetRemoteHandsTicketDetails.java:282)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:17 IST" name="teardown" finished-at="2023-05-19T18:03:17 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=FAILURE method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:17 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:19 IST" duration-ms="1989" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3947-Verify Get-All- Retrieve the Remote hands details by filtering with  Site  as PHX015 & offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=GAPI-3947, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&page=0, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["category"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["category"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getString(JSONObject.java:806)
at com.gapi.testCases.GetRemoteHandsTicketDetails.verifyGetAllWithFilters(GetRemoteHandsTicketDetails.java:282)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:19 IST" name="teardown" finished-at="2023-05-19T18:03:19 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SKIP method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:19 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:21 IST" duration-ms="2116" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3947-Verify Get-All- Retrieve the Remote hands details by filtering with  Site  as PHX015 & offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=GAPI-3947, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&page=0, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["category"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["category"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getString(JSONObject.java:806)
at com.gapi.testCases.GetRemoteHandsTicketDetails.verifyGetAllWithFilters(GetRemoteHandsTicketDetails.java:282)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:21 IST" name="teardown" finished-at="2023-05-19T18:03:21 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=FAILURE method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:21 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:23 IST" duration-ms="1994" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with  Status as NEW  & requestType Urgent Work, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&requestType=Urgent Work, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:23 IST" name="teardown" finished-at="2023-05-19T18:03:23 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:23 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:25 IST" duration-ms="1186" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with  Status as New & Category as  KVM (keyboard, video, mouse) assistance, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&category=KVM (keyboard, video, mouse) assistance, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:25 IST" name="teardown" finished-at="2023-05-19T18:03:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:25 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:26 IST" duration-ms="1158" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3958-Verify Get-All- Retrieve the Remote hands details by filtering with  Status as New and CreatedBy as John Johnson, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=GAPI-3958, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&category=Tape swaps, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:26 IST" name="teardown" finished-at="2023-05-19T18:03:26 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:26 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:28 IST" duration-ms="1969" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3959-Verify Get-All- Retrieve the Remote hands details by filtering with  Status as New and Limit as 30, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=GAPI-3959, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&size=25, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["category"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["category"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getString(JSONObject.java:806)
at com.gapi.testCases.GetRemoteHandsTicketDetails.verifyGetAllWithFilters(GetRemoteHandsTicketDetails.java:282)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:28 IST" name="teardown" finished-at="2023-05-19T18:03:28 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SKIP method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:28 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:30 IST" duration-ms="1805" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3959-Verify Get-All- Retrieve the Remote hands details by filtering with  Status as New and Limit as 30, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=GAPI-3959, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&size=25, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["category"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["category"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getString(JSONObject.java:806)
at com.gapi.testCases.GetRemoteHandsTicketDetails.verifyGetAllWithFilters(GetRemoteHandsTicketDetails.java:282)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:30 IST" name="teardown" finished-at="2023-05-19T18:03:30 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=FAILURE method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:30 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:30 IST" duration-ms="456" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with  Status as New and offset as 20, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&page=20, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[A JSONObject text must begin with '{' at 0 [character 1 line 1]]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: A JSONObject text must begin with '{' at 0 [character 1 line 1]
at org.json.JSONTokener.syntaxError(JSONTokener.java:505)
at org.json.JSONObject.<init>(JSONObject.java:214)
at org.json.JSONObject.<init>(JSONObject.java:357)
at com.gapi.testCases.GetRemoteHandsTicketDetails.verifyGetAllWithFilters(GetRemoteHandsTicketDetails.java:233)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:30 IST" name="teardown" finished-at="2023-05-19T18:03:30 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SKIP method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:30 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:30 IST" duration-ms="481" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with  Status as New and offset as 20, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&page=20, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[A JSONObject text must begin with '{' at 0 [character 1 line 1]]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: A JSONObject text must begin with '{' at 0 [character 1 line 1]
at org.json.JSONTokener.syntaxError(JSONTokener.java:505)
at org.json.JSONObject.<init>(JSONObject.java:214)
at org.json.JSONObject.<init>(JSONObject.java:357)
at com.gapi.testCases.GetRemoteHandsTicketDetails.verifyGetAllWithFilters(GetRemoteHandsTicketDetails.java:233)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:30 IST" name="teardown" finished-at="2023-05-19T18:03:30 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=FAILURE method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:30 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:32 IST" duration-ms="1923" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details  by filtering with requestType as Planned work and CreatedBy as John JohnSon, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&status=New, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:32 IST" name="teardown" finished-at="2023-05-19T18:03:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:32 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:35 IST" duration-ms="2128" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3961-Verify Get-All- Retrieve the Remote hands details  by filtering with requestType as Urgent work,Status as New and Size as 30, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=GAPI-3961, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Urgent Work&status=New&size=30, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:35 IST" name="teardown" finished-at="2023-05-19T18:03:35 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:35 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:36 IST" duration-ms="1840" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with requestType as Urgent work and Limit as 30, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Urgent Work&status=New&site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:36 IST" name="teardown" finished-at="2023-05-19T18:03:36 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:36 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:38 IST" duration-ms="1886" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with requestType as Planned Work and Offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=requestType=Planned Work&page=0&site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:38 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:40 IST" duration-ms="1808" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with Category as Power cycle or reboot & CreatedBy as John Johnson, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=category=Power cycle or reboot&status=New&site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:38 IST" name="teardown" finished-at="2023-05-19T18:03:38 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:40 IST" name="teardown" finished-at="2023-05-19T18:03:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:40 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:41 IST" duration-ms="537" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details  by filtering with Category as Other& Limit as 30, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=category=Other&size=1&site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:41 IST" name="teardown" finished-at="2023-05-19T18:03:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:41 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:42 IST" duration-ms="1845" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with Category as Customer premise cabling & Offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=category=Customer premise cabling&page=0&site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:42 IST" name="teardown" finished-at="2023-05-19T18:03:42 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:42 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:44 IST" duration-ms="1851" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with Site as PHX015 ,Status as New &requestType as Planned Work, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=site=PHX015&status=New&requestType=Planned Work, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:44 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:45 IST" duration-ms="1050" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with Site as PHX015 ,Status as New&Category as Tape swaps, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&site=PHX015&category=Tape swaps, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:44 IST" name="teardown" finished-at="2023-05-19T18:03:44 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:45 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:46 IST" duration-ms="1046" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with Site as PHX015 ,Status as New&createdBy as  John Johnson, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&site=PHX015&category=Auditing, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:45 IST" name="teardown" finished-at="2023-05-19T18:03:45 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:46 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:48 IST" duration-ms="1782" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with Site PHX015 ,Status as New, requestType as Planned Work,Limit as 30 & offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=size=25&status=New&page=0&site=PHX015&requestType=Planned Work, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:46 IST" name="teardown" finished-at="2023-05-19T18:03:46 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:48 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:49 IST" duration-ms="1064" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with Site as PHX015,Status as New,requestType as Planned Work&category as Equipment installation, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&site=PHX015&category=Existing cross connect or connectivity testing&requestType=Urgent Work, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:48 IST" name="teardown" finished-at="2023-05-19T18:03:48 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:49 IST" name="teardown" finished-at="2023-05-19T18:03:49 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:49 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:51 IST" duration-ms="1800" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with Site as PHX015,Status as New,requestType as Urgent Work &createdBy as John JohnSon, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=status=New&site=PHX015&requestType=Urgent Work, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:51 IST" name="teardown" finished-at="2023-05-19T18:03:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:51 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:52 IST" duration-ms="1025" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with Site as PHX015,Status as New,requestType as Planned Work, Category as Equipment de-installation,Limit as 30 &offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=size=25&status=New&page=0&site=PHX015&category=Equipment de-installation&requestType=Planned Work, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [25] but found [10]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [25] but found [10]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.GetRemoteHandsTicketDetails.verifyGetAllWithFilters(GetRemoteHandsTicketDetails.java:270)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:52 IST" name="teardown" finished-at="2023-05-19T18:03:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SKIP method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:52 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:53 IST" duration-ms="968" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with Site as PHX015,Status as New,requestType as Planned Work, Category as Equipment de-installation,Limit as 30 &offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=size=25&status=New&page=0&site=PHX015&category=Equipment de-installation&requestType=Planned Work, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [25] but found [10]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [25] but found [10]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.GetRemoteHandsTicketDetails.verifyGetAllWithFilters(GetRemoteHandsTicketDetails.java:270)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:53 IST" name="teardown" finished-at="2023-05-19T18:03:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=FAILURE method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:53 IST" name="verifyGetAllWithFilters" data-provider="testCasesData" finished-at="2023-05-19T18:03:55 IST" duration-ms="2058" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Get-All- Retrieve the Remote hands details by filtering with Site as PHX015,Status as New,requestType as Planned Work,category as Dedicated escort,createdBy as John JohnSon,Limit as 30&Offset as 0, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyGetAllWithFilters, TestCaseID=Verify Ge, errorMessageType=, standardVisitorBadgeStr=, filters=size=30&status=New&page=0&site=PHX015&category=Dedicated escort&requestType=Planned Work, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetAllWithFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:55 IST" name="teardown" finished-at="2023-05-19T18:03:55 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetAllWithFilters status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetAllWithFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyGetRemoteHandsTicketInfoByInvalidId()[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:55 IST" name="verifyGetRemoteHandsTicketInfoByInvalidId" finished-at="2023-05-19T18:03:56 IST" duration-ms="400" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyGetRemoteHandsTicketInfoByInvalidId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d]" started-at="2023-05-19T18:03:56 IST" name="teardown" finished-at="2023-05-19T18:03:56 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyGetRemoteHandsTicketInfoByInvalidId status=SUCCESS method=GetRemoteHandsTicketDetails.verifyGetRemoteHandsTicketInfoByInvalidId()[pri:0, instance:com.gapi.testCases.GetRemoteHandsTicketDetails@1acaf3d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetRemoteHandsTicketDetails -->
      <class name="com.gapi.testCases.GetAssets">
        <test-method signature="getAllAssetsInfo()[pri:0, instance:com.gapi.testCases.GetAssets@135606db]" started-at="2023-05-19T18:11:29 IST" name="getAllAssetsInfo" finished-at="2023-05-19T18:11:29 IST" duration-ms="575" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAssets@135606db]" started-at="2023-05-19T18:11:29 IST" name="teardown" finished-at="2023-05-19T18:11:29 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInfo status=SUCCESS method=GetAssets.getAllAssetsInfo()[pri:0, instance:com.gapi.testCases.GetAssets@135606db] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAssetInfoById(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAssets@135606db]" started-at="2023-05-19T18:11:29 IST" name="getAssetInfoById" data-provider="testCasesData" finished-at="2023-05-19T18:11:30 IST" duration-ms="550" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify API user is able to retrieve the asset details by asset id, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAssetInfoById, TestCaseID=Verify AP, errorMessageType=, standardVisitorBadgeStr=, filters=?id=2ca74e8713123600a501b7a66144b0f4, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAssetInfoById -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAssets@135606db]" started-at="2023-05-19T18:11:30 IST" name="teardown" finished-at="2023-05-19T18:11:30 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAssetInfoById status=SUCCESS method=GetAssets.getAssetInfoById(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAssets@135606db] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAssets@135606db]" started-at="2023-05-19T18:11:30 IST" name="getLocationswithFilter" data-provider="testCasesData" finished-at="2023-05-19T18:11:30 IST" duration-ms="380" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5395-Retrieve Locations for Customer using Valid account id and Invalid Site Code, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getLocationswithFilter, TestCaseID=GAPI-5395, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dmMWbQAM&site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLocationswithFilter -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAssets@135606db]" started-at="2023-05-19T18:11:30 IST" name="teardown" finished-at="2023-05-19T18:11:30 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getLocationswithFilter status=SUCCESS method=GetAssets.getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAssets@135606db] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAssets@135606db]" started-at="2023-05-19T18:11:30 IST" name="getLocationswithFilter" data-provider="testCasesData" finished-at="2023-05-19T18:11:31 IST" duration-ms="531" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5394-Retrieve Locations for Customer using Invalid account id and valid Site Code, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getLocationswithFilter, TestCaseID=GAPI-5394, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=abc&site=PHX015&type=room , visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLocationswithFilter -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAssets@135606db]" started-at="2023-05-19T18:11:31 IST" name="teardown" finished-at="2023-05-19T18:11:31 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getLocationswithFilter status=SUCCESS method=GetAssets.getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAssets@135606db] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAssets@135606db]" started-at="2023-05-19T18:11:31 IST" name="getLocationswithFilter" data-provider="testCasesData" finished-at="2023-05-19T18:11:31 IST" duration-ms="391" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5397-Retrieve Locations for Customer using Valid account id &Site Code, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getLocationswithFilter, TestCaseID=GAPI-5397, errorMessageType=, standardVisitorBadgeStr=, filters=site=IAD024&accountId=0012E00002dmMWaQAM, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLocationswithFilter -->
        <test-method signature="getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAssets@135606db]" started-at="2023-05-19T18:11:31 IST" name="getLocationswithFilter" data-provider="testCasesData" finished-at="2023-05-19T18:11:32 IST" duration-ms="412" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5391-Retrieve Locations for Customer using account id,Site Code&Type, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getLocationswithFilter, TestCaseID=GAPI-5391, errorMessageType=, standardVisitorBadgeStr=, filters=site=IAD024&accountId=0012E00002dmMWaQAM&type=datacenter, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLocationswithFilter -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAssets@135606db]" started-at="2023-05-19T18:11:31 IST" name="teardown" finished-at="2023-05-19T18:11:31 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getLocationswithFilter status=SUCCESS method=GetAssets.getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAssets@135606db] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAssets@135606db]" started-at="2023-05-19T18:11:32 IST" name="teardown" finished-at="2023-05-19T18:11:32 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getLocationswithFilter status=SUCCESS method=GetAssets.getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAssets@135606db] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyAssetNames(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAssets@135606db]" started-at="2023-05-19T18:11:32 IST" name="verifyAssetNames" data-provider="testCasesData" finished-at="2023-05-19T18:11:32 IST" duration-ms="382" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5348--Verify API user should be able to retrieve the Asset Name for the given Asset Id, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=0121f90f13def200a501b7a66144b050, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyAssetNames, TestCaseID=GAPI-5348, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=POP C003 Zayo Group, LLC, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAssetNames -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAssets@135606db]" started-at="2023-05-19T18:11:32 IST" name="teardown" finished-at="2023-05-19T18:11:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAssetNames status=SUCCESS method=GetAssets.verifyAssetNames(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAssets@135606db] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetAssets -->
      <class name="com.gapi.testCases.UsersRBAC">
        <test-method signature="createUserdetailsRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:04 IST" name="createUserdetailsRBAC" data-provider="testCasesData" finished-at="2023-05-19T18:16:05 IST" duration-ms="782" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5734-New User Creation using  Phone optional parmaters, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test3, phone=+31 1212121212, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=Director of Marketing, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=portal154, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=createUserdetailsRBAC, TestCaseID=GAPI-5734, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createUserdetailsRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:05 IST" name="teardown" finished-at="2023-05-19T18:16:05 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createUserdetailsRBAC status=SUCCESS method=UsersRBAC.createUserdetailsRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="createUserdetailsRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:05 IST" name="createUserdetailsRBAC" data-provider="testCasesData" finished-at="2023-05-19T18:16:06 IST" duration-ms="396" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5739-New User Creation without Last name mandatory parametrs, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test3, phone=+31 1212121212, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=Director of Marketing, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=createUserdetailsRBAC, TestCaseID=GAPI-5739, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createUserdetailsRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:06 IST" name="teardown" finished-at="2023-05-19T18:16:06 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createUserdetailsRBAC status=SUCCESS method=UsersRBAC.createUserdetailsRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="createUserwithoutmandatoryparametersRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:06 IST" name="createUserwithoutmandatoryparametersRBAC" data-provider="testCasesData" finished-at="2023-05-19T18:16:06 IST" duration-ms="393" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5740-New User Creation without Email mandatory parametrs, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test2, phone=+31 1212121212, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=Director of Marketing, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=portal153, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=, methodName=createUserwithoutmandatoryparametersRBAC, TestCaseID=GAPI-5740, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createUserwithoutmandatoryparametersRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:06 IST" name="teardown" finished-at="2023-05-19T18:16:06 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createUserwithoutmandatoryparametersRBAC status=SUCCESS method=UsersRBAC.createUserwithoutmandatoryparametersRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="createUserwithoutmandatoryparametersRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:06 IST" name="createUserwithoutmandatoryparametersRBAC" data-provider="testCasesData" finished-at="2023-05-19T18:16:06 IST" duration-ms="406" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5732-New User Creation - Existing, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test3, phone=+31 1212121212, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=Director of Marketing, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=portal154, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=portal153@gmail.com, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=, methodName=createUserwithoutmandatoryparametersRBAC, TestCaseID=GAPI-5732, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createUserwithoutmandatoryparametersRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:06 IST" name="teardown" finished-at="2023-05-19T18:16:06 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createUserwithoutmandatoryparametersRBAC status=SUCCESS method=UsersRBAC.createUserwithoutmandatoryparametersRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getUserdetailsRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:06 IST" name="getUserdetailsRBAC" data-provider="testCasesData" finished-at="2023-05-19T18:16:07 IST" duration-ms="442" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5746-Retrieve user details by UserID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getUserdetailsRBAC, TestCaseID=GAPI-5746, errorMessageType=, standardVisitorBadgeStr=, filters=1b57781e-2a48-4d4f-a1e8-179f4ca538b8, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getUserdetailsRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:07 IST" name="teardown" finished-at="2023-05-19T18:16:07 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getUserdetailsRBAC status=SUCCESS method=UsersRBAC.getUserdetailsRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getUserdetailsRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:07 IST" name="getUserdetailsRBAC" data-provider="testCasesData" finished-at="2023-05-19T18:16:07 IST" duration-ms="380" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5747-Retrieve user details by Invalid UserID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=, methodName=getUserdetailsRBAC, TestCaseID=GAPI-5747, errorMessageType=, standardVisitorBadgeStr=, filters=1b57781e-2a48-4d4f-a1e8-179f4ca538b82, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getUserdetailsRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:07 IST" name="teardown" finished-at="2023-05-19T18:16:07 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getUserdetailsRBAC status=SUCCESS method=UsersRBAC.getUserdetailsRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getallRolesinfoRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:07 IST" name="getallRolesinfoRBAC" data-provider="testCasesData" finished-at="2023-05-19T18:16:08 IST" duration-ms="540" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5771-Get Role Details by Role ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=cefe9a60-79d4-4f95-a323-3fcf4fe3f7b6, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getallRolesinfoRBAC, TestCaseID=GAPI-5771, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getallRolesinfoRBAC -->
        <test-method signature="getallRolesinfoRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:08 IST" name="getallRolesinfoRBAC" data-provider="testCasesData" finished-at="2023-05-19T18:16:08 IST" duration-ms="426" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5770-Get Roles For Customer Account, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=cefe9a60-79d4-4f95-a323-3fcf4fe3f7b6, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getallRolesinfoRBAC, TestCaseID=GAPI-5770, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getallRolesinfoRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:08 IST" name="teardown" finished-at="2023-05-19T18:16:08 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getallRolesinfoRBAC status=SUCCESS method=UsersRBAC.getallRolesinfoRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:08 IST" name="teardown" finished-at="2023-05-19T18:16:08 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getallRolesinfoRBAC status=SUCCESS method=UsersRBAC.getallRolesinfoRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getallRolesinfoRBACinvalid(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:08 IST" name="getallRolesinfoRBACinvalid" data-provider="testCasesData" finished-at="2023-05-19T18:16:09 IST" duration-ms="408" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5772-Get Role Details by Invalid Role ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=cefe9a60-79d4-4f95-a323-3fcf4fe3f7b61, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=, methodName=getallRolesinfoRBACinvalid, TestCaseID=GAPI-5772, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getallRolesinfoRBACinvalid -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:09 IST" name="teardown" finished-at="2023-05-19T18:16:09 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getallRolesinfoRBACinvalid status=SUCCESS method=UsersRBAC.getallRolesinfoRBACinvalid(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="multipleAssetsAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:09 IST" name="multipleAssetsAssociationRBAC" data-provider="testCasesData" finished-at="2023-05-19T18:16:10 IST" duration-ms="1103" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-6896-Assign a user with multiple Asset id's, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=a4a74e8713123600a501b7a66144b0f4, billingAccountNumber=, assetId1=2ca74e8713123600a501b7a66144b0f4, assetId4=a4a74e8713123600a501b7a66144b0f4, accessEndDate=, assetId3=91aa7e54132e7600a501b7a66144b036, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=multipleAssetsAssociationRBAC, TestCaseID=GAPI-6896, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- multipleAssetsAssociationRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:10 IST" name="teardown" finished-at="2023-05-19T18:16:10 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=multipleAssetsAssociationRBAC status=SUCCESS method=UsersRBAC.multipleAssetsAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="multipleAssetsAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:10 IST" name="multipleAssetsAssociationRBAC" data-provider="testCasesData" finished-at="2023-05-19T18:16:11 IST" duration-ms="1017" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-6895-Assign a user with a single Asset id's, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=91aa7e54132e7600a501b7a66144b036, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=multipleAssetsAssociationRBAC, TestCaseID=GAPI-6895, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- multipleAssetsAssociationRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:11 IST" name="teardown" finished-at="2023-05-19T18:16:11 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=multipleAssetsAssociationRBAC status=SUCCESS method=UsersRBAC.multipleAssetsAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="retrieveUserAccountAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:11 IST" name="retrieveUserAccountAssociationRBAC" data-provider="testCasesData" finished-at="2023-05-19T18:16:11 IST" duration-ms="614" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5751-Retrieve list of Associations of user by ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=retrieveUserAccountAssociationRBAC, TestCaseID=GAPI-5751, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- retrieveUserAccountAssociationRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:11 IST" name="teardown" finished-at="2023-05-19T18:16:11 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=retrieveUserAccountAssociationRBAC status=SUCCESS method=UsersRBAC.retrieveUserAccountAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="retrieveUsercommentsRemoteHandsTicketRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:11 IST" name="retrieveUsercommentsRemoteHandsTicketRBAC" data-provider="testCasesData" finished-at="2023-05-19T18:16:14 IST" duration-ms="2180" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-7107-Commented By -User name, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=retrieveUsercommentsRemoteHandsTicketRBAC, TestCaseID=GAPI-7107, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Existing cross connect or connectivity testing, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- retrieveUsercommentsRemoteHandsTicketRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:14 IST" name="teardown" finished-at="2023-05-19T18:16:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=retrieveUsercommentsRemoteHandsTicketRBAC status=SUCCESS method=UsersRBAC.retrieveUsercommentsRemoteHandsTicketRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:14 IST" name="sitepathAssociationRBAC" data-provider="testCasesData" finished-at="2023-05-19T18:16:15 IST" duration-ms="993" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-6891-Assign a User with  one country and one single city in another country, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=city=Chandler, billingAccountNumber=, assetId1=country=United%20States, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=sitepathAssociationRBAC, TestCaseID=GAPI-6891, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sitepathAssociationRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:15 IST" name="teardown" finished-at="2023-05-19T18:16:15 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=sitepathAssociationRBAC status=SUCCESS method=UsersRBAC.sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:15 IST" name="sitepathAssociationRBAC" data-provider="testCasesData" finished-at="2023-05-19T18:16:15 IST" duration-ms="939" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-6892-Assign a User with  only one Site, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=site=PHX015, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=sitepathAssociationRBAC, TestCaseID=GAPI-6892, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sitepathAssociationRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:15 IST" name="teardown" finished-at="2023-05-19T18:16:15 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=sitepathAssociationRBAC status=SUCCESS method=UsersRBAC.sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:15 IST" name="sitepathAssociationRBAC" data-provider="testCasesData" finished-at="2023-05-19T18:16:16 IST" duration-ms="1003" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-6893-Assign a User with  two Sites, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=site=PHX015, billingAccountNumber=, assetId1=site=IAD024, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=sitepathAssociationRBAC, TestCaseID=GAPI-6893, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sitepathAssociationRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:16 IST" name="teardown" finished-at="2023-05-19T18:16:16 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=sitepathAssociationRBAC status=SUCCESS method=UsersRBAC.sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:16 IST" name="sitepathAssociationRBAC" data-provider="testCasesData" finished-at="2023-05-19T18:16:17 IST" duration-ms="919" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-6894-Assign a User with  one city Atlanta and one site in another city, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=site=PHX015, billingAccountNumber=, assetId1=city=Ashburn, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=sitepathAssociationRBAC, TestCaseID=GAPI-6894, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sitepathAssociationRBAC -->
        <test-method signature="sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:17 IST" name="sitepathAssociationRBAC" data-provider="testCasesData" finished-at="2023-05-19T18:16:18 IST" duration-ms="968" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-6890-Assign a User with  one region and one single country in another region, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=region=North%20America, billingAccountNumber=, assetId1=country=United%20States, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=sitepathAssociationRBAC, TestCaseID=GAPI-6890, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sitepathAssociationRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:17 IST" name="teardown" finished-at="2023-05-19T18:16:17 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=sitepathAssociationRBAC status=SUCCESS method=UsersRBAC.sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:18 IST" name="teardown" finished-at="2023-05-19T18:16:18 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=sitepathAssociationRBAC status=SUCCESS method=UsersRBAC.sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:18 IST" name="sitepathAssociationRBAC" data-provider="testCasesData" finished-at="2023-05-19T18:16:19 IST" duration-ms="961" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-6889-Assign a user with all the sites present in two cities, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=city=Ashburn, billingAccountNumber=, assetId1=city=Chandler, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=sitepathAssociationRBAC, TestCaseID=GAPI-6889, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sitepathAssociationRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:19 IST" name="teardown" finished-at="2023-05-19T18:16:19 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=sitepathAssociationRBAC status=SUCCESS method=UsersRBAC.sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:19 IST" name="sitepathAssociationRBAC" data-provider="testCasesData" finished-at="2023-05-19T18:16:20 IST" duration-ms="941" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-6888-Assign a user with all the sites present in a city, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=city=Ashburn, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=sitepathAssociationRBAC, TestCaseID=GAPI-6888, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sitepathAssociationRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:20 IST" name="teardown" finished-at="2023-05-19T18:16:20 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=sitepathAssociationRBAC status=SUCCESS method=UsersRBAC.sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:20 IST" name="sitepathAssociationRBAC" data-provider="testCasesData" finished-at="2023-05-19T18:16:21 IST" duration-ms="915" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-6887-Assign a user with all the sites present in two countries, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=country=United%20States, billingAccountNumber=, assetId1=country=United%20States, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=sitepathAssociationRBAC, TestCaseID=GAPI-6887, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sitepathAssociationRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:21 IST" name="teardown" finished-at="2023-05-19T18:16:21 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=sitepathAssociationRBAC status=SUCCESS method=UsersRBAC.sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:21 IST" name="sitepathAssociationRBAC" data-provider="testCasesData" finished-at="2023-05-19T18:16:22 IST" duration-ms="945" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-6886-Assign a user with all the sites present in a country, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=country=United%20States, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=sitepathAssociationRBAC, TestCaseID=GAPI-6886, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sitepathAssociationRBAC -->
        <test-method signature="sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:22 IST" name="sitepathAssociationRBAC" data-provider="testCasesData" finished-at="2023-05-19T18:16:23 IST" duration-ms="906" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-6885-Assign a user with all the sites present in two regions, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=region=North%20America, billingAccountNumber=, assetId1=region=North%20America, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=sitepathAssociationRBAC, TestCaseID=GAPI-6885, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sitepathAssociationRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:22 IST" name="teardown" finished-at="2023-05-19T18:16:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=sitepathAssociationRBAC status=SUCCESS method=UsersRBAC.sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:23 IST" name="teardown" finished-at="2023-05-19T18:16:23 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=sitepathAssociationRBAC status=SUCCESS method=UsersRBAC.sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:23 IST" name="sitepathAssociationRBAC" data-provider="testCasesData" finished-at="2023-05-19T18:16:24 IST" duration-ms="948" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-6884-Assign a user with all the sites present in one region, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=region=North%20America, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=sitepathAssociationRBAC, TestCaseID=GAPI-6884, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sitepathAssociationRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:24 IST" name="teardown" finished-at="2023-05-19T18:16:24 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=sitepathAssociationRBAC status=SUCCESS method=UsersRBAC.sitepathAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="userAccountAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:24 IST" name="userAccountAssociationRBAC" data-provider="testCasesData" finished-at="2023-05-19T18:16:25 IST" duration-ms="940" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-6898-GAPI-5758-GAPI-5759-Assign a user with one asset id in one country  and another Asset id in another country, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=91aa7e54132e7600a501b7a66144b036, billingAccountNumber=, assetId1=2ca74e8713123600a501b7a66144b0f4, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=userAccountAssociationRBAC, TestCaseID=GAPI-6898, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- userAccountAssociationRBAC -->
        <test-method signature="userAccountAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:25 IST" name="userAccountAssociationRBAC" data-provider="testCasesData" finished-at="2023-05-19T18:16:26 IST" duration-ms="927" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-6897-GAPI-5773-Assign a user with one asset id in one city and another Asset id in another city, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=a4a74e8713123600a501b7a66144b0f4, billingAccountNumber=, assetId1=2ca74e8713123600a501b7a66144b0f4, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=Test_QA15, phone=999-999-9999, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=Laname1QA3, code=, role=01b6d821-8967-466a-bdc7-4a510db841fe, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=userAccountAssociationRBAC, TestCaseID=GAPI-6897, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=0012E00002dmMWbQAM, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- userAccountAssociationRBAC -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:25 IST" name="teardown" finished-at="2023-05-19T18:16:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=userAccountAssociationRBAC status=SUCCESS method=UsersRBAC.userAccountAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b]" started-at="2023-05-19T18:16:26 IST" name="teardown" finished-at="2023-05-19T18:16:26 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=userAccountAssociationRBAC status=SUCCESS method=UsersRBAC.userAccountAssociationRBAC(java.util.Map)[pri:0, instance:com.gapi.testCases.UsersRBAC@7c51f34b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.UsersRBAC -->
      <class name="com.gapi.testCases.CancelRemoteHandsTicket">
        <test-method signature="verifyCancelRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelRemoteHandsTicket@46271dd6]" started-at="2023-05-19T18:15:49 IST" name="verifyCancelRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:15:52 IST" duration-ms="3663" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3994-Cancel Remote Hands Ticket in New Status, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=Remote Hands Description, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCancelRemoteHandsTicket, TestCaseID=GAPI-3994, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Existing cross connect or connectivity testing, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCancelRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CancelRemoteHandsTicket@46271dd6]" started-at="2023-05-19T18:15:52 IST" name="teardown" finished-at="2023-05-19T18:15:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCancelRemoteHandsTicket status=SUCCESS method=CancelRemoteHandsTicket.verifyCancelRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelRemoteHandsTicket@46271dd6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCancelRemoteHandsTicketwithoutID(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelRemoteHandsTicket@46271dd6]" started-at="2023-05-19T18:15:52 IST" name="verifyCancelRemoteHandsTicketwithoutID" data-provider="testCasesData" finished-at="2023-05-19T18:15:53 IST" duration-ms="506" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3995-Cancel Remote Hands ticket without specifying Mandatory fields ID and/or Cancel Reason, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=Remote Hands Description, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=404, ci=, readFlag=, errorMessage=Resource not found., methodName=verifyCancelRemoteHandsTicketwithoutID, TestCaseID=GAPI-3995, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Existing cross connect or connectivity testing, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCancelRemoteHandsTicketwithoutID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CancelRemoteHandsTicket@46271dd6]" started-at="2023-05-19T18:15:53 IST" name="teardown" finished-at="2023-05-19T18:15:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCancelRemoteHandsTicketwithoutID status=SUCCESS method=CancelRemoteHandsTicket.verifyCancelRemoteHandsTicketwithoutID(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelRemoteHandsTicket@46271dd6] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.CancelRemoteHandsTicket -->
      <class name="com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket">
        <test-method retried="true" signature="addAttachmentstoCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket@7ef27d7f]" started-at="2023-05-19T18:18:06 IST" name="addAttachmentstoCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:18:08 IST" duration-ms="1204" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3843-3844-Adding Attachment to Existing Customer Support Request - with Various file types/formats, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=addAttachmentstoCustomerSupportTicket, TestCaseID=GAPI-3843, errorMessageType=, standardVisitorBadgeStr=, filters=?file_name=sampleattachment.png&requestId=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NoSuchMethodError">
            <message>
              <![CDATA['org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoSuchMethodError: 'org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])'
at org.apache.http.entity.mime.MultipartEntityBuilder.buildEntity(MultipartEntityBuilder.java:219)
at org.apache.http.entity.mime.MultipartEntityBuilder.build(MultipartEntityBuilder.java:240)
at org.apache.http.entity.mime.MultipartEntityBuilder$build$5.call(Unknown Source)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getEntity(RestAssuredMultiPartEntity.groovy:58)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getContentType(RestAssuredMultiPartEntity.groovy:89)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at org.codehaus.groovy.runtime.metaclass.MethodMetaProperty$GetBeanMethodMetaProperty.getProperty(MethodMetaProperty.java:76)
at org.codehaus.groovy.runtime.callsite.GetEffectivePogoPropertySite.getProperty(GetEffectivePogoPropertySite.java:85)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetProperty(AbstractCallSite.java:329)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetPropertySafe(AbstractCallSite.java:448)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.shouldApplyContentTypeFromRestAssuredConfigDelegate(RequestSpecificationImpl.groovy:2139)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:194)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2060)
at io.restassured.internal.http.HTTPBuilder.post(HTTPBuilder.java:350)
at io.restassured.internal.http.HTTPBuilder$post$2.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1194)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)
at io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.FilterContext$next.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1686)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1692)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy:180)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy)
at com.gapi.utilities.TestUtilities.postAttachmentRequest(TestUtilities.java:957)
at com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket.addAttachmentstoCustomerSupportTicket(AddAttachmentToTheCustomerSupportTicket.java:69)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoSuchMethodError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addAttachmentstoCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket@7ef27d7f]" started-at="2023-05-19T18:18:08 IST" name="teardown" finished-at="2023-05-19T18:18:08 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=addAttachmentstoCustomerSupportTicket status=SKIP method=AddAttachmentToTheCustomerSupportTicket.addAttachmentstoCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket@7ef27d7f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="addAttachmentstoCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket@7ef27d7f]" started-at="2023-05-19T18:18:08 IST" name="addAttachmentstoCustomerSupportTicket" data-provider="testCasesData" finished-at="2023-05-19T18:18:09 IST" duration-ms="994" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3843-3844-Adding Attachment to Existing Customer Support Request - with Various file types/formats, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=addAttachmentstoCustomerSupportTicket, TestCaseID=GAPI-3843, errorMessageType=, standardVisitorBadgeStr=, filters=?file_name=sampleattachment.png&requestId=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NoSuchMethodError">
            <message>
              <![CDATA['org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoSuchMethodError: 'org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])'
at org.apache.http.entity.mime.MultipartEntityBuilder.buildEntity(MultipartEntityBuilder.java:219)
at org.apache.http.entity.mime.MultipartEntityBuilder.build(MultipartEntityBuilder.java:240)
at org.apache.http.entity.mime.MultipartEntityBuilder$build$5.call(Unknown Source)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getEntity(RestAssuredMultiPartEntity.groovy:58)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getContentType(RestAssuredMultiPartEntity.groovy:89)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at org.codehaus.groovy.runtime.metaclass.MethodMetaProperty$GetBeanMethodMetaProperty.getProperty(MethodMetaProperty.java:76)
at org.codehaus.groovy.runtime.callsite.GetEffectivePogoPropertySite.getProperty(GetEffectivePogoPropertySite.java:85)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetProperty(AbstractCallSite.java:329)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetPropertySafe(AbstractCallSite.java:448)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.shouldApplyContentTypeFromRestAssuredConfigDelegate(RequestSpecificationImpl.groovy:2139)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:194)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2060)
at io.restassured.internal.http.HTTPBuilder.post(HTTPBuilder.java:350)
at io.restassured.internal.http.HTTPBuilder$post$2.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1194)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)
at io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.FilterContext$next.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1686)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1692)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy:180)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy)
at com.gapi.utilities.TestUtilities.postAttachmentRequest(TestUtilities.java:957)
at com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket.addAttachmentstoCustomerSupportTicket(AddAttachmentToTheCustomerSupportTicket.java:69)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoSuchMethodError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addAttachmentstoCustomerSupportTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket@7ef27d7f]" started-at="2023-05-19T18:18:09 IST" name="teardown" finished-at="2023-05-19T18:18:09 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=addAttachmentstoCustomerSupportTicket status=FAILURE method=AddAttachmentToTheCustomerSupportTicket.addAttachmentstoCustomerSupportTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket@7ef27d7f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="addAttachmentstoCustomerSupportTicketWithOutRequestIDAndfilename(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket@7ef27d7f]" started-at="2023-05-19T18:18:09 IST" name="addAttachmentstoCustomerSupportTicketWithOutRequestIDAndfilename" data-provider="testCasesData" finished-at="2023-05-19T18:18:09 IST" duration-ms="3" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3846-Adding Attachment to Existing Customer Support Request - without mandatory fields RequestID and filename, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=, methodName=addAttachmentstoCustomerSupportTicketWithOutRequestIDAndfilename, TestCaseID=GAPI-3846, errorMessageType=, standardVisitorBadgeStr=, filters=?file_name= &requestId=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NoSuchMethodError">
            <message>
              <![CDATA['org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoSuchMethodError: 'org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])'
at org.apache.http.entity.mime.MultipartEntityBuilder.buildEntity(MultipartEntityBuilder.java:219)
at org.apache.http.entity.mime.MultipartEntityBuilder.build(MultipartEntityBuilder.java:240)
at org.apache.http.entity.mime.MultipartEntityBuilder$build$5.call(Unknown Source)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getEntity(RestAssuredMultiPartEntity.groovy:58)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getContentType(RestAssuredMultiPartEntity.groovy:89)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at org.codehaus.groovy.runtime.metaclass.MethodMetaProperty$GetBeanMethodMetaProperty.getProperty(MethodMetaProperty.java:76)
at org.codehaus.groovy.runtime.callsite.GetEffectivePogoPropertySite.callGetProperty(GetEffectivePogoPropertySite.java:48)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetPropertySafe(AbstractCallSite.java:448)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.shouldApplyContentTypeFromRestAssuredConfigDelegate(RequestSpecificationImpl.groovy:2139)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:194)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2060)
at io.restassured.internal.http.HTTPBuilder.post(HTTPBuilder.java:350)
at io.restassured.internal.http.HTTPBuilder$post$2.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1194)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)
at io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.FilterContext$next.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1686)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1692)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy:180)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy)
at com.gapi.utilities.TestUtilities.postAttachmentRequest(TestUtilities.java:957)
at com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket.addAttachmentstoCustomerSupportTicketWithOutRequestIDAndfilename(AddAttachmentToTheCustomerSupportTicket.java:87)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoSuchMethodError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addAttachmentstoCustomerSupportTicketWithOutRequestIDAndfilename -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket@7ef27d7f]" started-at="2023-05-19T18:18:09 IST" name="teardown" finished-at="2023-05-19T18:18:09 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=addAttachmentstoCustomerSupportTicketWithOutRequestIDAndfilename status=SKIP method=AddAttachmentToTheCustomerSupportTicket.addAttachmentstoCustomerSupportTicketWithOutRequestIDAndfilename(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket@7ef27d7f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="addAttachmentstoCustomerSupportTicketWithOutRequestIDAndfilename(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket@7ef27d7f]" started-at="2023-05-19T18:18:09 IST" name="addAttachmentstoCustomerSupportTicketWithOutRequestIDAndfilename" data-provider="testCasesData" finished-at="2023-05-19T18:18:09 IST" duration-ms="3" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3846-Adding Attachment to Existing Customer Support Request - without mandatory fields RequestID and filename, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=, methodName=addAttachmentstoCustomerSupportTicketWithOutRequestIDAndfilename, TestCaseID=GAPI-3846, errorMessageType=, standardVisitorBadgeStr=, filters=?file_name= &requestId=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NoSuchMethodError">
            <message>
              <![CDATA['org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoSuchMethodError: 'org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])'
at org.apache.http.entity.mime.MultipartEntityBuilder.buildEntity(MultipartEntityBuilder.java:219)
at org.apache.http.entity.mime.MultipartEntityBuilder.build(MultipartEntityBuilder.java:240)
at org.apache.http.entity.mime.MultipartEntityBuilder$build$5.call(Unknown Source)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getEntity(RestAssuredMultiPartEntity.groovy:58)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getContentType(RestAssuredMultiPartEntity.groovy:89)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at org.codehaus.groovy.runtime.metaclass.MethodMetaProperty$GetBeanMethodMetaProperty.getProperty(MethodMetaProperty.java:76)
at org.codehaus.groovy.runtime.callsite.GetEffectivePogoPropertySite.callGetProperty(GetEffectivePogoPropertySite.java:48)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetPropertySafe(AbstractCallSite.java:448)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.shouldApplyContentTypeFromRestAssuredConfigDelegate(RequestSpecificationImpl.groovy:2139)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:194)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2060)
at io.restassured.internal.http.HTTPBuilder.post(HTTPBuilder.java:350)
at io.restassured.internal.http.HTTPBuilder$post$2.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1194)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)
at io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.FilterContext$next.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1686)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1692)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy:180)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy)
at com.gapi.utilities.TestUtilities.postAttachmentRequest(TestUtilities.java:957)
at com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket.addAttachmentstoCustomerSupportTicketWithOutRequestIDAndfilename(AddAttachmentToTheCustomerSupportTicket.java:87)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoSuchMethodError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addAttachmentstoCustomerSupportTicketWithOutRequestIDAndfilename -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket@7ef27d7f]" started-at="2023-05-19T18:18:09 IST" name="teardown" finished-at="2023-05-19T18:18:09 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=addAttachmentstoCustomerSupportTicketWithOutRequestIDAndfilename status=FAILURE method=AddAttachmentToTheCustomerSupportTicket.addAttachmentstoCustomerSupportTicketWithOutRequestIDAndfilename(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket@7ef27d7f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="getAttachmentOfCustomerSupportTicketByID(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket@7ef27d7f]" started-at="2023-05-19T18:18:09 IST" name="getAttachmentOfCustomerSupportTicketByID" data-provider="testCasesData" finished-at="2023-05-19T18:18:09 IST" duration-ms="892" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3848-Get a single Attachment related to a Customer Support ticket (by attachment ID), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAttachmentOfCustomerSupportTicketByID, TestCaseID=GAPI-3848, errorMessageType=, standardVisitorBadgeStr=, filters=?file_name=test&requestId=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Electrical, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NoSuchMethodError">
            <message>
              <![CDATA['org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoSuchMethodError: 'org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])'
at org.apache.http.entity.mime.MultipartEntityBuilder.buildEntity(MultipartEntityBuilder.java:219)
at org.apache.http.entity.mime.MultipartEntityBuilder.build(MultipartEntityBuilder.java:240)
at org.apache.http.entity.mime.MultipartEntityBuilder$build$5.call(Unknown Source)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getEntity(RestAssuredMultiPartEntity.groovy:58)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getContentType(RestAssuredMultiPartEntity.groovy:89)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at org.codehaus.groovy.runtime.metaclass.MethodMetaProperty$GetBeanMethodMetaProperty.getProperty(MethodMetaProperty.java:76)
at org.codehaus.groovy.runtime.callsite.GetEffectivePogoPropertySite.getProperty(GetEffectivePogoPropertySite.java:85)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetProperty(AbstractCallSite.java:329)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetPropertySafe(AbstractCallSite.java:448)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.shouldApplyContentTypeFromRestAssuredConfigDelegate(RequestSpecificationImpl.groovy:2139)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:194)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2060)
at io.restassured.internal.http.HTTPBuilder.post(HTTPBuilder.java:350)
at io.restassured.internal.http.HTTPBuilder$post$2.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1194)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)
at io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.FilterContext$next.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1686)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1692)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy:180)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy)
at com.gapi.utilities.TestUtilities.postAttachmentRequest(TestUtilities.java:957)
at com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket.getAttachmentOfCustomerSupportTicketByID(AddAttachmentToTheCustomerSupportTicket.java:114)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoSuchMethodError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAttachmentOfCustomerSupportTicketByID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket@7ef27d7f]" started-at="2023-05-19T18:18:09 IST" name="teardown" finished-at="2023-05-19T18:18:09 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAttachmentOfCustomerSupportTicketByID status=SKIP method=AddAttachmentToTheCustomerSupportTicket.getAttachmentOfCustomerSupportTicketByID(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket@7ef27d7f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAttachmentOfCustomerSupportTicketByID(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket@7ef27d7f]" started-at="2023-05-19T18:18:09 IST" name="getAttachmentOfCustomerSupportTicketByID" data-provider="testCasesData" finished-at="2023-05-19T18:18:11 IST" duration-ms="1188" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3848-Get a single Attachment related to a Customer Support ticket (by attachment ID), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Customer support description, permissionGroups=, workDescription=, executionFlag=Y, title=title sample, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Facilities Request, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAttachmentOfCustomerSupportTicketByID, TestCaseID=GAPI-3848, errorMessageType=, standardVisitorBadgeStr=, filters=?file_name=test&requestId=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=Telx Rack 01, category=Electrical, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NoSuchMethodError">
            <message>
              <![CDATA['org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoSuchMethodError: 'org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])'
at org.apache.http.entity.mime.MultipartEntityBuilder.buildEntity(MultipartEntityBuilder.java:219)
at org.apache.http.entity.mime.MultipartEntityBuilder.build(MultipartEntityBuilder.java:240)
at org.apache.http.entity.mime.MultipartEntityBuilder$build$5.call(Unknown Source)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getEntity(RestAssuredMultiPartEntity.groovy:58)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getContentType(RestAssuredMultiPartEntity.groovy:89)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at org.codehaus.groovy.runtime.metaclass.MethodMetaProperty$GetBeanMethodMetaProperty.getProperty(MethodMetaProperty.java:76)
at org.codehaus.groovy.runtime.callsite.GetEffectivePogoPropertySite.getProperty(GetEffectivePogoPropertySite.java:85)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetProperty(AbstractCallSite.java:329)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetPropertySafe(AbstractCallSite.java:448)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.shouldApplyContentTypeFromRestAssuredConfigDelegate(RequestSpecificationImpl.groovy:2139)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:194)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2060)
at io.restassured.internal.http.HTTPBuilder.post(HTTPBuilder.java:350)
at io.restassured.internal.http.HTTPBuilder$post$2.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1194)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)
at io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.FilterContext$next.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1686)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1692)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy:180)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy)
at com.gapi.utilities.TestUtilities.postAttachmentRequest(TestUtilities.java:957)
at com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket.getAttachmentOfCustomerSupportTicketByID(AddAttachmentToTheCustomerSupportTicket.java:114)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoSuchMethodError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAttachmentOfCustomerSupportTicketByID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket@7ef27d7f]" started-at="2023-05-19T18:18:11 IST" name="teardown" finished-at="2023-05-19T18:18:11 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAttachmentOfCustomerSupportTicketByID status=FAILURE method=AddAttachmentToTheCustomerSupportTicket.getAttachmentOfCustomerSupportTicketByID(java.util.Map)[pri:0, instance:com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket@7ef27d7f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.AddAttachmentToTheCustomerSupportTicket -->
      <class name="com.gapi.testCases.CreateRemoteHandsTicket">
        <test-method retried="true" signature="createRemoteHandsTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T17:58:16 IST" name="createRemoteHandsTicketAndVerifyEndToEndFlow" data-provider="testCasesData" finished-at="2023-05-19T17:58:25 IST" duration-ms="8486" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4031-GAPI-3993-GAPI-4089-GAPI-3988-Verify Remote Hands Ticket  End to End flow with Request type and Category as Planned work and Existing cross connect or connectivity testing, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=createRemoteHandsTicketAndVerifyEndToEndFlow, TestCaseID=GAPI-4031, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Existing cross connect or connectivity testing, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.AddCommentsToTheRemoteHandsTicket.addCommentsToTheExistingTicket(AddCommentsToTheRemoteHandsTicket.java:91)
at com.gapi.utilities.TestUtilities.addCommentToTheRequestAndVerify(TestUtilities.java:473)
at com.gapi.testCases.CreateRemoteHandsTicket.createRemoteHandsTicketAndVerifyEndToEndFlow(CreateRemoteHandsTicket.java:124)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createRemoteHandsTicketAndVerifyEndToEndFlow -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T17:58:25 IST" name="teardown" finished-at="2023-05-19T17:58:25 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createRemoteHandsTicketAndVerifyEndToEndFlow status=SKIP method=CreateRemoteHandsTicket.createRemoteHandsTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="createRemoteHandsTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T17:58:25 IST" name="createRemoteHandsTicketAndVerifyEndToEndFlow" data-provider="testCasesData" finished-at="2023-05-19T17:58:30 IST" duration-ms="5601" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4031-GAPI-3993-GAPI-4089-GAPI-3988-Verify Remote Hands Ticket  End to End flow with Request type and Category as Planned work and Existing cross connect or connectivity testing, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=createRemoteHandsTicketAndVerifyEndToEndFlow, TestCaseID=GAPI-4031, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Existing cross connect or connectivity testing, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.AddCommentsToTheRemoteHandsTicket.addCommentsToTheExistingTicket(AddCommentsToTheRemoteHandsTicket.java:91)
at com.gapi.utilities.TestUtilities.addCommentToTheRequestAndVerify(TestUtilities.java:473)
at com.gapi.testCases.CreateRemoteHandsTicket.createRemoteHandsTicketAndVerifyEndToEndFlow(CreateRemoteHandsTicket.java:124)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createRemoteHandsTicketAndVerifyEndToEndFlow -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T17:58:30 IST" name="teardown" finished-at="2023-05-19T17:58:30 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createRemoteHandsTicketAndVerifyEndToEndFlow status=FAILURE method=CreateRemoteHandsTicket.createRemoteHandsTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="createRemoteHandsTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T17:58:30 IST" name="createRemoteHandsTicketAndVerifyEndToEndFlow" data-provider="testCasesData" finished-at="2023-05-19T17:58:36 IST" duration-ms="5643" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4084-GAPI-3991-GAPI-4081-GAPI-3985-GAPI-4078-Verify Remote Hands Request End to End flow with Request type and Category as Planned work and Dedicated escort, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=createRemoteHandsTicketAndVerifyEndToEndFlow, TestCaseID=GAPI-4084, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Dedicated escort, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.AddCommentsToTheRemoteHandsTicket.addCommentsToTheExistingTicket(AddCommentsToTheRemoteHandsTicket.java:91)
at com.gapi.utilities.TestUtilities.addCommentToTheRequestAndVerify(TestUtilities.java:473)
at com.gapi.testCases.CreateRemoteHandsTicket.createRemoteHandsTicketAndVerifyEndToEndFlow(CreateRemoteHandsTicket.java:124)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createRemoteHandsTicketAndVerifyEndToEndFlow -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T17:58:36 IST" name="teardown" finished-at="2023-05-19T17:58:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createRemoteHandsTicketAndVerifyEndToEndFlow status=SKIP method=CreateRemoteHandsTicket.createRemoteHandsTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="createRemoteHandsTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T17:58:36 IST" name="createRemoteHandsTicketAndVerifyEndToEndFlow" data-provider="testCasesData" finished-at="2023-05-19T17:58:42 IST" duration-ms="5484" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4084-GAPI-3991-GAPI-4081-GAPI-3985-GAPI-4078-Verify Remote Hands Request End to End flow with Request type and Category as Planned work and Dedicated escort, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=createRemoteHandsTicketAndVerifyEndToEndFlow, TestCaseID=GAPI-4084, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Dedicated escort, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.AddCommentsToTheRemoteHandsTicket.addCommentsToTheExistingTicket(AddCommentsToTheRemoteHandsTicket.java:91)
at com.gapi.utilities.TestUtilities.addCommentToTheRequestAndVerify(TestUtilities.java:473)
at com.gapi.testCases.CreateRemoteHandsTicket.createRemoteHandsTicketAndVerifyEndToEndFlow(CreateRemoteHandsTicket.java:124)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createRemoteHandsTicketAndVerifyEndToEndFlow -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T17:58:42 IST" name="teardown" finished-at="2023-05-19T17:58:42 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createRemoteHandsTicketAndVerifyEndToEndFlow status=FAILURE method=CreateRemoteHandsTicket.createRemoteHandsTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="createRemoteHandsTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T17:58:42 IST" name="createRemoteHandsTicketAndVerifyEndToEndFlow" data-provider="testCasesData" finished-at="2023-05-19T17:58:47 IST" duration-ms="5222" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Remote Hands End to End flow With  Ticket with Request Type as Urgent Work and Category as Power Cycle or reboot, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=createRemoteHandsTicketAndVerifyEndToEndFlow, TestCaseID=Verify Re, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Power cycle or reboot, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.AddCommentsToTheRemoteHandsTicket.addCommentsToTheExistingTicket(AddCommentsToTheRemoteHandsTicket.java:91)
at com.gapi.utilities.TestUtilities.addCommentToTheRequestAndVerify(TestUtilities.java:473)
at com.gapi.testCases.CreateRemoteHandsTicket.createRemoteHandsTicketAndVerifyEndToEndFlow(CreateRemoteHandsTicket.java:124)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createRemoteHandsTicketAndVerifyEndToEndFlow -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T17:58:47 IST" name="teardown" finished-at="2023-05-19T17:58:47 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createRemoteHandsTicketAndVerifyEndToEndFlow status=SKIP method=CreateRemoteHandsTicket.createRemoteHandsTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="createRemoteHandsTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T17:58:47 IST" name="createRemoteHandsTicketAndVerifyEndToEndFlow" data-provider="testCasesData" finished-at="2023-05-19T17:58:52 IST" duration-ms="5439" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify Remote Hands End to End flow With  Ticket with Request Type as Urgent Work and Category as Power Cycle or reboot, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=createRemoteHandsTicketAndVerifyEndToEndFlow, TestCaseID=Verify Re, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Power cycle or reboot, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at com.gapi.testCases.AddCommentsToTheRemoteHandsTicket.addCommentsToTheExistingTicket(AddCommentsToTheRemoteHandsTicket.java:91)
at com.gapi.utilities.TestUtilities.addCommentToTheRequestAndVerify(TestUtilities.java:473)
at com.gapi.testCases.CreateRemoteHandsTicket.createRemoteHandsTicketAndVerifyEndToEndFlow(CreateRemoteHandsTicket.java:124)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createRemoteHandsTicketAndVerifyEndToEndFlow -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T17:58:52 IST" name="teardown" finished-at="2023-05-19T17:58:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createRemoteHandsTicketAndVerifyEndToEndFlow status=FAILURE method=CreateRemoteHandsTicket.createRemoteHandsTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="createRemoteHandsTicketwithNotificationRecipient(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T17:58:52 IST" name="createRemoteHandsTicketwithNotificationRecipient" data-provider="testCasesData" finished-at="2023-05-19T17:58:52 IST" duration-ms="264" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3969-Submit a RH Request - with invalid Notification Recipient email format, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=Request no longer needed, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=400, ci=, readFlag=, errorMessage=Payload 'notificationRecipients' has an invalid email., methodName=createRemoteHandsTicketwithNotificationRecipient, TestCaseID=GAPI-3969, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Existing cross connect or connectivity testing, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createRemoteHandsTicketwithNotificationRecipient -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T17:58:52 IST" name="teardown" finished-at="2023-05-19T17:58:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createRemoteHandsTicketwithNotificationRecipient status=SUCCESS method=CreateRemoteHandsTicket.createRemoteHandsTicketwithNotificationRecipient(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="createRemoteHandsTicketwithNotificationRecipient(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T17:58:52 IST" name="createRemoteHandsTicketwithNotificationRecipient" data-provider="testCasesData" finished-at="2023-05-19T17:58:59 IST" duration-ms="6170" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3968-Submit a RH Request - with multiple Notification Recipients (comma separated email addresses), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=gpuat22-51@yahoo.com,jane_doe@email.com,Testuser@test.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=Request no longer needed, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=createRemoteHandsTicketwithNotificationRecipient, TestCaseID=GAPI-3968, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Existing cross connect or connectivity testing, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createRemoteHandsTicketwithNotificationRecipient -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T17:58:59 IST" name="teardown" finished-at="2023-05-19T17:58:59 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createRemoteHandsTicketwithNotificationRecipient status=SUCCESS method=CreateRemoteHandsTicket.createRemoteHandsTicketwithNotificationRecipient(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRHTicketForInvalidUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T17:58:59 IST" name="verifyCreateRHTicketForInvalidUser" data-provider="testCasesData" finished-at="2023-05-19T17:58:59 IST" duration-ms="236" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Remote Hands Ticket with Invalid user RBAC, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=title sample, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyCreateRHTicketForInvalidUser, TestCaseID=Create Re, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Customer premise cabling, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRHTicketForInvalidUser -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T17:58:59 IST" name="teardown" finished-at="2023-05-19T17:58:59 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRHTicketForInvalidUser status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRHTicketForInvalidUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T17:58:59 IST" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T17:59:10 IST" duration-ms="11283" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3975-Create Remote Hands Ticket With Request Type as Planned Work and category as Existing cross connect or connectivity testing, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, TestCaseID=GAPI-3975, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Existing cross connect or connectivity testing, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T17:59:10 IST" name="teardown" finished-at="2023-05-19T17:59:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T17:59:10 IST" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T17:59:22 IST" duration-ms="11872" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3976-Create Remote Hands Ticket  With Request Type as Planned Work and Category as Dedicated escort, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, TestCaseID=GAPI-3976, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Dedicated escort, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T17:59:22 IST" name="teardown" finished-at="2023-05-19T17:59:22 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T17:59:22 IST" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T17:59:34 IST" duration-ms="11550" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3977-Create Remote Hands Ticket With Request Type as Planned Work and  Category as Customer premise cabling, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=Rfer09876545, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=qa_sampleTesting@Yahoo.in, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, TestCaseID=GAPI-3977, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Customer premise cabling, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T17:59:34 IST" name="teardown" finished-at="2023-05-19T17:59:34 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T17:59:34 IST" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T17:59:45 IST" duration-ms="11483" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3978-Create Remote Hands Ticket With RequestType as Planned  Work and Category as Auditing, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, TestCaseID=GAPI-3978, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Auditing, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T17:59:45 IST" name="teardown" finished-at="2023-05-19T17:59:45 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T17:59:45 IST" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T17:59:56 IST" duration-ms="10588" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3979-Create Remote Hands Ticket with Request Type as Planned Work and Category as Tape swaps, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF097654677, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=sample@gmail.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO000987, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, TestCaseID=GAPI-3979, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Tape swaps, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T17:59:56 IST" name="teardown" finished-at="2023-05-19T17:59:56 IST" duration-ms="83" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T17:59:56 IST" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:00:08 IST" duration-ms="12175" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3980-Create Remote Hands Ticket with Request Type as Planned Work and Category as Equipment de-installation, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, TestCaseID=GAPI-3980, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Equipment de-installation, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:00:08 IST" name="teardown" finished-at="2023-05-19T18:00:08 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:00:08 IST" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:00:20 IST" duration-ms="12169" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3981-Create Remote Hands Ticket with Request Type as Planned Work and Category as Equipment installation, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, TestCaseID=GAPI-3981, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Equipment installation, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:00:20 IST" name="teardown" finished-at="2023-05-19T18:00:20 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:00:20 IST" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:00:32 IST" duration-ms="11551" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3982-Create Remote Hands Ticket with Request Type as Planned Work and Category as Other, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, TestCaseID=GAPI-3982, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Other, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:00:32 IST" name="teardown" finished-at="2023-05-19T18:00:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:00:32 IST" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:00:43 IST" duration-ms="11204" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3970-Create Remote Hands Request With RequestType as Urgent Work and Category as Existing cross connect or connectivity testing, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, TestCaseID=GAPI-3970, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Existing cross connect or connectivity testing, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:00:43 IST" name="teardown" finished-at="2023-05-19T18:00:43 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:00:43 IST" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:00:54 IST" duration-ms="10660" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3971-Create Remote Hands Request With RequestType asUrgent Work and Category as Equipment troubleshoot or replacement, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01456788, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=testingsample_testing@yahoo.in, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO58725788, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, TestCaseID=GAPI-3971, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Equipment troubleshoot or replacement, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:00:54 IST" name="teardown" finished-at="2023-05-19T18:00:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:00:54 IST" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:01:04 IST" duration-ms="10464" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3972-Create Remote Hands Request With RequestType as Urgent Work and Category as KVM (keyboard, video, mouse) assistance, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, TestCaseID=GAPI-3972, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=KVM (keyboard, video, mouse) assistance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:01:04 IST" name="teardown" finished-at="2023-05-19T18:01:04 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:01:04 IST" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:01:16 IST" duration-ms="11484" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3973-Create Remote Hands Ticket With RequestType as Urgent Work and Category as Power cycle or reboot, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, TestCaseID=GAPI-3973, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Power cycle or reboot, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:01:16 IST" name="teardown" finished-at="2023-05-19T18:01:16 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:01:16 IST" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:01:27 IST" duration-ms="11986" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3974-Create Remote Hands Ticket with Request Type as Urgent Work and Category as Other, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, TestCaseID=GAPI-3974, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Other, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:01:27 IST" name="teardown" finished-at="2023-05-19T18:01:27 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:01:27 IST" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:01:28 IST" duration-ms="270" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3984-Verify Create Remote Hands Ticket with Request Type as Planned Work but Without Category , search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=400, ci=, readFlag=, errorMessage=Payload 'category' has an unexpected value for the given 'requestType',Mandatory payload 'category' has an invalid value., methodName=verifyCreateRemoteHandsTicket, TestCaseID=GAPI-3984, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category="", visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:01:28 IST" name="teardown" finished-at="2023-05-19T18:01:28 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:01:28 IST" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:01:28 IST" duration-ms="275" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3983-Verify Create Remote Hands Ticket with Request Type as Urgent Work but Without Category , search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=400, ci=, readFlag=, errorMessage=Payload 'category' has an unexpected value for the given 'requestType',Mandatory payload 'category' has an invalid value., methodName=verifyCreateRemoteHandsTicket, TestCaseID=GAPI-3983, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category="", visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:01:28 IST" name="teardown" finished-at="2023-05-19T18:01:28 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:01:28 IST" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:01:39 IST" duration-ms="11378" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3962-Create Remote Hands Ticket with only Mandatory Parameters, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=Remote Hands Description, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, TestCaseID=GAPI-3962, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Existing cross connect or connectivity testing, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:01:39 IST" name="teardown" finished-at="2023-05-19T18:01:39 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:01:39 IST" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:01:51 IST" duration-ms="11236" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3963-Create Remote Hands Ticket With Location Optional Parameter, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=Remote Hands Description, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, TestCaseID=GAPI-3963, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=Other, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:01:51 IST" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:02:02 IST" duration-ms="11328" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3965-Create Remote Hands Ticket With Customer Reference Optional Parameter, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=Remote Hands Description, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, TestCaseID=GAPI-3965, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Existing cross connect or connectivity testing, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:01:51 IST" name="teardown" finished-at="2023-05-19T18:01:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:02:02 IST" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:02:14 IST" duration-ms="11732" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3967-Create Remote Hands Ticket with One Notification Recipient Optional Parameter, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=Remote Hands Description, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, TestCaseID=GAPI-3967, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Power cycle or reboot, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:02:02 IST" name="teardown" finished-at="2023-05-19T18:02:02 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:02:14 IST" name="teardown" finished-at="2023-05-19T18:02:14 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:02:14 IST" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:02:26 IST" duration-ms="12254" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Remote Hands Ticket with Multiple Notification Recipient Optional Parameter, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com,jake_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=Remote Hands Description, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, TestCaseID=Create Re, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Customer premise cabling, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:02:26 IST" name="teardown" finished-at="2023-05-19T18:02:26 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:02:26 IST" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:02:26 IST" duration-ms="285" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3969-Create Remote Hands Ticket with Invalid Email Format In Notification Recipient , search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jan_test, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=Remote Hands Description, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=400, ci=, readFlag=, errorMessage=Payload 'notificationRecipients' has an invalid email., methodName=verifyCreateRemoteHandsTicket, TestCaseID=GAPI-3969, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Customer premise cabling, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:02:26 IST" name="teardown" finished-at="2023-05-19T18:02:26 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:02:26 IST" name="verifyCreateRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:02:38 IST" duration-ms="11506" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-3966-Create Remote Hands Ticket With Reference Ticket Optional Parameter, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO5872547, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=Remote Hands Description, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateRemoteHandsTicket, TestCaseID=GAPI-3966, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=Customer premise cabling, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160]" started-at="2023-05-19T18:02:38 IST" name="teardown" finished-at="2023-05-19T18:02:38 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateRemoteHandsTicket status=SUCCESS method=CreateRemoteHandsTicket.verifyCreateRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateRemoteHandsTicket@1e81f160] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.CreateRemoteHandsTicket -->
      <class name="com.gapi.testCases.GetPOPPOEDetails">
        <test-method signature="getPopDetailsInfo()[pri:0, instance:com.gapi.testCases.GetPOPPOEDetails@5b3f61ff]" started-at="2023-05-19T18:13:18 IST" name="getPopDetailsInfo" finished-at="2023-05-19T18:13:21 IST" duration-ms="2986" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPopDetailsInfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetPOPPOEDetails@5b3f61ff]" started-at="2023-05-19T18:13:21 IST" name="teardown" finished-at="2023-05-19T18:13:21 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getPopDetailsInfo status=SUCCESS method=GetPOPPOEDetails.getPopDetailsInfo()[pri:0, instance:com.gapi.testCases.GetPOPPOEDetails@5b3f61ff] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getPopDetailsInfoWithInvalidGlobalUltimate()[pri:0, instance:com.gapi.testCases.GetPOPPOEDetails@5b3f61ff]" started-at="2023-05-19T18:13:21 IST" name="getPopDetailsInfoWithInvalidGlobalUltimate" finished-at="2023-05-19T18:13:22 IST" duration-ms="356" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPopDetailsInfoWithInvalidGlobalUltimate -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetPOPPOEDetails@5b3f61ff]" started-at="2023-05-19T18:13:22 IST" name="teardown" finished-at="2023-05-19T18:13:22 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getPopDetailsInfoWithInvalidGlobalUltimate status=SUCCESS method=GetPOPPOEDetails.getPopDetailsInfoWithInvalidGlobalUltimate()[pri:0, instance:com.gapi.testCases.GetPOPPOEDetails@5b3f61ff] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getPopDetailsInfoWithInvalidLegalentity()[pri:0, instance:com.gapi.testCases.GetPOPPOEDetails@5b3f61ff]" started-at="2023-05-19T18:13:22 IST" name="getPopDetailsInfoWithInvalidLegalentity" finished-at="2023-05-19T18:13:22 IST" duration-ms="372" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPopDetailsInfoWithInvalidLegalentity -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetPOPPOEDetails@5b3f61ff]" started-at="2023-05-19T18:13:22 IST" name="teardown" finished-at="2023-05-19T18:13:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getPopDetailsInfoWithInvalidLegalentity status=SUCCESS method=GetPOPPOEDetails.getPopDetailsInfoWithInvalidLegalentity()[pri:0, instance:com.gapi.testCases.GetPOPPOEDetails@5b3f61ff] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getPopDetailsInfoWithInvalidToken()[pri:0, instance:com.gapi.testCases.GetPOPPOEDetails@5b3f61ff]" started-at="2023-05-19T18:13:22 IST" name="getPopDetailsInfoWithInvalidToken" finished-at="2023-05-19T18:13:22 IST" duration-ms="192" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPopDetailsInfoWithInvalidToken -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetPOPPOEDetails@5b3f61ff]" started-at="2023-05-19T18:13:22 IST" name="teardown" finished-at="2023-05-19T18:13:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getPopDetailsInfoWithInvalidToken status=SUCCESS method=GetPOPPOEDetails.getPopDetailsInfoWithInvalidToken()[pri:0, instance:com.gapi.testCases.GetPOPPOEDetails@5b3f61ff] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetPOPPOEDetails -->
      <class name="com.gapi.testCases.GetRegions">
        <test-method signature="getRegionsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRegions@68034211]" started-at="2023-05-19T18:11:50 IST" name="getRegionsInformation" data-provider="testCasesData" finished-at="2023-05-19T18:11:51 IST" duration-ms="635" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Validate if the Response has Regions field in addition to the 200 code, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getRegionsInformation, TestCaseID=Validate, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWaQAM, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getRegionsInformation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRegions@68034211]" started-at="2023-05-19T18:11:51 IST" name="teardown" finished-at="2023-05-19T18:11:51 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getRegionsInformation status=SUCCESS method=GetRegions.getRegionsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRegions@68034211] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetRegions -->
      <class name="com.gapi.testCases.GetLocations">
        <test-method signature="getLocationsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@1187c9e8]" started-at="2023-05-19T18:11:25 IST" name="getLocationsInformation" data-provider="testCasesData" finished-at="2023-05-19T18:11:25 IST" duration-ms="388" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Validate if the Response JSON object has all the fields mentioned in the swagger( EX: id, CreateTimestanp,ModifiedTimestamp, Assetname ..etc, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getLocationsInformation, TestCaseID=Validate, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWaQAM&site=PHX015&type=room, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLocationsInformation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetLocations@1187c9e8]" started-at="2023-05-19T18:11:25 IST" name="teardown" finished-at="2023-05-19T18:11:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getLocationsInformation status=SUCCESS method=GetLocations.getLocationsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@1187c9e8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getLocationsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@1187c9e8]" started-at="2023-05-19T18:11:25 IST" name="getLocationsInformation" data-provider="testCasesData" finished-at="2023-05-19T18:11:26 IST" duration-ms="442" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5388-Retrieve Locations for Customer - Markets using account id &Region, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getLocationsInformation, TestCaseID=GAPI-5388, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWaQAM&site=PHX015&region=North America, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLocationsInformation -->
        <test-method signature="getLocationsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@1187c9e8]" started-at="2023-05-19T18:11:26 IST" name="getLocationsInformation" data-provider="testCasesData" finished-at="2023-05-19T18:11:26 IST" duration-ms="390" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify if API user is able to retrieve the location details with filters, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getLocationsInformation, TestCaseID=Verify if, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWaQAM&site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLocationsInformation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetLocations@1187c9e8]" started-at="2023-05-19T18:11:26 IST" name="teardown" finished-at="2023-05-19T18:11:26 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getLocationsInformation status=SUCCESS method=GetLocations.getLocationsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@1187c9e8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getLocationsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@1187c9e8]" started-at="2023-05-19T18:11:26 IST" name="getLocationsInformation" data-provider="testCasesData" finished-at="2023-05-19T18:11:26 IST" duration-ms="409" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Verify if API user is able to retrieve the location details with filters Region & Country, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getLocationsInformation, TestCaseID=Verify if, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWaQAM&site=PHX015&country=United States&region=North America, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLocationsInformation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetLocations@1187c9e8]" started-at="2023-05-19T18:11:26 IST" name="teardown" finished-at="2023-05-19T18:11:26 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getLocationsInformation status=SUCCESS method=GetLocations.getLocationsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@1187c9e8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetLocations@1187c9e8]" started-at="2023-05-19T18:11:26 IST" name="teardown" finished-at="2023-05-19T18:11:26 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getLocationsInformation status=SUCCESS method=GetLocations.getLocationsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@1187c9e8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@1187c9e8]" started-at="2023-05-19T18:11:26 IST" name="getLocationswithFilter" data-provider="testCasesData" finished-at="2023-05-19T18:11:27 IST" duration-ms="393" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5395-Retrieve Locations for Customer using Valid account id and Invalid Site Code, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getLocationswithFilter, TestCaseID=GAPI-5395, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=0012E00002dmMWbQAM&site=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLocationswithFilter -->
        <test-method signature="getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@1187c9e8]" started-at="2023-05-19T18:11:27 IST" name="getLocationswithFilter" data-provider="testCasesData" finished-at="2023-05-19T18:11:27 IST" duration-ms="410" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5394-Retrieve Locations for Customer using Invalid account id and valid Site Code, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getLocationswithFilter, TestCaseID=GAPI-5394, errorMessageType=, standardVisitorBadgeStr=, filters=accountId=abc&site=PHX015&type=room , visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLocationswithFilter -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetLocations@1187c9e8]" started-at="2023-05-19T18:11:27 IST" name="teardown" finished-at="2023-05-19T18:11:27 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getLocationswithFilter status=SUCCESS method=GetLocations.getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@1187c9e8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetLocations@1187c9e8]" started-at="2023-05-19T18:11:27 IST" name="teardown" finished-at="2023-05-19T18:11:27 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getLocationswithFilter status=SUCCESS method=GetLocations.getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@1187c9e8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@1187c9e8]" started-at="2023-05-19T18:11:27 IST" name="getLocationswithFilter" data-provider="testCasesData" finished-at="2023-05-19T18:11:28 IST" duration-ms="400" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5397-Retrieve Locations for Customer using Valid account id &Site Code, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getLocationswithFilter, TestCaseID=GAPI-5397, errorMessageType=, standardVisitorBadgeStr=, filters=site=IAD024&accountId=0012E00002dmMWaQAM, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLocationswithFilter -->
        <test-method signature="getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@1187c9e8]" started-at="2023-05-19T18:11:28 IST" name="getLocationswithFilter" data-provider="testCasesData" finished-at="2023-05-19T18:11:28 IST" duration-ms="399" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5391-Retrieve Locations for Customer using account id,Site Code&Type, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getLocationswithFilter, TestCaseID=GAPI-5391, errorMessageType=, standardVisitorBadgeStr=, filters=site=IAD024&accountId=0012E00002dmMWaQAM&type=datacenter, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getLocationswithFilter -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetLocations@1187c9e8]" started-at="2023-05-19T18:11:28 IST" name="teardown" finished-at="2023-05-19T18:11:28 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getLocationswithFilter status=SUCCESS method=GetLocations.getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@1187c9e8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetLocations@1187c9e8]" started-at="2023-05-19T18:11:28 IST" name="teardown" finished-at="2023-05-19T18:11:28 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getLocationswithFilter status=SUCCESS method=GetLocations.getLocationswithFilter(java.util.Map)[pri:0, instance:com.gapi.testCases.GetLocations@1187c9e8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetLocations -->
      <class name="com.gapi.testCases.GetCountries">
        <test-method signature="getCountriesInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCountries@4b34fff9]" started-at="2023-05-19T18:11:24 IST" name="getCountriesInformation" data-provider="testCasesData" finished-at="2023-05-19T18:11:24 IST" duration-ms="558" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Validate if the Response has Countries field in addition to the 200 code, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCountriesInformation, TestCaseID=Validate, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCountriesInformation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCountries@4b34fff9]" started-at="2023-05-19T18:11:24 IST" name="teardown" finished-at="2023-05-19T18:11:24 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCountriesInformation status=SUCCESS method=GetCountries.getCountriesInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCountries@4b34fff9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCountriesInformationusingfilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCountries@4b34fff9]" started-at="2023-05-19T18:11:24 IST" name="getCountriesInformationusingfilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:25 IST" duration-ms="696" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5381-Retrieve Locations for Customer - Countries using account id &Region, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCountriesInformationusingfilters, TestCaseID=GAPI-5381, errorMessageType=, standardVisitorBadgeStr=, filters=?region=North America&accountId=0012E00002dmMWbQAM, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCountriesInformationusingfilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCountries@4b34fff9]" started-at="2023-05-19T18:11:25 IST" name="teardown" finished-at="2023-05-19T18:11:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCountriesInformationusingfilters status=SUCCESS method=GetCountries.getCountriesInformationusingfilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCountries@4b34fff9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetCountries -->
      <class name="com.gapi.testCases.CreateShipmentsTicket">
        <test-method retried="true" signature="AddAttachmentstoShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:08:25 IST" name="AddAttachmentstoShipmentsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:08:25 IST" duration-ms="4" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4026-SR- Submit Shipping & Receiving Request with Various file types/formats, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO8686265, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=title sample1, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=AddAttachmentstoShipmentsTicket, TestCaseID=GAPI-4026, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Power cycle or reboot, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NoSuchMethodError">
            <message>
              <![CDATA['org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoSuchMethodError: 'org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])'
at org.apache.http.entity.mime.MultipartEntityBuilder.buildEntity(MultipartEntityBuilder.java:219)
at org.apache.http.entity.mime.MultipartEntityBuilder.build(MultipartEntityBuilder.java:240)
at org.apache.http.entity.mime.MultipartEntityBuilder$build$5.call(Unknown Source)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getEntity(RestAssuredMultiPartEntity.groovy:58)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getContentType(RestAssuredMultiPartEntity.groovy:89)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at org.codehaus.groovy.runtime.metaclass.MethodMetaProperty$GetBeanMethodMetaProperty.getProperty(MethodMetaProperty.java:76)
at org.codehaus.groovy.runtime.callsite.GetEffectivePogoPropertySite.getProperty(GetEffectivePogoPropertySite.java:85)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetProperty(AbstractCallSite.java:329)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetPropertySafe(AbstractCallSite.java:448)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.shouldApplyContentTypeFromRestAssuredConfigDelegate(RequestSpecificationImpl.groovy:2139)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:51)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:66)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:194)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2060)
at io.restassured.internal.http.HTTPBuilder.post(HTTPBuilder.java:350)
at io.restassured.internal.http.HTTPBuilder$post$2.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1194)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)
at io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.FilterContext$next.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1686)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1692)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy:180)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy)
at com.gapi.utilities.TestUtilities.postAttachmentRequest(TestUtilities.java:957)
at com.gapi.testCases.CreateShipmentsTicket.AddAttachmentstoShipmentsTicket(CreateShipmentsTicket.java:323)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoSuchMethodError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddAttachmentstoShipmentsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:08:25 IST" name="teardown" finished-at="2023-05-19T18:08:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AddAttachmentstoShipmentsTicket status=SKIP method=CreateShipmentsTicket.AddAttachmentstoShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="AddAttachmentstoShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:08:25 IST" name="AddAttachmentstoShipmentsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:08:25 IST" duration-ms="4" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4026-SR- Submit Shipping & Receiving Request with Various file types/formats, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO8686265, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=title sample1, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=API Test 03052021. Please locate the Cisco UCS server in rack1 and connect to the KVM. Please provide screenshots once you connect to the KVM., cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Urgent Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=AddAttachmentstoShipmentsTicket, TestCaseID=GAPI-4026, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Power cycle or reboot, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NoSuchMethodError">
            <message>
              <![CDATA['org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoSuchMethodError: 'org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])'
at org.apache.http.entity.mime.MultipartEntityBuilder.buildEntity(MultipartEntityBuilder.java:219)
at org.apache.http.entity.mime.MultipartEntityBuilder.build(MultipartEntityBuilder.java:240)
at org.apache.http.entity.mime.MultipartEntityBuilder$build$5.call(Unknown Source)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getEntity(RestAssuredMultiPartEntity.groovy:58)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getContentType(RestAssuredMultiPartEntity.groovy:89)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at org.codehaus.groovy.runtime.metaclass.MethodMetaProperty$GetBeanMethodMetaProperty.getProperty(MethodMetaProperty.java:76)
at org.codehaus.groovy.runtime.callsite.GetEffectivePogoPropertySite.callGetProperty(GetEffectivePogoPropertySite.java:48)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetPropertySafe(AbstractCallSite.java:448)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.shouldApplyContentTypeFromRestAssuredConfigDelegate(RequestSpecificationImpl.groovy:2139)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:194)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2060)
at io.restassured.internal.http.HTTPBuilder.post(HTTPBuilder.java:350)
at io.restassured.internal.http.HTTPBuilder$post$2.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1194)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)
at io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.FilterContext$next.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1686)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1692)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy:180)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy)
at com.gapi.utilities.TestUtilities.postAttachmentRequest(TestUtilities.java:957)
at com.gapi.testCases.CreateShipmentsTicket.AddAttachmentstoShipmentsTicket(CreateShipmentsTicket.java:323)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoSuchMethodError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddAttachmentstoShipmentsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:08:25 IST" name="teardown" finished-at="2023-05-19T18:08:25 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AddAttachmentstoShipmentsTicket status=FAILURE method=CreateShipmentsTicket.AddAttachmentstoShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="CreateShipmentsTicketeithInvalidNotificationRecipient(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:08:25 IST" name="CreateShipmentsTicketeithInvalidNotificationRecipient" data-provider="testCasesData" finished-at="2023-05-19T18:08:25 IST" duration-ms="267" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4022-Submit a S&R tickets - with invalid Notification Recipient email format, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=Payload 'notificationRecipients' is not an valid email address., methodName=CreateShipmentsTicketeithInvalidNotificationRecipient, TestCaseID=GAPI-4022, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CreateShipmentsTicketeithInvalidNotificationRecipient -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:08:25 IST" name="teardown" finished-at="2023-05-19T18:08:25 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreateShipmentsTicketeithInvalidNotificationRecipient status=SUCCESS method=CreateShipmentsTicket.CreateShipmentsTicketeithInvalidNotificationRecipient(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="createShipmentsTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:08:25 IST" name="createShipmentsTicketAndVerifyEndToEndFlow" data-provider="testCasesData" finished-at="2023-05-19T18:08:30 IST" duration-ms="4881" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-GAPI-4057-GAPI-4030-GAPI-4068-GAPI-4073-GAPI-4024-GAPI-4064-GAPI-4058-GAPI-4063-Add Comment to Existing S&R Tickets in Status -New(with mandatory fields -  request ID), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=UPS, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Shipment Description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=createShipmentsTicketAndVerifyEndToEndFlow, TestCaseID=GAPI-GAPI, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NoSuchMethodError">
            <message>
              <![CDATA['org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoSuchMethodError: 'org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])'
at org.apache.http.entity.mime.MultipartEntityBuilder.buildEntity(MultipartEntityBuilder.java:219)
at org.apache.http.entity.mime.MultipartEntityBuilder.build(MultipartEntityBuilder.java:240)
at org.apache.http.entity.mime.MultipartEntityBuilder$build$5.call(Unknown Source)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getEntity(RestAssuredMultiPartEntity.groovy:58)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getContentType(RestAssuredMultiPartEntity.groovy:89)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at org.codehaus.groovy.runtime.metaclass.MethodMetaProperty$GetBeanMethodMetaProperty.getProperty(MethodMetaProperty.java:76)
at org.codehaus.groovy.runtime.callsite.GetEffectivePogoPropertySite.getProperty(GetEffectivePogoPropertySite.java:85)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetProperty(AbstractCallSite.java:329)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetPropertySafe(AbstractCallSite.java:448)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.shouldApplyContentTypeFromRestAssuredConfigDelegate(RequestSpecificationImpl.groovy:2139)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:51)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:66)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:194)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2060)
at io.restassured.internal.http.HTTPBuilder.post(HTTPBuilder.java:350)
at io.restassured.internal.http.HTTPBuilder$post$2.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1194)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)
at io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.FilterContext$next.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1686)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1692)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy:180)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy)
at com.gapi.utilities.TestUtilities.postAttachmentRequest(TestUtilities.java:957)
at com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket.uploadAttachmentToTheExistingTicket(AddAttachmentsToTheRemoteHandsTicket.java:38)
at com.gapi.utilities.TestUtilities.addAttachmentToTheRequestAndVerify(TestUtilities.java:608)
at com.gapi.testCases.CreateShipmentsTicket.createShipmentsTicketAndVerifyEndToEndFlow(CreateShipmentsTicket.java:91)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoSuchMethodError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createShipmentsTicketAndVerifyEndToEndFlow -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:08:30 IST" name="teardown" finished-at="2023-05-19T18:08:30 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createShipmentsTicketAndVerifyEndToEndFlow status=SKIP method=CreateShipmentsTicket.createShipmentsTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="createShipmentsTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:08:30 IST" name="createShipmentsTicketAndVerifyEndToEndFlow" data-provider="testCasesData" finished-at="2023-05-19T18:08:35 IST" duration-ms="4970" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-GAPI-4057-GAPI-4030-GAPI-4068-GAPI-4073-GAPI-4024-GAPI-4064-GAPI-4058-GAPI-4063-Add Comment to Existing S&R Tickets in Status -New(with mandatory fields -  request ID), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=UPS, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Shipment Description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=createShipmentsTicketAndVerifyEndToEndFlow, TestCaseID=GAPI-GAPI, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NoSuchMethodError">
            <message>
              <![CDATA['org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoSuchMethodError: 'org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])'
at org.apache.http.entity.mime.MultipartEntityBuilder.buildEntity(MultipartEntityBuilder.java:219)
at org.apache.http.entity.mime.MultipartEntityBuilder.build(MultipartEntityBuilder.java:240)
at org.apache.http.entity.mime.MultipartEntityBuilder$build$5.call(Unknown Source)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getEntity(RestAssuredMultiPartEntity.groovy:58)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getContentType(RestAssuredMultiPartEntity.groovy:89)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at org.codehaus.groovy.runtime.metaclass.MethodMetaProperty$GetBeanMethodMetaProperty.getProperty(MethodMetaProperty.java:76)
at org.codehaus.groovy.runtime.callsite.GetEffectivePogoPropertySite.getProperty(GetEffectivePogoPropertySite.java:85)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetProperty(AbstractCallSite.java:329)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetPropertySafe(AbstractCallSite.java:448)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.shouldApplyContentTypeFromRestAssuredConfigDelegate(RequestSpecificationImpl.groovy:2139)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:51)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:66)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:194)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2060)
at io.restassured.internal.http.HTTPBuilder.post(HTTPBuilder.java:350)
at io.restassured.internal.http.HTTPBuilder$post$2.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1194)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)
at io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.FilterContext$next.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1686)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1692)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy:180)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy)
at com.gapi.utilities.TestUtilities.postAttachmentRequest(TestUtilities.java:957)
at com.gapi.testCases.AddAttachmentsToTheRemoteHandsTicket.uploadAttachmentToTheExistingTicket(AddAttachmentsToTheRemoteHandsTicket.java:38)
at com.gapi.utilities.TestUtilities.addAttachmentToTheRequestAndVerify(TestUtilities.java:608)
at com.gapi.testCases.CreateShipmentsTicket.createShipmentsTicketAndVerifyEndToEndFlow(CreateShipmentsTicket.java:91)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoSuchMethodError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createShipmentsTicketAndVerifyEndToEndFlow -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:08:35 IST" name="teardown" finished-at="2023-05-19T18:08:35 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createShipmentsTicketAndVerifyEndToEndFlow status=FAILURE method=CreateShipmentsTicket.createShipmentsTicketAndVerifyEndToEndFlow(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="invalidEstimatedDeliveryDateFormatSHTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:08:35 IST" name="invalidEstimatedDeliveryDateFormatSHTicket" data-provider="testCasesData" finished-at="2023-05-19T18:08:36 IST" duration-ms="1100" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4011-SR- Submit  S&R tickets with invalid date format for Estimated delivery time, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1.0, firstName=, phone=, courier=USP, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=xyz, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=invalidEstimatedDeliveryDateFormatSHTicket, TestCaseID=GAPI-4011, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidEstimatedDeliveryDateFormatSHTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:08:36 IST" name="teardown" finished-at="2023-05-19T18:08:36 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=invalidEstimatedDeliveryDateFormatSHTicket status=SUCCESS method=CreateShipmentsTicket.invalidEstimatedDeliveryDateFormatSHTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="postingAttachmentOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:08:36 IST" name="postingAttachmentOfAnExistingShippingReceivingTicket" data-provider="testCasesData" finished-at="2023-05-19T18:08:36 IST" duration-ms="5" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4025-SR- Submit Shipping & Receiving Request with multiple Attachments  ( posting 1 attachment at a time), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO8686265, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType= Shipments Ticket, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=postingAttachmentOfAnExistingShippingReceivingTicket, TestCaseID=GAPI-4025, errorMessageType=, standardVisitorBadgeStr=, filters=?filename=Sampleimage.png&requestId=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NoSuchMethodError">
            <message>
              <![CDATA['org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoSuchMethodError: 'org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])'
at org.apache.http.entity.mime.MultipartEntityBuilder.buildEntity(MultipartEntityBuilder.java:219)
at org.apache.http.entity.mime.MultipartEntityBuilder.build(MultipartEntityBuilder.java:240)
at org.apache.http.entity.mime.MultipartEntityBuilder$build$5.call(Unknown Source)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getEntity(RestAssuredMultiPartEntity.groovy:58)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getContentType(RestAssuredMultiPartEntity.groovy:89)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at org.codehaus.groovy.runtime.metaclass.MethodMetaProperty$GetBeanMethodMetaProperty.getProperty(MethodMetaProperty.java:76)
at org.codehaus.groovy.runtime.callsite.GetEffectivePogoPropertySite.getProperty(GetEffectivePogoPropertySite.java:85)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetProperty(AbstractCallSite.java:329)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetPropertySafe(AbstractCallSite.java:448)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.shouldApplyContentTypeFromRestAssuredConfigDelegate(RequestSpecificationImpl.groovy:2139)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:194)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2060)
at io.restassured.internal.http.HTTPBuilder.post(HTTPBuilder.java:350)
at io.restassured.internal.http.HTTPBuilder$post$2.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1194)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)
at io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.FilterContext$next.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1686)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1692)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy:180)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy)
at com.gapi.utilities.TestUtilities.postAttachmentRequest(TestUtilities.java:957)
at com.gapi.testCases.CreateShipmentsTicket.postingAttachmentOfAnExistingShippingReceivingTicket(CreateShipmentsTicket.java:233)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoSuchMethodError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- postingAttachmentOfAnExistingShippingReceivingTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:08:36 IST" name="teardown" finished-at="2023-05-19T18:08:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=postingAttachmentOfAnExistingShippingReceivingTicket status=SKIP method=CreateShipmentsTicket.postingAttachmentOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="postingAttachmentOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:08:36 IST" name="postingAttachmentOfAnExistingShippingReceivingTicket" data-provider="testCasesData" finished-at="2023-05-19T18:08:36 IST" duration-ms="3" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4025-SR- Submit Shipping & Receiving Request with multiple Attachments  ( posting 1 attachment at a time), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=WO8686265, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType= Shipments Ticket, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=postingAttachmentOfAnExistingShippingReceivingTicket, TestCaseID=GAPI-4025, errorMessageType=, standardVisitorBadgeStr=, filters=?filename=Sampleimage.png&requestId=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=Telx Rack 01, category=Planned Maintenance, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NoSuchMethodError">
            <message>
              <![CDATA['org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoSuchMethodError: 'org.apache.http.entity.ContentType org.apache.http.entity.ContentType.withParameters(org.apache.http.NameValuePair[])'
at org.apache.http.entity.mime.MultipartEntityBuilder.buildEntity(MultipartEntityBuilder.java:219)
at org.apache.http.entity.mime.MultipartEntityBuilder.build(MultipartEntityBuilder.java:240)
at org.apache.http.entity.mime.MultipartEntityBuilder$build$5.call(Unknown Source)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getEntity(RestAssuredMultiPartEntity.groovy:58)
at io.restassured.internal.multipart.RestAssuredMultiPartEntity.getContentType(RestAssuredMultiPartEntity.groovy:89)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at org.codehaus.groovy.runtime.metaclass.MethodMetaProperty$GetBeanMethodMetaProperty.getProperty(MethodMetaProperty.java:76)
at org.codehaus.groovy.runtime.callsite.GetEffectivePogoPropertySite.callGetProperty(GetEffectivePogoPropertySite.java:48)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetPropertySafe(AbstractCallSite.java:448)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.shouldApplyContentTypeFromRestAssuredConfigDelegate(RequestSpecificationImpl.groovy:2139)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:194)
at io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2060)
at io.restassured.internal.http.HTTPBuilder.post(HTTPBuilder.java:350)
at io.restassured.internal.http.HTTPBuilder$post$2.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1194)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)
at io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)
at io.restassured.filter.Filter$filter.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.filter.Filter$filter$0.call(Unknown Source)
at io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)
at io.restassured.filter.FilterContext$next.call(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1686)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1692)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)
at groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)
at org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy:180)
at io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy)
at com.gapi.utilities.TestUtilities.postAttachmentRequest(TestUtilities.java:957)
at com.gapi.testCases.CreateShipmentsTicket.postingAttachmentOfAnExistingShippingReceivingTicket(CreateShipmentsTicket.java:233)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoSuchMethodError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- postingAttachmentOfAnExistingShippingReceivingTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:08:36 IST" name="teardown" finished-at="2023-05-19T18:08:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=postingAttachmentOfAnExistingShippingReceivingTicket status=FAILURE method=CreateShipmentsTicket.postingAttachmentOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateSHTicketForInvalidUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:08:36 IST" name="verifyCreateSHTicketForInvalidUser" data-provider="testCasesData" finished-at="2023-05-19T18:08:36 IST" duration-ms="435" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Shipments Ticket with Invalid user RBAC, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=verifyCreateSHTicketForInvalidUser, TestCaseID=Create Sh, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateSHTicketForInvalidUser -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:08:36 IST" name="teardown" finished-at="2023-05-19T18:08:36 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateSHTicketForInvalidUser status=SUCCESS method=CreateShipmentsTicket.verifyCreateSHTicketForInvalidUser(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateSHTicketForWithLoadingBayRequired(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:08:36 IST" name="verifyCreateSHTicketForWithLoadingBayRequired" data-provider="testCasesData" finished-at="2023-05-19T18:08:39 IST" duration-ms="2731" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4016-Submit  S&R tickets with Optional parameters - Loading Bay Required, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=true, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateSHTicketForWithLoadingBayRequired, TestCaseID=GAPI-4016, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateSHTicketForWithLoadingBayRequired -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:08:39 IST" name="teardown" finished-at="2023-05-19T18:08:39 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateSHTicketForWithLoadingBayRequired status=SUCCESS method=CreateShipmentsTicket.verifyCreateSHTicketForWithLoadingBayRequired(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:08:39 IST" name="verifyCreateShipmentsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:08:44 IST" duration-ms="4636" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4017-GAPI-4020-GAPI-4018-Create Shipments Ticket with both optional and Mandatory fields, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateShipmentsTicket, TestCaseID=GAPI-4017, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateShipmentsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:08:44 IST" name="teardown" finished-at="2023-05-19T18:08:44 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateShipmentsTicket status=SUCCESS method=CreateShipmentsTicket.verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:08:44 IST" name="verifyCreateShipmentsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:08:49 IST" duration-ms="4723" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4009-Create Shipments Ticket With Mandatory Fields Only, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateShipmentsTicket, TestCaseID=GAPI-4009, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateShipmentsTicket -->
        <test-method signature="verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:08:49 IST" name="verifyCreateShipmentsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:08:53 IST" duration-ms="4493" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4015-Create Shipments Ticket with all mandatory fields and optional parameter - customer reference, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=UPS, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Shipment Description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateShipmentsTicket, TestCaseID=GAPI-4015, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateShipmentsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:08:49 IST" name="teardown" finished-at="2023-05-19T18:08:49 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateShipmentsTicket status=SUCCESS method=CreateShipmentsTicket.verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:08:53 IST" name="teardown" finished-at="2023-05-19T18:08:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateShipmentsTicket status=SUCCESS method=CreateShipmentsTicket.verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:08:53 IST" name="verifyCreateShipmentsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:08:58 IST" duration-ms="4483" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4021-Create Shipments Ticket with all mandatory fields and optional parameter - multiple notification receipents, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com,qatesting@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Shipment Description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateShipmentsTicket, TestCaseID=GAPI-4021, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateShipmentsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:08:58 IST" name="teardown" finished-at="2023-05-19T18:08:58 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateShipmentsTicket status=SUCCESS method=CreateShipmentsTicket.verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:08:58 IST" name="verifyCreateShipmentsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:09:02 IST" duration-ms="4604" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4014-Create Shipments Ticket with all mandatory fields and optional parameter - tracking Number, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=UPS, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com,qatesting@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Shipment Description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateShipmentsTicket, TestCaseID=GAPI-4014, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateShipmentsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:09:02 IST" name="teardown" finished-at="2023-05-19T18:09:02 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateShipmentsTicket status=SUCCESS method=CreateShipmentsTicket.verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:09:02 IST" name="verifyCreateShipmentsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:09:07 IST" duration-ms="4499" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4012-Create Shipments Ticket with all mandatory fields and optional parameter - package Count, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=UPS, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Shipment Description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateShipmentsTicket, TestCaseID=GAPI-4012, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateShipmentsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:09:07 IST" name="teardown" finished-at="2023-05-19T18:09:07 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateShipmentsTicket status=SUCCESS method=CreateShipmentsTicket.verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:09:07 IST" name="verifyCreateShipmentsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:09:07 IST" duration-ms="268" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Create Shipments Ticket with Invalid Notification Recipient email format , search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=UPS, visitorHostFirstName=, user_id=, name=, notificationRecipients=ane_eer_email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Shipment Description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=Payload 'notificationRecipients' is not an valid email address., methodName=verifyCreateShipmentsTicket, TestCaseID=Create Sh, errorMessageType=client, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateShipmentsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:09:07 IST" name="teardown" finished-at="2023-05-19T18:09:07 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateShipmentsTicket status=SUCCESS method=CreateShipmentsTicket.verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:09:07 IST" name="verifyCreateShipmentsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:09:12 IST" duration-ms="4701" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4052-Create Shipments Ticket with Optional parameters - isLoadingBayRequired, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=UPS, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Shipment Description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateShipmentsTicket, TestCaseID=GAPI-4052, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateShipmentsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:09:12 IST" name="teardown" finished-at="2023-05-19T18:09:12 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateShipmentsTicket status=SUCCESS method=CreateShipmentsTicket.verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:09:12 IST" name="verifyCreateShipmentsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:09:17 IST" duration-ms="4974" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4013-Create Shipments Ticket with Optional parameters - Estimated Delivery Date, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=UPS, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Shipment Description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateShipmentsTicket, TestCaseID=GAPI-4013, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateShipmentsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:09:17 IST" name="teardown" finished-at="2023-05-19T18:09:17 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateShipmentsTicket status=SUCCESS method=CreateShipmentsTicket.verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:09:17 IST" name="verifyCreateShipmentsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:09:22 IST" duration-ms="4979" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4010-Submit S&R tickets - enter an invalid Courier company   (DHL, FedEx, DPD, TNT, UPS, USPS, Other - are valid couriers), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DTDCTEST, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCreateShipmentsTicket, TestCaseID=GAPI-4010, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCreateShipmentsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:09:22 IST" name="teardown" finished-at="2023-05-19T18:09:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCreateShipmentsTicket status=SUCCESS method=CreateShipmentsTicket.verifyCreateShipmentsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyMaxCharactersOfShipmentsParameters(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:09:22 IST" name="verifyMaxCharactersOfShipmentsParameters" data-provider="testCasesData" finished-at="2023-05-19T18:09:22 IST" duration-ms="421" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4023-Verify Max # of characters and data types for each mandatory and optional parameters, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Not Found, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=404, ci=, readFlag=, errorMessage=, methodName=verifyMaxCharactersOfShipmentsParameters, TestCaseID=GAPI-4023, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=DFW010, locations2=, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyMaxCharactersOfShipmentsParameters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:09:22 IST" name="teardown" finished-at="2023-05-19T18:09:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyMaxCharactersOfShipmentsParameters status=SUCCESS method=CreateShipmentsTicket.verifyMaxCharactersOfShipmentsParameters(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyRequestIdAndFileNameSHTicketForWithoutmandatoryfieldsRequired(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:09:22 IST" name="verifyRequestIdAndFileNameSHTicketForWithoutmandatoryfieldsRequired" data-provider="testCasesData" finished-at="2023-05-19T18:09:22 IST" duration-ms="259" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4029-SR Submit Remote hand without mandatory fields RequestID and filename, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=title sample1, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=, methodName=verifyRequestIdAndFileNameSHTicketForWithoutmandatoryfieldsRequired, TestCaseID=GAPI-4029, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRequestIdAndFileNameSHTicketForWithoutmandatoryfieldsRequired -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19]" started-at="2023-05-19T18:09:22 IST" name="teardown" finished-at="2023-05-19T18:09:22 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyRequestIdAndFileNameSHTicketForWithoutmandatoryfieldsRequired status=SUCCESS method=CreateShipmentsTicket.verifyRequestIdAndFileNameSHTicketForWithoutmandatoryfieldsRequired(java.util.Map)[pri:0, instance:com.gapi.testCases.CreateShipmentsTicket@658c5a19] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.CreateShipmentsTicket -->
      <class name="com.gapi.testCases.EditRemoteHandsTicket">
        <test-method signature="verifyEditCustomerReferenceOfAnExistingRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditRemoteHandsTicket@1ef6d34c]" started-at="2023-05-19T18:15:38 IST" name="verifyEditCustomerReferenceOfAnExistingRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:15:44 IST" duration-ms="5808" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4001-Edit the CustomerReference of an Existing Remote Hands Ticket in New Status, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=Remote Hands Description, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyEditCustomerReferenceOfAnExistingRemoteHandsTicket, TestCaseID=GAPI-4001, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Existing cross connect or connectivity testing, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditCustomerReferenceOfAnExistingRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditRemoteHandsTicket@1ef6d34c]" started-at="2023-05-19T18:15:44 IST" name="teardown" finished-at="2023-05-19T18:15:44 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditCustomerReferenceOfAnExistingRemoteHandsTicket status=SUCCESS method=EditRemoteHandsTicket.verifyEditCustomerReferenceOfAnExistingRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditRemoteHandsTicket@1ef6d34c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyEditNotificationRecipientsOfAnExistingRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditRemoteHandsTicket@1ef6d34c]" started-at="2023-05-19T18:15:44 IST" name="verifyEditNotificationRecipientsOfAnExistingRemoteHandsTicket" data-provider="testCasesData" finished-at="2023-05-19T18:15:49 IST" duration-ms="5055" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4002-Edit the Notification Recipients of an Existing Remote Hands Ticket in New Status, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=TelX Group, Inc., referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=Remote Hands Title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=Remote Hands Description, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=Planned Work, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyEditNotificationRecipientsOfAnExistingRemoteHandsTicket, TestCaseID=GAPI-4002, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=Existing cross connect or connectivity testing, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditNotificationRecipientsOfAnExistingRemoteHandsTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditRemoteHandsTicket@1ef6d34c]" started-at="2023-05-19T18:15:49 IST" name="teardown" finished-at="2023-05-19T18:15:49 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditNotificationRecipientsOfAnExistingRemoteHandsTicket status=SUCCESS method=EditRemoteHandsTicket.verifyEditNotificationRecipientsOfAnExistingRemoteHandsTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditRemoteHandsTicket@1ef6d34c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.EditRemoteHandsTicket -->
      <class name="com.gapi.testCases.CancelShipmentsTicket">
        <test-method retried="true" signature="verifyCancelShipmentsTicketWithCancelReason(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelShipmentsTicket@6337c201]" started-at="2023-05-19T18:18:11 IST" name="verifyCancelShipmentsTicketWithCancelReason" data-provider="testCasesData" finished-at="2023-05-19T18:18:14 IST" duration-ms="3652" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4075-Cancel S&R Ticket in Status - New ( specifying ID - WO Number &cancel reason) (verify Cancel reason- "Duplicate request"), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=1.0, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=44996.0, firstName=, phone=, courier=test, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=abc, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=Duplicate request, email=, visitorFirstName=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCancelShipmentsTicketWithCancelReason, TestCaseID=GAPI-4075, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Work Order WO9266895 has been cancelled.] but found [null]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Work Order WO9266895 has been cancelled.] but found [null]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CancelShipmentsTicket.verifyCancelShipmentsTicketWithCancelReason(CancelShipmentsTicket.java:127)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCancelShipmentsTicketWithCancelReason -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CancelShipmentsTicket@6337c201]" started-at="2023-05-19T18:18:14 IST" name="teardown" finished-at="2023-05-19T18:18:14 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCancelShipmentsTicketWithCancelReason status=SKIP method=CancelShipmentsTicket.verifyCancelShipmentsTicketWithCancelReason(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelShipmentsTicket@6337c201] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCancelShipmentsTicketWithCancelReason(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelShipmentsTicket@6337c201]" started-at="2023-05-19T18:18:14 IST" name="verifyCancelShipmentsTicketWithCancelReason" data-provider="testCasesData" finished-at="2023-05-19T18:18:18 IST" duration-ms="3836" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4075-Cancel S&R Ticket in Status - New ( specifying ID - WO Number &cancel reason) (verify Cancel reason- "Duplicate request"), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=1.0, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=44996.0, firstName=, phone=, courier=test, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=abc, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=Duplicate request, email=, visitorFirstName=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCancelShipmentsTicketWithCancelReason, TestCaseID=GAPI-4075, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Work Order WO9266896 has been cancelled.] but found [null]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Work Order WO9266896 has been cancelled.] but found [null]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CancelShipmentsTicket.verifyCancelShipmentsTicketWithCancelReason(CancelShipmentsTicket.java:127)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCancelShipmentsTicketWithCancelReason -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CancelShipmentsTicket@6337c201]" started-at="2023-05-19T18:18:18 IST" name="teardown" finished-at="2023-05-19T18:18:18 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCancelShipmentsTicketWithCancelReason status=FAILURE method=CancelShipmentsTicket.verifyCancelShipmentsTicketWithCancelReason(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelShipmentsTicket@6337c201] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyCancelShipmentsTicketWithCancelReason(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelShipmentsTicket@6337c201]" started-at="2023-05-19T18:18:18 IST" name="verifyCancelShipmentsTicketWithCancelReason" data-provider="testCasesData" finished-at="2023-05-19T18:18:23 IST" duration-ms="4647" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4074-Cancel S&R Ticket in Status - New ( specifying ID - WO Number & cancel reason)    (verify Cancel reason-  Request entered in error), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=1.0, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=44996.0, firstName=, phone=, courier=test, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=abc, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=Request entered in error, email=, visitorFirstName=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCancelShipmentsTicketWithCancelReason, TestCaseID=GAPI-4074, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Work Order WO9266897 has been cancelled.] but found [null]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Work Order WO9266897 has been cancelled.] but found [null]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CancelShipmentsTicket.verifyCancelShipmentsTicketWithCancelReason(CancelShipmentsTicket.java:127)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCancelShipmentsTicketWithCancelReason -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CancelShipmentsTicket@6337c201]" started-at="2023-05-19T18:18:23 IST" name="teardown" finished-at="2023-05-19T18:18:23 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCancelShipmentsTicketWithCancelReason status=SKIP method=CancelShipmentsTicket.verifyCancelShipmentsTicketWithCancelReason(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelShipmentsTicket@6337c201] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCancelShipmentsTicketWithCancelReason(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelShipmentsTicket@6337c201]" started-at="2023-05-19T18:18:23 IST" name="verifyCancelShipmentsTicketWithCancelReason" data-provider="testCasesData" finished-at="2023-05-19T18:18:26 IST" duration-ms="3579" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4074-Cancel S&R Ticket in Status - New ( specifying ID - WO Number & cancel reason)    (verify Cancel reason-  Request entered in error), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=REF01234, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=1.0, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=44996.0, firstName=, phone=, courier=test, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=abc, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=Request entered in error, email=, visitorFirstName=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCancelShipmentsTicketWithCancelReason, TestCaseID=GAPI-4074, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Work Order WO9266898 has been cancelled.] but found [null]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Work Order WO9266898 has been cancelled.] but found [null]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CancelShipmentsTicket.verifyCancelShipmentsTicketWithCancelReason(CancelShipmentsTicket.java:127)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCancelShipmentsTicketWithCancelReason -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CancelShipmentsTicket@6337c201]" started-at="2023-05-19T18:18:26 IST" name="teardown" finished-at="2023-05-19T18:18:26 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCancelShipmentsTicketWithCancelReason status=FAILURE method=CancelShipmentsTicket.verifyCancelShipmentsTicketWithCancelReason(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelShipmentsTicket@6337c201] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyCancelShipmentsTicketwithoutCancelReason(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelShipmentsTicket@6337c201]" started-at="2023-05-19T18:18:26 IST" name="verifyCancelShipmentsTicketwithoutCancelReason" data-provider="testCasesData" finished-at="2023-05-19T18:18:30 IST" duration-ms="3877" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4076-GAPI-4069-Cancel S&R Ticket in Status - New ( specifying ID - WO Number only WITHOUT cancel reason)    (verify Cancel reason defaults to Request No longer needed), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCancelShipmentsTicketwithoutCancelReason, TestCaseID=GAPI-4076, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Work Order WO9266899 has been cancelled.] but found [null]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Work Order WO9266899 has been cancelled.] but found [null]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CancelShipmentsTicket.verifyCancelShipmentsTicketwithoutCancelReason(CancelShipmentsTicket.java:67)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCancelShipmentsTicketwithoutCancelReason -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CancelShipmentsTicket@6337c201]" started-at="2023-05-19T18:18:30 IST" name="teardown" finished-at="2023-05-19T18:18:30 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCancelShipmentsTicketwithoutCancelReason status=SKIP method=CancelShipmentsTicket.verifyCancelShipmentsTicketwithoutCancelReason(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelShipmentsTicket@6337c201] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyCancelShipmentsTicketwithoutCancelReason(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelShipmentsTicket@6337c201]" started-at="2023-05-19T18:18:30 IST" name="verifyCancelShipmentsTicketwithoutCancelReason" data-provider="testCasesData" finished-at="2023-05-19T18:18:34 IST" duration-ms="4055" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4076-GAPI-4069-Cancel S&R Ticket in Status - New ( specifying ID - WO Number only WITHOUT cancel reason)    (verify Cancel reason defaults to Request No longer needed), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyCancelShipmentsTicketwithoutCancelReason, TestCaseID=GAPI-4076, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Work Order WO9266900 has been cancelled.] but found [null]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Work Order WO9266900 has been cancelled.] but found [null]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.CancelShipmentsTicket.verifyCancelShipmentsTicketwithoutCancelReason(CancelShipmentsTicket.java:67)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCancelShipmentsTicketwithoutCancelReason -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.CancelShipmentsTicket@6337c201]" started-at="2023-05-19T18:18:34 IST" name="teardown" finished-at="2023-05-19T18:18:34 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyCancelShipmentsTicketwithoutCancelReason status=FAILURE method=CancelShipmentsTicket.verifyCancelShipmentsTicketwithoutCancelReason(java.util.Map)[pri:0, instance:com.gapi.testCases.CancelShipmentsTicket@6337c201] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.CancelShipmentsTicket -->
      <class name="com.gapi.testCases.GetRolesDetails">
        <test-method signature="getPrivilegesinfoByInvalidRoleId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e]" started-at="2023-05-19T18:16:26 IST" name="getPrivilegesinfoByInvalidRoleId" data-provider="testCasesData" finished-at="2023-05-19T18:16:27 IST" duration-ms="884" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5458-GAPI-5538-Retrieve the Privileges info by Invalid RoleID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=, methodName=getPrivilegesinfoByInvalidRoleId, TestCaseID=GAPI-5458, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPrivilegesinfoByInvalidRoleId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e]" started-at="2023-05-19T18:16:27 IST" name="teardown" finished-at="2023-05-19T18:16:27 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getPrivilegesinfoByInvalidRoleId status=SUCCESS method=GetRolesDetails.getPrivilegesinfoByInvalidRoleId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getPrivilegesinfoByValidRoleId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e]" started-at="2023-05-19T18:16:27 IST" name="getPrivilegesinfoByValidRoleId" data-provider="testCasesData" finished-at="2023-05-19T18:16:28 IST" duration-ms="946" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5457-GAPI-5471-GAPI-5549-GAPI-5537-Retrieve the Privileges info by Valid RoleID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getPrivilegesinfoByValidRoleId, TestCaseID=GAPI-5457, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getPrivilegesinfoByValidRoleId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e]" started-at="2023-05-19T18:16:28 IST" name="teardown" finished-at="2023-05-19T18:16:28 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getPrivilegesinfoByValidRoleId status=SUCCESS method=GetRolesDetails.getPrivilegesinfoByValidRoleId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getRolesinfoByInvalidRoleId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e]" started-at="2023-05-19T18:16:28 IST" name="getRolesinfoByInvalidRoleId" data-provider="testCasesData" finished-at="2023-05-19T18:16:29 IST" duration-ms="847" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5444-Retrieve a Roles details by - Invalid Role ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=, methodName=getRolesinfoByInvalidRoleId, TestCaseID=GAPI-5444, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getRolesinfoByInvalidRoleId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e]" started-at="2023-05-19T18:16:29 IST" name="teardown" finished-at="2023-05-19T18:16:29 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getRolesinfoByInvalidRoleId status=SUCCESS method=GetRolesDetails.getRolesinfoByInvalidRoleId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getRolesinfoByValidRoleId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e]" started-at="2023-05-19T18:16:29 IST" name="getRolesinfoByValidRoleId" data-provider="testCasesData" finished-at="2023-05-19T18:16:30 IST" duration-ms="944" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5443-Retrieve a Roles details by - Valid Role ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getRolesinfoByValidRoleId, TestCaseID=GAPI-5443, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getRolesinfoByValidRoleId -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e]" started-at="2023-05-19T18:16:30 IST" name="teardown" finished-at="2023-05-19T18:16:30 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getRolesinfoByValidRoleId status=SUCCESS method=GetRolesDetails.getRolesinfoByValidRoleId(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getallRolesinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e]" started-at="2023-05-19T18:16:30 IST" name="getallRolesinfo" data-provider="testCasesData" finished-at="2023-05-19T18:16:30 IST" duration-ms="459" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5448-Retrieve all Roles info, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getallRolesinfo, TestCaseID=GAPI-5448, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getallRolesinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e]" started-at="2023-05-19T18:16:30 IST" name="teardown" finished-at="2023-05-19T18:16:30 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getallRolesinfo status=SUCCESS method=GetRolesDetails.getallRolesinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getallRolesinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e]" started-at="2023-05-19T18:16:30 IST" name="getallRolesinfo" data-provider="testCasesData" finished-at="2023-05-19T18:16:30 IST" duration-ms="497" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5451-Retrieve all Roles info - By Page, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getallRolesinfo, TestCaseID=GAPI-5451, errorMessageType=, standardVisitorBadgeStr=, filters=?page=0, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getallRolesinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e]" started-at="2023-05-19T18:16:30 IST" name="teardown" finished-at="2023-05-19T18:16:30 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getallRolesinfo status=SUCCESS method=GetRolesDetails.getallRolesinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getallRolesinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e]" started-at="2023-05-19T18:16:30 IST" name="getallRolesinfo" data-provider="testCasesData" finished-at="2023-05-19T18:16:31 IST" duration-ms="465" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5452-Retrieve all Roles info - By Size, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getallRolesinfo, TestCaseID=GAPI-5452, errorMessageType=, standardVisitorBadgeStr=, filters=?size=20, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getallRolesinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e]" started-at="2023-05-19T18:16:31 IST" name="teardown" finished-at="2023-05-19T18:16:31 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getallRolesinfo status=SUCCESS method=GetRolesDetails.getallRolesinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getallRolesinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e]" started-at="2023-05-19T18:16:31 IST" name="getallRolesinfo" data-provider="testCasesData" finished-at="2023-05-19T18:16:31 IST" duration-ms="428" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5454-Retrieve all Roles info - By Page&Size, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getallRolesinfo, TestCaseID=GAPI-5454, errorMessageType=, standardVisitorBadgeStr=, filters=?page=0&size=20, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getallRolesinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e]" started-at="2023-05-19T18:16:31 IST" name="teardown" finished-at="2023-05-19T18:16:31 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getallRolesinfo status=SUCCESS method=GetRolesDetails.getallRolesinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getallRolesinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e]" started-at="2023-05-19T18:16:31 IST" name="getallRolesinfo" data-provider="testCasesData" finished-at="2023-05-19T18:16:32 IST" duration-ms="444" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5450-Retrieve all Roles info - By Sort, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getallRolesinfo, TestCaseID=GAPI-5450, errorMessageType=, standardVisitorBadgeStr=, filters=?sort=true, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getallRolesinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e]" started-at="2023-05-19T18:16:32 IST" name="teardown" finished-at="2023-05-19T18:16:32 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getallRolesinfo status=SUCCESS method=GetRolesDetails.getallRolesinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getallRolesinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e]" started-at="2023-05-19T18:16:32 IST" name="getallRolesinfo" data-provider="testCasesData" finished-at="2023-05-19T18:16:32 IST" duration-ms="423" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5449-Retrieve all Roles info - By valid Global Ultimate Key, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getallRolesinfo, TestCaseID=GAPI-5449, errorMessageType=, standardVisitorBadgeStr=, filters=?globalUltimateKey=0012E00002mgd1dQAA, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getallRolesinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e]" started-at="2023-05-19T18:16:32 IST" name="teardown" finished-at="2023-05-19T18:16:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getallRolesinfo status=SUCCESS method=GetRolesDetails.getallRolesinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getallRolesinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e]" started-at="2023-05-19T18:16:32 IST" name="getallRolesinfo" data-provider="testCasesData" finished-at="2023-05-19T18:16:33 IST" duration-ms="475" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5453-Retrieve all Roles info - By globalUltimateKey&Sort, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getallRolesinfo, TestCaseID=GAPI-5453, errorMessageType=, standardVisitorBadgeStr=, filters=?globalUltimateKey=0012E00002mgd1dQAA&sort=true, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getallRolesinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e]" started-at="2023-05-19T18:16:33 IST" name="teardown" finished-at="2023-05-19T18:16:33 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getallRolesinfo status=SUCCESS method=GetRolesDetails.getallRolesinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getallRolesinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e]" started-at="2023-05-19T18:16:33 IST" name="getallRolesinfo" data-provider="testCasesData" finished-at="2023-05-19T18:16:33 IST" duration-ms="457" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5455-Retrieve all Roles info - By globalUltimateKey,Sort,Page&Size, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getallRolesinfo, TestCaseID=GAPI-5455, errorMessageType=, standardVisitorBadgeStr=, filters=?globalUltimateKey=0012E00002mgd1dQAA&page=0&size=35&sort=true, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getallRolesinfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e]" started-at="2023-05-19T18:16:33 IST" name="teardown" finished-at="2023-05-19T18:16:33 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getallRolesinfo status=SUCCESS method=GetRolesDetails.getallRolesinfo(java.util.Map)[pri:0, instance:com.gapi.testCases.GetRolesDetails@5495333e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetRolesDetails -->
      <class name="com.gapi.testCases.GetAllAssets">
        <test-method signature="getAllAssetsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:32 IST" name="getAllAssetsInformation" data-provider="testCasesData" finished-at="2023-05-19T18:11:32 IST" duration-ms="564" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5319-Retrieve all Asset list by Customer, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformation, TestCaseID=GAPI-5319, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:32 IST" name="teardown" finished-at="2023-05-19T18:11:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformation status=SUCCESS method=GetAllAssets.getAllAssetsInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:32 IST" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:33 IST" duration-ms="559" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5335-Retrieve all Asset list of Customer using sitecode,country&page, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, TestCaseID=GAPI-5335, errorMessageType=, standardVisitorBadgeStr=, filters=?page=0&country=Hong Kong&sitecode=PHX015, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:33 IST" name="teardown" finished-at="2023-05-19T18:11:33 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:33 IST" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:34 IST" duration-ms="663" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5320-Retrieve all Asset list of Customer using Site code, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, TestCaseID=GAPI-5320, errorMessageType=, standardVisitorBadgeStr=, filters=?sitecode=OAK010, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:34 IST" name="teardown" finished-at="2023-05-19T18:11:34 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:34 IST" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:34 IST" duration-ms="636" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5334-Retrieve all Asset list of Customer using country&size, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, TestCaseID=GAPI-5334, errorMessageType=, standardVisitorBadgeStr=, filters=?country=United States&size=1, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:34 IST" name="teardown" finished-at="2023-05-19T18:11:34 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:34 IST" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:35 IST" duration-ms="616" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5333-Retrieve all Asset list of Customer using sitecode,country,mareket&page, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, TestCaseID=GAPI-5333, errorMessageType=, standardVisitorBadgeStr=, filters=?country=United States&page=0&market=Dallas&sitecode=ORD011, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:35 IST" name="teardown" finished-at="2023-05-19T18:11:35 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:35 IST" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:36 IST" duration-ms="701" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5332-Retrieve all Asset list of Customer using region,country,campus&sort, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, TestCaseID=GAPI-5332, errorMessageType=, standardVisitorBadgeStr=, filters=?country=United States&sort=sitecode,ASC&region=North America&campus=Y, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:36 IST" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:36 IST" duration-ms="606" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5331-Retrieve all Asset list of Customer using sitecode,market,country,city,campus,region&size, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, TestCaseID=GAPI-5331, errorMessageType=, standardVisitorBadgeStr=, filters=?country=United States&size=1&market=Dallas&sitecode=ORD011&region=North America&campus=Y&city=Atlanta, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:36 IST" name="teardown" finished-at="2023-05-19T18:11:36 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:36 IST" name="teardown" finished-at="2023-05-19T18:11:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:36 IST" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:37 IST" duration-ms="555" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5330-Retrieve all Asset list of Customer using Sitecode,market,Coutntry&Region, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, TestCaseID=GAPI-5330, errorMessageType=, standardVisitorBadgeStr=, filters=?country=United States&market=Dallas&sitecode=ORD011&region=North America, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:37 IST" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:37 IST" duration-ms="575" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5329-Retrieve all Asset list of Customer using site code,Campus & City, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, TestCaseID=GAPI-5329, errorMessageType=, standardVisitorBadgeStr=, filters=?sitecode=ORD011&campus=Y&city=Atlanta, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:37 IST" name="teardown" finished-at="2023-05-19T18:11:37 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:37 IST" name="teardown" finished-at="2023-05-19T18:11:37 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:37 IST" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:38 IST" duration-ms="592" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5328-Retrieve all Asset list of Customer using Page, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, TestCaseID=GAPI-5328, errorMessageType=, standardVisitorBadgeStr=, filters=?page=0, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:38 IST" name="teardown" finished-at="2023-05-19T18:11:38 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:38 IST" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:39 IST" duration-ms="630" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5327-Retrieve all Asset list of Customer using Sort, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, TestCaseID=GAPI-5327, errorMessageType=, standardVisitorBadgeStr=, filters=?sort=type,DESC, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:39 IST" name="teardown" finished-at="2023-05-19T18:11:39 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:39 IST" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:39 IST" duration-ms="599" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5326-Retrieve all Asset list of Customer using Size, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, TestCaseID=GAPI-5326, errorMessageType=, standardVisitorBadgeStr=, filters=?size=100, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:39 IST" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:40 IST" duration-ms="609" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5325-Retrieve all Asset list of Customer using Region, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, TestCaseID=GAPI-5325, errorMessageType=, standardVisitorBadgeStr=, filters=?region=North America, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:39 IST" name="teardown" finished-at="2023-05-19T18:11:39 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:40 IST" name="teardown" finished-at="2023-05-19T18:11:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:40 IST" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:40 IST" duration-ms="556" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5323-Retrieve all Asset list of Customer using Market, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, TestCaseID=GAPI-5323, errorMessageType=, standardVisitorBadgeStr=, filters=?market=Dallas, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:40 IST" name="teardown" finished-at="2023-05-19T18:11:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:40 IST" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:41 IST" duration-ms="535" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5322-Retrieve all Asset list of Customer using campus, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, TestCaseID=GAPI-5322, errorMessageType=, standardVisitorBadgeStr=, filters=?campus=N, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:41 IST" name="teardown" finished-at="2023-05-19T18:11:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:41 IST" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:41 IST" duration-ms="569" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5321-Retrieve all Asset list of Customer using City, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, TestCaseID=GAPI-5321, errorMessageType=, standardVisitorBadgeStr=, filters=?city=Atlanta, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:41 IST" name="teardown" finished-at="2023-05-19T18:11:41 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:41 IST" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:42 IST" duration-ms="688" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5342-Retrieve all Asset list of Customer using Invalid Campus, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=Invalid search parameter check campus, city, market, country, region, methodName=getAllAssetsInformationUsingDifferentFilters, TestCaseID=GAPI-5342, errorMessageType=INVALID_SEARCH_PARAMETER, standardVisitorBadgeStr=, filters=?campus=abc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:42 IST" name="teardown" finished-at="2023-05-19T18:11:42 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:42 IST" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:43 IST" duration-ms="641" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5343-GAPI-5318-Retrieve all Asset list of Customer using Invalid sitecode& valid page, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, TestCaseID=GAPI-5343, errorMessageType=, standardVisitorBadgeStr=, filters=?page=0&sitecode=ORD0110, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:43 IST" name="teardown" finished-at="2023-05-19T18:11:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:43 IST" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:43 IST" duration-ms="628" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5341-Retrieve all Asset list of Customer using Invalid Sort value, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Internal Server Error, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=500, ci=, readFlag=, errorMessage=There was an unexpected system error., methodName=getAllAssetsInformationUsingDifferentFilters, TestCaseID=GAPI-5341, errorMessageType=SYSTEM, standardVisitorBadgeStr=, filters=?sort=typew,DESC, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:43 IST" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:44 IST" duration-ms="660" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5338-Retrieve all Asset list of Customer using Invalid country, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=Invalid search parameter check campus, city, market, country, region, methodName=getAllAssetsInformationUsingDifferentFilters, TestCaseID=GAPI-5338, errorMessageType=INVALID_SEARCH_PARAMETER, standardVisitorBadgeStr=, filters=?country=DLR, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:43 IST" name="teardown" finished-at="2023-05-19T18:11:43 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:44 IST" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:45 IST" duration-ms="564" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5337-Retrieve all Asset list of Customer using Invalid sitecode, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, TestCaseID=GAPI-5337, errorMessageType=, standardVisitorBadgeStr=, filters=?sitecode=ORD0110, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:44 IST" name="teardown" finished-at="2023-05-19T18:11:44 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:45 IST" name="teardown" finished-at="2023-05-19T18:11:45 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:45 IST" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:45 IST" duration-ms="432" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5340-Retrieve all Asset list of Customer using Invalid Page value(More than available page value), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=Bad request was submitted., methodName=getAllAssetsInformationUsingDifferentFilters, TestCaseID=GAPI-5340, errorMessageType=BAD_REQUEST, standardVisitorBadgeStr=, filters=?page=a, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:45 IST" name="teardown" finished-at="2023-05-19T18:11:45 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:45 IST" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:46 IST" duration-ms="459" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5339-Retrieve all Asset list of Customer using Invalid Size(Non-Integer value), search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=Bad request was submitted., methodName=getAllAssetsInformationUsingDifferentFilters, TestCaseID=GAPI-5339, errorMessageType=BAD_REQUEST, standardVisitorBadgeStr=, filters=?size=xyz, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:46 IST" name="teardown" finished-at="2023-05-19T18:11:46 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:46 IST" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:46 IST" duration-ms="469" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5344-Retrieve all Asset list of Customer using valid Sort&invalid Size, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=Bad request was submitted., methodName=getAllAssetsInformationUsingDifferentFilters, TestCaseID=GAPI-5344, errorMessageType=BAD_REQUEST, standardVisitorBadgeStr=, filters=?size=PHX&sort=sitecode,asc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method signature="getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:46 IST" name="getAllAssetsInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:47 IST" duration-ms="592" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5336-Retrieve all Asset list of Customer using sitecode,country,city,campus,region,market,Size,Sort&page, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getAllAssetsInformationUsingDifferentFilters, TestCaseID=GAPI-5336, errorMessageType=, standardVisitorBadgeStr=, filters=?country=United States&market=Dallas&region=North America&city=Atlanta&page=0&size=1&sitecode=ORD011&campus=Y&sort=type,DESC, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getAllAssetsInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:46 IST" name="teardown" finished-at="2023-05-19T18:11:46 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:47 IST" name="teardown" finished-at="2023-05-19T18:11:47 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getAllAssetsInformationUsingDifferentFilters status=SUCCESS method=GetAllAssets.getAllAssetsInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="vaidateTheCustomerAssetsUsingInValidAccountIdAndInValidAssetID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:47 IST" name="vaidateTheCustomerAssetsUsingInValidAccountIdAndInValidAssetID" data-provider="testCasesData" finished-at="2023-05-19T18:11:47 IST" duration-ms="522" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5347-Vaidate the customer assets using Invalid accountId & Valid AssetId, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=vaidateTheCustomerAssetsUsingInValidAccountIdAndInValidAssetID, TestCaseID=GAPI-5347, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWaQAM&parentId=8121750f13def200a501b7a66144b0dc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- vaidateTheCustomerAssetsUsingInValidAccountIdAndInValidAssetID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:47 IST" name="teardown" finished-at="2023-05-19T18:11:47 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=vaidateTheCustomerAssetsUsingInValidAccountIdAndInValidAssetID status=SUCCESS method=GetAllAssets.vaidateTheCustomerAssetsUsingInValidAccountIdAndInValidAssetID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="vaidateTheCustomerAssetsUsingValidAccountIdAndParentID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:47 IST" name="vaidateTheCustomerAssetsUsingValidAccountIdAndParentID" data-provider="testCasesData" finished-at="2023-05-19T18:11:49 IST" duration-ms="1825" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5346-Vaidate the customer assets using Valid accountId & ParentID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=vaidateTheCustomerAssetsUsingValidAccountIdAndParentID, TestCaseID=GAPI-5346, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWaQAM&parentId=8121750f13def200a501b7a66144b0dc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- vaidateTheCustomerAssetsUsingValidAccountIdAndParentID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:49 IST" name="teardown" finished-at="2023-05-19T18:11:49 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=vaidateTheCustomerAssetsUsingValidAccountIdAndParentID status=SUCCESS method=GetAllAssets.vaidateTheCustomerAssetsUsingValidAccountIdAndParentID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyRetrievalofAssetNamesUsingAssetID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:49 IST" name="verifyRetrievalofAssetNamesUsingAssetID" data-provider="testCasesData" finished-at="2023-05-19T18:11:50 IST" duration-ms="903" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5348-Retrieve the asset names using the  Valid asset ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyRetrievalofAssetNamesUsingAssetID, TestCaseID=GAPI-5348, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWaQAM&parentId=8121750f13def200a501b7a66144b0dc, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRetrievalofAssetNamesUsingAssetID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:50 IST" name="teardown" finished-at="2023-05-19T18:11:50 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyRetrievalofAssetNamesUsingAssetID status=SUCCESS method=GetAllAssets.verifyRetrievalofAssetNamesUsingAssetID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyRetrievalofAssetNamesUsingInvalidAssetID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:50 IST" name="verifyRetrievalofAssetNamesUsingInvalidAssetID" data-provider="testCasesData" finished-at="2023-05-19T18:11:50 IST" duration-ms="380" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5349-Retrieve the asset names using the Invalid asset ID, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyRetrievalofAssetNamesUsingInvalidAssetID, TestCaseID=GAPI-5349, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRetrievalofAssetNamesUsingInvalidAssetID -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3]" started-at="2023-05-19T18:11:50 IST" name="teardown" finished-at="2023-05-19T18:11:50 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyRetrievalofAssetNamesUsingInvalidAssetID status=SUCCESS method=GetAllAssets.verifyRetrievalofAssetNamesUsingInvalidAssetID(java.util.Map)[pri:0, instance:com.gapi.testCases.GetAllAssets@518caac3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetAllAssets -->
      <class name="com.gapi.testCases.GetOSPDetails">
        <test-method signature="getOSPDetailsInfo()[pri:0, instance:com.gapi.testCases.GetOSPDetails@1722011b]" started-at="2023-05-19T18:13:11 IST" name="getOSPDetailsInfo" finished-at="2023-05-19T18:13:12 IST" duration-ms="1810" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getOSPDetailsInfo -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetOSPDetails@1722011b]" started-at="2023-05-19T18:13:12 IST" name="teardown" finished-at="2023-05-19T18:13:12 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getOSPDetailsInfo status=SUCCESS method=GetOSPDetails.getOSPDetailsInfo()[pri:0, instance:com.gapi.testCases.GetOSPDetails@1722011b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getOSPDetailsInfoWithInvalidGlobalUltimate()[pri:0, instance:com.gapi.testCases.GetOSPDetails@1722011b]" started-at="2023-05-19T18:13:12 IST" name="getOSPDetailsInfoWithInvalidGlobalUltimate" finished-at="2023-05-19T18:13:13 IST" duration-ms="606" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getOSPDetailsInfoWithInvalidGlobalUltimate -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetOSPDetails@1722011b]" started-at="2023-05-19T18:13:13 IST" name="teardown" finished-at="2023-05-19T18:13:13 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getOSPDetailsInfoWithInvalidGlobalUltimate status=SUCCESS method=GetOSPDetails.getOSPDetailsInfoWithInvalidGlobalUltimate()[pri:0, instance:com.gapi.testCases.GetOSPDetails@1722011b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getOSPDetailsInfoWithInvalidToken()[pri:0, instance:com.gapi.testCases.GetOSPDetails@1722011b]" started-at="2023-05-19T18:13:13 IST" name="getOSPDetailsInfoWithInvalidToken" finished-at="2023-05-19T18:13:13 IST" duration-ms="383" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getOSPDetailsInfoWithInvalidToken -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetOSPDetails@1722011b]" started-at="2023-05-19T18:13:13 IST" name="teardown" finished-at="2023-05-19T18:13:13 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getOSPDetailsInfoWithInvalidToken status=SUCCESS method=GetOSPDetails.getOSPDetailsInfoWithInvalidToken()[pri:0, instance:com.gapi.testCases.GetOSPDetails@1722011b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetOSPDetails -->
      <class name="com.gapi.testCases.EditShippingReceivingTicket">
        <test-method signature="editTheContactsOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187]" started-at="2023-05-19T18:14:21 IST" name="editTheContactsOfAnExistingShippingReceivingTicket" data-provider="testCasesData" finished-at="2023-05-19T18:14:26 IST" duration-ms="5449" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4053-SR- Edit the Contacts of an Existing SR Ticket -Status -  New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=USP, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=xyz, permissionGroups=, workDescription=, executionFlag=Y, title=title sample   , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=editTheContactsOfAnExistingShippingReceivingTicket, TestCaseID=GAPI-4053, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- editTheContactsOfAnExistingShippingReceivingTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187]" started-at="2023-05-19T18:14:26 IST" name="teardown" finished-at="2023-05-19T18:14:26 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=editTheContactsOfAnExistingShippingReceivingTicket status=SUCCESS method=EditShippingReceivingTicket.editTheContactsOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyEditCourierOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187]" started-at="2023-05-19T18:14:26 IST" name="verifyEditCourierOfAnExistingShippingReceivingTicket" data-provider="testCasesData" finished-at="2023-05-19T18:14:31 IST" duration-ms="5054" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4041-Edit the Courier of an Existing Shipping Receiving Ticket Ticket  -Status -  New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyEditCourierOfAnExistingShippingReceivingTicket, TestCaseID=GAPI-4041, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditCourierOfAnExistingShippingReceivingTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187]" started-at="2023-05-19T18:14:31 IST" name="teardown" finished-at="2023-05-19T18:14:31 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditCourierOfAnExistingShippingReceivingTicket status=SUCCESS method=EditShippingReceivingTicket.verifyEditCourierOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyEditDescriptionOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187]" started-at="2023-05-19T18:14:31 IST" name="verifyEditDescriptionOfAnExistingShippingReceivingTicket" data-provider="testCasesData" finished-at="2023-05-19T18:14:36 IST" duration-ms="4804" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4039-Edit the Description of an Existing SR Ticket -Status -  New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyEditDescriptionOfAnExistingShippingReceivingTicket, TestCaseID=GAPI-4039, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditDescriptionOfAnExistingShippingReceivingTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187]" started-at="2023-05-19T18:14:36 IST" name="teardown" finished-at="2023-05-19T18:14:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditDescriptionOfAnExistingShippingReceivingTicket status=SUCCESS method=EditShippingReceivingTicket.verifyEditDescriptionOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyEditEstimatedDeliveryDateOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187]" started-at="2023-05-19T18:14:36 IST" name="verifyEditEstimatedDeliveryDateOfAnExistingShippingReceivingTicket" data-provider="testCasesData" finished-at="2023-05-19T18:14:41 IST" duration-ms="4978" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4047-Edit the Estimated Delivery Date of an Existing SR Ticket -Status -  New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyEditEstimatedDeliveryDateOfAnExistingShippingReceivingTicket, TestCaseID=GAPI-4047, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditEstimatedDeliveryDateOfAnExistingShippingReceivingTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187]" started-at="2023-05-19T18:14:41 IST" name="teardown" finished-at="2023-05-19T18:14:41 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditEstimatedDeliveryDateOfAnExistingShippingReceivingTicket status=SUCCESS method=EditShippingReceivingTicket.verifyEditEstimatedDeliveryDateOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyEditLoadingBayofanExistingSRTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187]" started-at="2023-05-19T18:14:41 IST" name="verifyEditLoadingBayofanExistingSRTicket" data-provider="testCasesData" finished-at="2023-05-19T18:14:46 IST" duration-ms="4935" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4051-SR- Edit the Loading Bay of an Existing SR Ticket  -Status -   New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1.0, firstName=, phone=, courier=UPS, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Shipment Description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=true, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyEditLoadingBayofanExistingSRTicket, TestCaseID=GAPI-4051, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditLoadingBayofanExistingSRTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187]" started-at="2023-05-19T18:14:46 IST" name="teardown" finished-at="2023-05-19T18:14:46 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditLoadingBayofanExistingSRTicket status=SUCCESS method=EditShippingReceivingTicket.verifyEditLoadingBayofanExistingSRTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyEditNumberOfPackagesOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187]" started-at="2023-05-19T18:14:46 IST" name="verifyEditNumberOfPackagesOfAnExistingShippingReceivingTicket" data-provider="testCasesData" finished-at="2023-05-19T18:14:47 IST" duration-ms="1388" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4043-Edit the Number of Packages of an Existing SR Ticket -Status -  New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyEditNumberOfPackagesOfAnExistingShippingReceivingTicket, TestCaseID=GAPI-4043, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [201] but found [500]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [201] but found [500]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.EditShippingReceivingTicket.verifyEditNumberOfPackagesOfAnExistingShippingReceivingTicket(EditShippingReceivingTicket.java:156)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditNumberOfPackagesOfAnExistingShippingReceivingTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187]" started-at="2023-05-19T18:14:47 IST" name="teardown" finished-at="2023-05-19T18:14:47 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditNumberOfPackagesOfAnExistingShippingReceivingTicket status=SKIP method=EditShippingReceivingTicket.verifyEditNumberOfPackagesOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyEditNumberOfPackagesOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187]" started-at="2023-05-19T18:14:47 IST" name="verifyEditNumberOfPackagesOfAnExistingShippingReceivingTicket" data-provider="testCasesData" finished-at="2023-05-19T18:14:52 IST" duration-ms="4720" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4043-Edit the Number of Packages of an Existing SR Ticket -Status -  New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyEditNumberOfPackagesOfAnExistingShippingReceivingTicket, TestCaseID=GAPI-4043, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditNumberOfPackagesOfAnExistingShippingReceivingTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187]" started-at="2023-05-19T18:14:52 IST" name="teardown" finished-at="2023-05-19T18:14:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditNumberOfPackagesOfAnExistingShippingReceivingTicket status=SUCCESS method=EditShippingReceivingTicket.verifyEditNumberOfPackagesOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyEditReferenceNumberOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187]" started-at="2023-05-19T18:14:52 IST" name="verifyEditReferenceNumberOfAnExistingShippingReceivingTicket" data-provider="testCasesData" finished-at="2023-05-19T18:14:57 IST" duration-ms="4717" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4049-Edit the Reference Number of an Existing SR Ticket -Status -  New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyEditReferenceNumberOfAnExistingShippingReceivingTicket, TestCaseID=GAPI-4049, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [nr. RF000187] but found [null]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [nr. RF000187] but found [null]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.EditShippingReceivingTicket.verifyEditReferenceNumberOfAnExistingShippingReceivingTicket(EditShippingReceivingTicket.java:250)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditReferenceNumberOfAnExistingShippingReceivingTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187]" started-at="2023-05-19T18:14:57 IST" name="teardown" finished-at="2023-05-19T18:14:57 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditReferenceNumberOfAnExistingShippingReceivingTicket status=SKIP method=EditShippingReceivingTicket.verifyEditReferenceNumberOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyEditReferenceNumberOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187]" started-at="2023-05-19T18:14:57 IST" name="verifyEditReferenceNumberOfAnExistingShippingReceivingTicket" data-provider="testCasesData" finished-at="2023-05-19T18:15:02 IST" duration-ms="5110" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4049-Edit the Reference Number of an Existing SR Ticket -Status -  New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyEditReferenceNumberOfAnExistingShippingReceivingTicket, TestCaseID=GAPI-4049, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditReferenceNumberOfAnExistingShippingReceivingTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187]" started-at="2023-05-19T18:15:02 IST" name="teardown" finished-at="2023-05-19T18:15:02 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditReferenceNumberOfAnExistingShippingReceivingTicket status=SUCCESS method=EditShippingReceivingTicket.verifyEditReferenceNumberOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyEditTitleOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187]" started-at="2023-05-19T18:15:02 IST" name="verifyEditTitleOfAnExistingShippingReceivingTicket" data-provider="testCasesData" finished-at="2023-05-19T18:15:06 IST" duration-ms="4548" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4037-Edit theTitle of an Existing SR Ticket -Status -  New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyEditTitleOfAnExistingShippingReceivingTicket, TestCaseID=GAPI-4037, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.EditShippingReceivingTicket.verifyEditTitleOfAnExistingShippingReceivingTicket(EditShippingReceivingTicket.java:437)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditTitleOfAnExistingShippingReceivingTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187]" started-at="2023-05-19T18:15:06 IST" name="teardown" finished-at="2023-05-19T18:15:06 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditTitleOfAnExistingShippingReceivingTicket status=SKIP method=EditShippingReceivingTicket.verifyEditTitleOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyEditTitleOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187]" started-at="2023-05-19T18:15:06 IST" name="verifyEditTitleOfAnExistingShippingReceivingTicket" data-provider="testCasesData" finished-at="2023-05-19T18:15:12 IST" duration-ms="5600" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4037-Edit theTitle of an Existing SR Ticket -Status -  New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyEditTitleOfAnExistingShippingReceivingTicket, TestCaseID=GAPI-4037, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditTitleOfAnExistingShippingReceivingTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187]" started-at="2023-05-19T18:15:12 IST" name="teardown" finished-at="2023-05-19T18:15:12 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditTitleOfAnExistingShippingReceivingTicket status=SUCCESS method=EditShippingReceivingTicket.verifyEditTitleOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyEditTrackingNumberOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187]" started-at="2023-05-19T18:15:12 IST" name="verifyEditTrackingNumberOfAnExistingShippingReceivingTicket" data-provider="testCasesData" finished-at="2023-05-19T18:15:17 IST" duration-ms="5043" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-4045-Edit the Tracking Number of an Existing  Shipping Receiving Ticket  -Status -  New, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=nr. RF000012, action=, details=, ExpectedStatusMessage=Created, visitorPhone=, trackingNumber=TRACK12345, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=1900-01-01 00:00:00, firstName=, phone=, courier=DHL, visitorHostFirstName=, user_id=, name=, notificationRecipients=jane_doe@email.com, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=shipment description, permissionGroups=, workDescription=, executionFlag=Y, title=shipment title , visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=201, ci=, readFlag=, errorMessage=, methodName=verifyEditTrackingNumberOfAnExistingShippingReceivingTicket, TestCaseID=GAPI-4045, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=, location=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyEditTrackingNumberOfAnExistingShippingReceivingTicket -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187]" started-at="2023-05-19T18:15:17 IST" name="teardown" finished-at="2023-05-19T18:15:17 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyEditTrackingNumberOfAnExistingShippingReceivingTicket status=SUCCESS method=EditShippingReceivingTicket.verifyEditTrackingNumberOfAnExistingShippingReceivingTicket(java.util.Map)[pri:0, instance:com.gapi.testCases.EditShippingReceivingTicket@6a47b187] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.EditShippingReceivingTicket -->
      <class name="com.gapi.testCases.GetCampus">
        <test-method signature="getCampusInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729]" started-at="2023-05-19T18:11:10 IST" name="getCampusInformation" data-provider="testCasesData" finished-at="2023-05-19T18:11:11 IST" duration-ms="987" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Validate if the Response has campus field in addition to the 200 code, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getCampusInformation, TestCaseID=Validate, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWaQAM, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCampusInformation -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729]" started-at="2023-05-19T18:11:11 IST" name="teardown" finished-at="2023-05-19T18:11:11 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCampusInformation status=SUCCESS method=GetCampus.getCampusInformation(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729]" started-at="2023-05-19T18:11:11 IST" name="getCampusInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:12 IST" duration-ms="613" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5379-Retrieve all Campuses using account id , Market&City, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCampusInformationUsingDifferentFilters, TestCaseID=GAPI-5379, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&market=Hong Kong&city=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCampusInformationUsingDifferentFilters -->
        <test-method signature="getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729]" started-at="2023-05-19T18:11:12 IST" name="getCampusInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:12 IST" duration-ms="583" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5378-Retrieve all Campuses using account id & Market , search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=getCampusInformationUsingDifferentFilters, TestCaseID=GAPI-5378, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&market=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCampusInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729]" started-at="2023-05-19T18:11:12 IST" name="teardown" finished-at="2023-05-19T18:11:12 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCampusInformationUsingDifferentFilters status=SUCCESS method=GetCampus.getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729]" started-at="2023-05-19T18:11:12 IST" name="teardown" finished-at="2023-05-19T18:11:12 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCampusInformationUsingDifferentFilters status=SUCCESS method=GetCampus.getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729]" started-at="2023-05-19T18:11:12 IST" name="getCampusInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:13 IST" duration-ms="916" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5380-Retrieve all Campuses using account id  and City, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getCampusInformationUsingDifferentFilters, TestCaseID=GAPI-5380, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&city=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCampusInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729]" started-at="2023-05-19T18:11:13 IST" name="teardown" finished-at="2023-05-19T18:11:13 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCampusInformationUsingDifferentFilters status=SUCCESS method=GetCampus.getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729]" started-at="2023-05-19T18:11:13 IST" name="getCampusInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:14 IST" duration-ms="609" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5377-Retrieve all Campuses using account id , Country&City, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getCampusInformationUsingDifferentFilters, TestCaseID=GAPI-5377, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWaQAM&country=Hong Kong&city=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCampusInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729]" started-at="2023-05-19T18:11:14 IST" name="teardown" finished-at="2023-05-19T18:11:14 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCampusInformationUsingDifferentFilters status=SUCCESS method=GetCampus.getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729]" started-at="2023-05-19T18:11:14 IST" name="getCampusInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:14 IST" duration-ms="586" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5376-Retrieve all Campuses using account id , Market,Country &City, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getCampusInformationUsingDifferentFilters, TestCaseID=GAPI-5376, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&country=Hong Kong&market=Hong Kong&city=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCampusInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729]" started-at="2023-05-19T18:11:14 IST" name="teardown" finished-at="2023-05-19T18:11:14 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCampusInformationUsingDifferentFilters status=SUCCESS method=GetCampus.getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729]" started-at="2023-05-19T18:11:14 IST" name="getCampusInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:15 IST" duration-ms="550" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=Retrieve all Campuses using account id ,Country &Market , search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getCampusInformationUsingDifferentFilters, TestCaseID=Retrieve, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&country=Hong Kong&market=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCampusInformationUsingDifferentFilters -->
        <test-method signature="getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729]" started-at="2023-05-19T18:11:15 IST" name="getCampusInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:15 IST" duration-ms="579" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5374-Retrieve all Campuses using account id , Region,Country,Market &City, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getCampusInformationUsingDifferentFilters, TestCaseID=GAPI-5374, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&region=APAC&country=Hong Kong&market=Hong Kong&city=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCampusInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729]" started-at="2023-05-19T18:11:15 IST" name="teardown" finished-at="2023-05-19T18:11:15 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCampusInformationUsingDifferentFilters status=SUCCESS method=GetCampus.getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729]" started-at="2023-05-19T18:11:15 IST" name="teardown" finished-at="2023-05-19T18:11:15 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCampusInformationUsingDifferentFilters status=SUCCESS method=GetCampus.getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729]" started-at="2023-05-19T18:11:15 IST" name="getCampusInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:16 IST" duration-ms="560" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5373-Retrieve all Campuses using account id , Region,Country,Market , search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getCampusInformationUsingDifferentFilters, TestCaseID=GAPI-5373, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&region=APAC&country=Hong Kong&market=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCampusInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729]" started-at="2023-05-19T18:11:16 IST" name="teardown" finished-at="2023-05-19T18:11:16 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCampusInformationUsingDifferentFilters status=SUCCESS method=GetCampus.getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729]" started-at="2023-05-19T18:11:16 IST" name="getCampusInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:16 IST" duration-ms="547" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5371-Retrieve all Campuses using account id , Region&City, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getCampusInformationUsingDifferentFilters, TestCaseID=GAPI-5371, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&region=APAC&city=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCampusInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729]" started-at="2023-05-19T18:11:16 IST" name="teardown" finished-at="2023-05-19T18:11:16 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCampusInformationUsingDifferentFilters status=SUCCESS method=GetCampus.getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729]" started-at="2023-05-19T18:11:16 IST" name="getCampusInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:17 IST" duration-ms="593" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5372-Retrieve all Campuses using account id , Country, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getCampusInformationUsingDifferentFilters, TestCaseID=GAPI-5372, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&country=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCampusInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729]" started-at="2023-05-19T18:11:17 IST" name="teardown" finished-at="2023-05-19T18:11:17 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCampusInformationUsingDifferentFilters status=SUCCESS method=GetCampus.getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729]" started-at="2023-05-19T18:11:17 IST" name="getCampusInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:18 IST" duration-ms="599" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5370-Retrieve all Campuses using account id , Region&Market, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getCampusInformationUsingDifferentFilters, TestCaseID=GAPI-5370, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&region=APAC&market=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCampusInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729]" started-at="2023-05-19T18:11:18 IST" name="teardown" finished-at="2023-05-19T18:11:18 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCampusInformationUsingDifferentFilters status=SUCCESS method=GetCampus.getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729]" started-at="2023-05-19T18:11:18 IST" name="getCampusInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:18 IST" duration-ms="636" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5369-Retrieve all Campuses using account id ,Region&Countrycode, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getCampusInformationUsingDifferentFilters, TestCaseID=GAPI-5369, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&region=APAC&country=Hong Kong, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCampusInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729]" started-at="2023-05-19T18:11:18 IST" name="teardown" finished-at="2023-05-19T18:11:18 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCampusInformationUsingDifferentFilters status=SUCCESS method=GetCampus.getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729]" started-at="2023-05-19T18:11:18 IST" name="getCampusInformationUsingDifferentFilters" data-provider="testCasesData" finished-at="2023-05-19T18:11:19 IST" duration-ms="720" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-5368-Retrieve all Campuses using account id , Region, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=, visitorPhone=, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=, ci=, readFlag=, errorMessage=, methodName=getCampusInformationUsingDifferentFilters, TestCaseID=GAPI-5368, errorMessageType=, standardVisitorBadgeStr=, filters=?accountId=0012E00002dmMWeQAM&region=APAC, visitorEmail=, legalEntityKey=, visitorLastName=, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getCampusInformationUsingDifferentFilters -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729]" started-at="2023-05-19T18:11:19 IST" name="teardown" finished-at="2023-05-19T18:11:19 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getCampusInformationUsingDifferentFilters status=SUCCESS method=GetCampus.getCampusInformationUsingDifferentFilters(java.util.Map)[pri:0, instance:com.gapi.testCases.GetCampus@3fc79729] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.GetCampus -->
      <class name="com.gapi.testCases.ModifyFAVisitorAccess">
        <test-method retried="true" signature="verifyAttributeModifyVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAVisitorAccess@7cb502c]" started-at="2023-05-19T18:13:29 IST" name="verifyAttributeModifyVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:30 IST" duration-ms="755" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-9001-Modify Visitor Access (Add Site) and verify the weather the category attribute value as (Modify Visitor Access) from Service Ticket Get call response, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyAttributeModifyVisitorAccessRequest, TestCaseID=GAPI-9001, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=category, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=Modify Visitor Access, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.ModifyFAVisitorAccess.verifyAttributeModifyVisitorAccessRequest(ModifyFAVisitorAccess.java:141)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAttributeModifyVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.ModifyFAVisitorAccess@7cb502c]" started-at="2023-05-19T18:13:30 IST" name="teardown" finished-at="2023-05-19T18:13:30 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAttributeModifyVisitorAccessRequest status=SKIP method=ModifyFAVisitorAccess.verifyAttributeModifyVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAVisitorAccess@7cb502c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyAttributeModifyVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAVisitorAccess@7cb502c]" started-at="2023-05-19T18:13:30 IST" name="verifyAttributeModifyVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:31 IST" duration-ms="494" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-9001-Modify Visitor Access (Add Site) and verify the weather the category attribute value as (Modify Visitor Access) from Service Ticket Get call response, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyAttributeModifyVisitorAccessRequest, TestCaseID=GAPI-9001, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=category, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=Modify Visitor Access, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.ModifyFAVisitorAccess.verifyAttributeModifyVisitorAccessRequest(ModifyFAVisitorAccess.java:141)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAttributeModifyVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.ModifyFAVisitorAccess@7cb502c]" started-at="2023-05-19T18:13:31 IST" name="teardown" finished-at="2023-05-19T18:13:31 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAttributeModifyVisitorAccessRequest status=FAILURE method=ModifyFAVisitorAccess.verifyAttributeModifyVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAVisitorAccess@7cb502c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyAttributeModifyVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAVisitorAccess@7cb502c]" started-at="2023-05-19T18:13:31 IST" name="verifyAttributeModifyVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:31 IST" duration-ms="470" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-9010-Modify Visitor Access (Add Site) and verify the weather the Description attribute value as (Modify Visitor Access) from Service Ticket Get call response, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=Modify Visitor Access, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyAttributeModifyVisitorAccessRequest, TestCaseID=GAPI-9010, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=description, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.ModifyFAVisitorAccess.verifyAttributeModifyVisitorAccessRequest(ModifyFAVisitorAccess.java:141)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAttributeModifyVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.ModifyFAVisitorAccess@7cb502c]" started-at="2023-05-19T18:13:31 IST" name="teardown" finished-at="2023-05-19T18:13:31 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAttributeModifyVisitorAccessRequest status=SKIP method=ModifyFAVisitorAccess.verifyAttributeModifyVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAVisitorAccess@7cb502c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyAttributeModifyVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAVisitorAccess@7cb502c]" started-at="2023-05-19T18:13:31 IST" name="verifyAttributeModifyVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:32 IST" duration-ms="453" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-9010-Modify Visitor Access (Add Site) and verify the weather the Description attribute value as (Modify Visitor Access) from Service Ticket Get call response, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=Modify Visitor Access, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyAttributeModifyVisitorAccessRequest, TestCaseID=GAPI-9010, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=description, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="org.json.JSONException">
            <message>
              <![CDATA[JSONObject["workOrder"] not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.json.JSONException: JSONObject["workOrder"] not found.
at org.json.JSONObject.get(JSONObject.java:520)
at org.json.JSONObject.getJSONArray(JSONObject.java:714)
at com.gapi.utilities.TestUtilities.getAttributeFromArrayResponse(TestUtilities.java:123)
at com.gapi.testCases.ModifyFAVisitorAccess.verifyAttributeModifyVisitorAccessRequest(ModifyFAVisitorAccess.java:141)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.json.JSONException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAttributeModifyVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.ModifyFAVisitorAccess@7cb502c]" started-at="2023-05-19T18:13:32 IST" name="teardown" finished-at="2023-05-19T18:13:32 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAttributeModifyVisitorAccessRequest status=FAILURE method=ModifyFAVisitorAccess.verifyAttributeModifyVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAVisitorAccess@7cb502c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyModifyVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAVisitorAccess@7cb502c]" started-at="2023-05-19T18:13:32 IST" name="verifyModifyVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:32 IST" duration-ms="453" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-6254-GAPI-6266-GAPI-6256-GAPI-6257-Modify visitor access request with valid site and location, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyModifyVisitorAccessRequest, TestCaseID=GAPI-6254, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.ModifyFAVisitorAccess.verifyModifyVisitorAccessRequest(ModifyFAVisitorAccess.java:75)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyModifyVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.ModifyFAVisitorAccess@7cb502c]" started-at="2023-05-19T18:13:32 IST" name="teardown" finished-at="2023-05-19T18:13:32 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyModifyVisitorAccessRequest status=SKIP method=ModifyFAVisitorAccess.verifyModifyVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAVisitorAccess@7cb502c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyModifyVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAVisitorAccess@7cb502c]" started-at="2023-05-19T18:13:32 IST" name="verifyModifyVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:33 IST" duration-ms="455" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=GAPI-6254-GAPI-6266-GAPI-6256-GAPI-6257-Modify visitor access request with valid site and location, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyModifyVisitorAccessRequest, TestCaseID=GAPI-6254, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.ModifyFAVisitorAccess.verifyModifyVisitorAccessRequest(ModifyFAVisitorAccess.java:75)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyModifyVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.ModifyFAVisitorAccess@7cb502c]" started-at="2023-05-19T18:13:33 IST" name="teardown" finished-at="2023-05-19T18:13:33 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyModifyVisitorAccessRequest status=FAILURE method=ModifyFAVisitorAccess.verifyModifyVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAVisitorAccess@7cb502c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyModifyVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAVisitorAccess@7cb502c]" started-at="2023-05-19T18:13:33 IST" name="verifyModifyVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:33 IST" duration-ms="265" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=test1@forvisitor.com, serviceType=, permissionId=, notes=unknow test, isExtendedVisitorBadge=false, visitorType=false, isBulkRequest=false, contactType=, TestCaseName=Modify visitor access request with Invalid site and location, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Not Found, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=Visitor Access (Escorted), permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=44922.0, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=hello, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=test5, visitorBadgeStartDate=44921.0, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=44921.0, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=civil, visitorBadgeEndDate=44922.0, assetId=, company=TelX Group, Inc., detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=404, ci=, readFlag=, errorMessage=, methodName=verifyModifyVisitorAccessRequest, TestCaseID=Modify vi, errorMessageType=, standardVisitorBadgeStr=Visitor Access (Standard), filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX116, locations2=, escortLastName=test6, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=L106  Tiktok Cage, packageCount=, asset=, category=, visitorHostLastName=test8}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyModifyVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.ModifyFAVisitorAccess@7cb502c]" started-at="2023-05-19T18:13:33 IST" name="teardown" finished-at="2023-05-19T18:13:33 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyModifyVisitorAccessRequest status=SUCCESS method=ModifyFAVisitorAccess.verifyModifyVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.ModifyFAVisitorAccess@7cb502c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.ModifyFAVisitorAccess -->
      <class name="com.gapi.testCases.TerminateVisitorAccessRequest">
        <test-method signature="terminateVisitorAccessRequestWithIncorrectEmail(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminateVisitorAccessRequest@3e2059ae]" started-at="2023-05-19T18:13:22 IST" name="terminateVisitorAccessRequestWithIncorrectEmail" data-provider="testCasesData" finished-at="2023-05-19T18:13:22 IST" duration-ms="293" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-6817-GAPI-6838-FA-Terminate  Visitor Access Request - With incorrect Email - Validate error message, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=Bad Request, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=Arul, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=400, ci=, readFlag=, errorMessage=, methodName=terminateVisitorAccessRequestWithIncorrectEmail, TestCaseID=GAPI-6817, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=Test@, legalEntityKey=, visitorLastName=Prakash, PermissionGroupIDForprivileges=, site=, locations2=, escortLastName=, assetName=, locations=, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- terminateVisitorAccessRequestWithIncorrectEmail -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.TerminateVisitorAccessRequest@3e2059ae]" started-at="2023-05-19T18:13:22 IST" name="teardown" finished-at="2023-05-19T18:13:22 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=terminateVisitorAccessRequestWithIncorrectEmail status=SUCCESS method=TerminateVisitorAccessRequest.terminateVisitorAccessRequestWithIncorrectEmail(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminateVisitorAccessRequest@3e2059ae] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyAttributeTerminateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminateVisitorAccessRequest@3e2059ae]" started-at="2023-05-19T18:13:22 IST" name="verifyAttributeTerminateVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:23 IST" duration-ms="569" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-9011-Terminate a Visitor Access request and verify the weather the Description attribute value as (Request for Terminate All Visitor badge) from Service Ticket Get call response, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Request for Terminate Visitor badge, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=44922.0, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyAttributeTerminateVisitorAccessRequest, TestCaseID=GAPI-9011, errorMessageType=, standardVisitorBadgeStr=, filters=description, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.TerminateVisitorAccessRequest.verifyAttributeTerminateVisitorAccessRequest(TerminateVisitorAccessRequest.java:128)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAttributeTerminateVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.TerminateVisitorAccessRequest@3e2059ae]" started-at="2023-05-19T18:13:23 IST" name="teardown" finished-at="2023-05-19T18:13:23 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAttributeTerminateVisitorAccessRequest status=SKIP method=TerminateVisitorAccessRequest.verifyAttributeTerminateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminateVisitorAccessRequest@3e2059ae] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyAttributeTerminateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminateVisitorAccessRequest@3e2059ae]" started-at="2023-05-19T18:13:23 IST" name="verifyAttributeTerminateVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:23 IST" duration-ms="401" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-9011-Terminate a Visitor Access request and verify the weather the Description attribute value as (Request for Terminate All Visitor badge) from Service Ticket Get call response, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=Request for Terminate Visitor badge, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=44922.0, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyAttributeTerminateVisitorAccessRequest, TestCaseID=GAPI-9011, errorMessageType=, standardVisitorBadgeStr=, filters=description, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.TerminateVisitorAccessRequest.verifyAttributeTerminateVisitorAccessRequest(TerminateVisitorAccessRequest.java:128)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAttributeTerminateVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.TerminateVisitorAccessRequest@3e2059ae]" started-at="2023-05-19T18:13:23 IST" name="teardown" finished-at="2023-05-19T18:13:23 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAttributeTerminateVisitorAccessRequest status=FAILURE method=TerminateVisitorAccessRequest.verifyAttributeTerminateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminateVisitorAccessRequest@3e2059ae] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyAttributeTerminateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminateVisitorAccessRequest@3e2059ae]" started-at="2023-05-19T18:13:23 IST" name="verifyAttributeTerminateVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:24 IST" duration-ms="400" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-9003-Terminate a Visitor Access request and verify the weather the category attribute value as (Terminate All Visitor Access) from Service Ticket Get call response, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=44922.0, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyAttributeTerminateVisitorAccessRequest, TestCaseID=GAPI-9003, errorMessageType=, standardVisitorBadgeStr=, filters=category, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=Terminate All Visitor Access, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.TerminateVisitorAccessRequest.verifyAttributeTerminateVisitorAccessRequest(TerminateVisitorAccessRequest.java:128)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAttributeTerminateVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.TerminateVisitorAccessRequest@3e2059ae]" started-at="2023-05-19T18:13:24 IST" name="teardown" finished-at="2023-05-19T18:13:24 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAttributeTerminateVisitorAccessRequest status=SKIP method=TerminateVisitorAccessRequest.verifyAttributeTerminateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminateVisitorAccessRequest@3e2059ae] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyAttributeTerminateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminateVisitorAccessRequest@3e2059ae]" started-at="2023-05-19T18:13:24 IST" name="verifyAttributeTerminateVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:24 IST" duration-ms="400" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-9003-Terminate a Visitor Access request and verify the weather the category attribute value as (Terminate All Visitor Access) from Service Ticket Get call response, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=44922.0, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyAttributeTerminateVisitorAccessRequest, TestCaseID=GAPI-9003, errorMessageType=, standardVisitorBadgeStr=, filters=category, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=Terminate All Visitor Access, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.TerminateVisitorAccessRequest.verifyAttributeTerminateVisitorAccessRequest(TerminateVisitorAccessRequest.java:128)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAttributeTerminateVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.TerminateVisitorAccessRequest@3e2059ae]" started-at="2023-05-19T18:13:24 IST" name="teardown" finished-at="2023-05-19T18:13:24 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAttributeTerminateVisitorAccessRequest status=FAILURE method=TerminateVisitorAccessRequest.verifyAttributeTerminateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminateVisitorAccessRequest@3e2059ae] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method retried="true" signature="verifyTerminateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminateVisitorAccessRequest@3e2059ae]" started-at="2023-05-19T18:13:24 IST" name="verifyTerminateVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:25 IST" duration-ms="412" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-6258-GAPI-6837-Validate Visitor Access Ticket Terminate, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=44922.0, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyTerminateVisitorAccessRequest, TestCaseID=GAPI-6258, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.TerminateVisitorAccessRequest.verifyTerminateVisitorAccessRequest(TerminateVisitorAccessRequest.java:48)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyTerminateVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.TerminateVisitorAccessRequest@3e2059ae]" started-at="2023-05-19T18:13:25 IST" name="teardown" finished-at="2023-05-19T18:13:25 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyTerminateVisitorAccessRequest status=SKIP method=TerminateVisitorAccessRequest.verifyTerminateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminateVisitorAccessRequest@3e2059ae] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="verifyTerminateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminateVisitorAccessRequest@3e2059ae]" started-at="2023-05-19T18:13:25 IST" name="verifyTerminateVisitorAccessRequest" data-provider="testCasesData" finished-at="2023-05-19T18:13:25 IST" duration-ms="397" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{emailNotifications=, serviceType=, permissionId=, notes=, isExtendedVisitorBadge=, visitorType=, isBulkRequest=, contactType=, TestCaseName=GAPI-6258-GAPI-6837-Validate Visitor Access Ticket Terminate, search_query=, serviceImpactedDescription=, yardi_id=, deleteFlag=, customerReference=, action=, details=, ExpectedStatusMessage=OK, visitorPhone=91-9876543210, trackingNumber=, extendedVisitorBadgeStr=, permissionGroupId=, assetId2=, billingAccountNumber=, assetId1=, assetId4=, accessEndDate=, assetId3=, report_type=, estimatedDeliveryDate=, firstName=, phone=, courier=, visitorHostFirstName=, user_id=, name=, notificationRecipients=, position=, page=, serviceImpact=, escortFirstName=, visitorBadgeStartDate=, globalUltimateKey=, lastName=, code=, role=, accountName=, referenceTicket=, accessStartDate=, description=, permissionGroups=, workDescription=, executionFlag=Y, title=, visitorHostCompany=, visitorBadgeEndDate=44922.0, assetId=, company=, detailedInstruction=, cancelReason=, email=, visitorFirstName=john, isLoadingBayRequired=, customerExternalReference=, comments=, requestType=, expectedStatusCode=200, ci=, readFlag=, errorMessage=, methodName=verifyTerminateVisitorAccessRequest, TestCaseID=GAPI-6258, errorMessageType=, standardVisitorBadgeStr=, filters=, visitorEmail=test@test.com, legalEntityKey=, visitorLastName=test, PermissionGroupIDForprivileges=, site=PHX015, locations2=, escortLastName=, assetName=, locations=COLO 8 Starbucks Cage 8.06, location=, packageCount=, asset=, category=, visitorHostLastName=}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at com.gapi.testCases.TerminateVisitorAccessRequest.verifyTerminateVisitorAccessRequest(TerminateVisitorAccessRequest.java:48)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyTerminateVisitorAccessRequest -->
        <test-method is-config="true" signature="teardown(org.testng.ITestResult)[pri:0, instance:com.gapi.testCases.TerminateVisitorAccessRequest@3e2059ae]" started-at="2023-05-19T18:13:25 IST" name="teardown" finished-at="2023-05-19T18:13:25 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyTerminateVisitorAccessRequest status=FAILURE method=TerminateVisitorAccessRequest.verifyTerminateVisitorAccessRequest(java.util.Map)[pri:0, instance:com.gapi.testCases.TerminateVisitorAccessRequest@3e2059ae] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.gapi.testCases.TerminateVisitorAccessRequest -->
    </test> <!-- All Test Cases -->
  </suite> <!-- gapi -->
</testng-results>
